<?xml version="1.0" encoding="UTF-8"?><?Siebel-Property-Set EscapeNames="true"?><Business_spcService
 Comments="20140125:PPB Collections, barring incorporated WIP. 20140110:PPB Retrofitted for SCMS,20140225:Incorporated System Barring/Unbarrinf/Suspend/Resume."
 State_spcManagement_spcType="Stateful"
 Cache="N"
 Server_spcEnabled="N"
 Display_spcName="TM BS Product Utility App"
 Inactive="N"
 Hidden="N"
 Class="CSSService"
 Name="TM BS Product Utility App"
><Business_spcService_spcMethod
 Comments=""
 Parent_spcId="1-5RGN7C"
 Display_spcName="Blacklist"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Hidden="N"
 Name="Blacklist"
></Business_spcService_spcMethod
><Business_spcService_spcMethod
 Comments="20140129:PPB Function to cancel the future dated orders for a given asset identified by integration id"
 Parent_spcId="1-5RGN7C"
 Display_spcName="CancelFDO"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Hidden="N"
 Name="CancelFDO"
><Business_spcService_spcMethod_spcArg
 Preferred_spcSequence=""
 Data_spcType="String"
 Comments=""
 Parent_spcId="1-5RGN7E"
 Pick_spcApplet=""
 GParent_spcId="1-5RGN7C"
 Optional="N"
 Storage_spcType="Property"
 Integration_spcObject=""
 GParent_spcName="TM BS Product Utility App"
 Pick_spcField=""
 Type="Output"
 Display_spcName="Error Code"
 Parent_spcName="CancelFDO"
 Parent_spcInactive="N"
 Inactive="N"
 GParent_spcInactive="N"
 Picklist=""
 Hidden="N"
 Name="Error Code"
></Business_spcService_spcMethod_spcArg
><Business_spcService_spcMethod_spcArg
 Preferred_spcSequence=""
 Data_spcType="String"
 Comments=""
 Parent_spcId="1-5RGN7E"
 Pick_spcApplet=""
 GParent_spcId="1-5RGN7C"
 Optional="N"
 Storage_spcType="Property"
 Integration_spcObject=""
 GParent_spcName="TM BS Product Utility App"
 Pick_spcField=""
 Type="Output"
 Display_spcName="Error Message"
 Parent_spcName="CancelFDO"
 Parent_spcInactive="N"
 Inactive="N"
 GParent_spcInactive="N"
 Picklist=""
 Hidden="N"
 Name="Error Message"
></Business_spcService_spcMethod_spcArg
><Business_spcService_spcMethod_spcArg
 Preferred_spcSequence=""
 Data_spcType="String"
 Comments="Integration Id of the asset, future dated orders for which are to be cancelled."
 Parent_spcId="1-5RGN7E"
 Pick_spcApplet=""
 GParent_spcId="1-5RGN7C"
 Optional="N"
 Storage_spcType="Property"
 Integration_spcObject=""
 GParent_spcName="TM BS Product Utility App"
 Pick_spcField=""
 Type="Input"
 Display_spcName="Integration Id"
 Parent_spcName="CancelFDO"
 Parent_spcInactive="N"
 Inactive="N"
 GParent_spcInactive="N"
 Picklist=""
 Hidden="N"
 Name="Integration Id"
></Business_spcService_spcMethod_spcArg
></Business_spcService_spcMethod
><Business_spcService_spcMethod
 Comments=""
 Parent_spcId="1-5RGN7C"
 Display_spcName="CreateActivity"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Hidden="N"
 Name="CreateActivity"
></Business_spcService_spcMethod
><Business_spcService_spcMethod
 Comments="20110809:PPB Method for modify order creation, WIP, exepected to replace EDR processing"
 Parent_spcId="1-5RGN7C"
 Display_spcName="CreateModifyOrder"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Hidden="N"
 Name="CreateModifyOrder"
><Business_spcService_spcMethod_spcArg
 Preferred_spcSequence=""
 Data_spcType="String"
 Comments="20110809:PPB Action code for the TBD product, Add/New, Delete"
 Parent_spcId="1-5RGN7M"
 Pick_spcApplet=""
 GParent_spcId="1-5RGN7C"
 Optional="N"
 Storage_spcType="Property"
 Integration_spcObject=""
 GParent_spcName="TM BS Product Utility App"
 Pick_spcField=""
 Type="Input"
 Display_spcName="MSISDN"
 Parent_spcName="CreateModifyOrder"
 Parent_spcInactive="N"
 Inactive="N"
 GParent_spcInactive="N"
 Picklist=""
 Hidden="N"
 Name="Action Code"
></Business_spcService_spcMethod_spcArg
><Business_spcService_spcMethod_spcArg
 Preferred_spcSequence=""
 Data_spcType="String"
 Comments="20110809:PPB Error Code of the overall execution, will be OK else some value indicating the error occurred"
 Parent_spcId="1-5RGN7M"
 Pick_spcApplet=""
 GParent_spcId="1-5RGN7C"
 Optional="N"
 Storage_spcType="Property"
 Integration_spcObject=""
 GParent_spcName="TM BS Product Utility App"
 Pick_spcField=""
 Type="Output"
 Display_spcName="Error Code"
 Parent_spcName="CreateModifyOrder"
 Parent_spcInactive="N"
 Inactive="N"
 GParent_spcInactive="N"
 Picklist=""
 Hidden="N"
 Name="Error Code"
></Business_spcService_spcMethod_spcArg
><Business_spcService_spcMethod_spcArg
 Preferred_spcSequence=""
 Data_spcType="String"
 Comments="20110809:PPB Detailed Error Message if error has occurred in the execution"
 Parent_spcId="1-5RGN7M"
 Pick_spcApplet=""
 GParent_spcId="1-5RGN7C"
 Optional="N"
 Storage_spcType="Property"
 Integration_spcObject=""
 GParent_spcName="TM BS Product Utility App"
 Pick_spcField=""
 Type="Output"
 Display_spcName="Error Code"
 Parent_spcName="CreateModifyOrder"
 Parent_spcInactive="N"
 Inactive="N"
 GParent_spcInactive="N"
 Picklist=""
 Hidden="N"
 Name="Error Message"
></Business_spcService_spcMethod_spcArg
><Business_spcService_spcMethod_spcArg
 Preferred_spcSequence=""
 Data_spcType="String"
 Comments="20110809:PPB External reference for the modify order, this will get stamped in the S_usORDER.INTEGRATION_usID"
 Parent_spcId="1-5RGN7M"
 Pick_spcApplet=""
 GParent_spcId="1-5RGN7C"
 Optional="N"
 Storage_spcType="Property"
 Integration_spcObject=""
 GParent_spcName="TM BS Product Utility App"
 Pick_spcField=""
 Type="Input"
 Display_spcName="MSISDN"
 Parent_spcName="CreateModifyOrder"
 Parent_spcInactive="N"
 Inactive="N"
 GParent_spcInactive="N"
 Picklist=""
 Hidden="N"
 Name="Ext Ref Id"
></Business_spcService_spcMethod_spcArg
><Business_spcService_spcMethod_spcArg
 Preferred_spcSequence=""
 Data_spcType="String"
 Comments="20110809:PPB MSISDN of the subscription on which the modify order is to be created and executed"
 Parent_spcId="1-5RGN7M"
 Pick_spcApplet=""
 GParent_spcId="1-5RGN7C"
 Optional="N"
 Storage_spcType="Property"
 Integration_spcObject=""
 GParent_spcName="TM BS Product Utility App"
 Pick_spcField=""
 Type="Input"
 Display_spcName="MSISDN"
 Parent_spcName="CreateModifyOrder"
 Parent_spcInactive="N"
 Inactive="N"
 GParent_spcInactive="N"
 Picklist=""
 Hidden="N"
 Name="MSISDN"
></Business_spcService_spcMethod_spcArg
><Business_spcService_spcMethod_spcArg
 Preferred_spcSequence=""
 Data_spcType="String"
 Comments="20110809:PPB Part Number/Code of the product to be altered, refered to as TBD product, Name or Code is mandatory"
 Parent_spcId="1-5RGN7M"
 Pick_spcApplet=""
 GParent_spcId="1-5RGN7C"
 Optional="Y"
 Storage_spcType="Property"
 Integration_spcObject=""
 GParent_spcName="TM BS Product Utility App"
 Pick_spcField=""
 Type="Input"
 Display_spcName="MSISDN"
 Parent_spcName="CreateModifyOrder"
 Parent_spcInactive="N"
 Inactive="N"
 GParent_spcInactive="N"
 Picklist=""
 Hidden="N"
 Name="Product Code"
></Business_spcService_spcMethod_spcArg
><Business_spcService_spcMethod_spcArg
 Preferred_spcSequence=""
 Data_spcType="String"
 Comments="20110809:PPB Name of the product to be altered, refered to as TBD product, Name or Code is mandatory"
 Parent_spcId="1-5RGN7M"
 Pick_spcApplet=""
 GParent_spcId="1-5RGN7C"
 Optional="Y"
 Storage_spcType="Property"
 Integration_spcObject=""
 GParent_spcName="TM BS Product Utility App"
 Pick_spcField=""
 Type="Input"
 Display_spcName="MSISDN"
 Parent_spcName="CreateModifyOrder"
 Parent_spcInactive="N"
 Inactive="N"
 GParent_spcInactive="N"
 Picklist=""
 Hidden="N"
 Name="Product Name"
></Business_spcService_spcMethod_spcArg
></Business_spcService_spcMethod
><Business_spcService_spcMethod
 Comments=""
 Parent_spcId="1-5RGN7C"
 Display_spcName="CreateModifyOrder_usPostpaid"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Hidden="N"
 Name="CreateModifyOrder_usPostpaid"
></Business_spcService_spcMethod
><Business_spcService_spcMethod
 Comments=""
 Parent_spcId="1-5RGN7C"
 Display_spcName="Disconnect"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Hidden="N"
 Name="Disconnect"
></Business_spcService_spcMethod
><Business_spcService_spcMethod
 Comments="20110727:PPB A method to extract the product structure from the product master configuration, it generates an output propertyset representing the product hierarchy in the given root product"
 Parent_spcId="1-5RGN7C"
 Display_spcName="GetPortsOfProduct"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Hidden="N"
 Name="GetPortsOfProduct"
><Business_spcService_spcMethod_spcArg
 Preferred_spcSequence=""
 Data_spcType="String"
 Comments="20110727:PPB Name of the file to which product hierarchy is to be stored/saved"
 Parent_spcId="1-5RGN83"
 Pick_spcApplet=""
 GParent_spcId="1-5RGN7C"
 Optional="Y"
 Storage_spcType="Property"
 Integration_spcObject=""
 GParent_spcName="TM BS Product Utility App"
 Pick_spcField=""
 Type="Input"
 Display_spcName="FileName"
 Parent_spcName="GetPortsOfProduct"
 Parent_spcInactive="N"
 Inactive="N"
 GParent_spcInactive="N"
 Picklist=""
 Hidden="N"
 Name="FileName"
></Business_spcService_spcMethod_spcArg
><Business_spcService_spcMethod_spcArg
 Preferred_spcSequence=""
 Data_spcType="String"
 Comments="20110727:PPB Row Id of the root product, structure of which is to be exported, either Id or Name must be provided"
 Parent_spcId="1-5RGN83"
 Pick_spcApplet=""
 GParent_spcId="1-5RGN7C"
 Optional="Y"
 Storage_spcType="Property"
 Integration_spcObject=""
 GParent_spcName="TM BS Product Utility App"
 Pick_spcField=""
 Type="Input"
 Display_spcName="Product Id"
 Parent_spcName="GetPortsOfProduct"
 Parent_spcInactive="N"
 Inactive="N"
 GParent_spcInactive="N"
 Picklist=""
 Hidden="N"
 Name="Product Id"
></Business_spcService_spcMethod_spcArg
><Business_spcService_spcMethod_spcArg
 Preferred_spcSequence=""
 Data_spcType="String"
 Comments="20110727:PPB Name of the root product, structure of which is to be exported, either Id or Name must be provided"
 Parent_spcId="1-5RGN83"
 Pick_spcApplet=""
 GParent_spcId="1-5RGN7C"
 Optional="Y"
 Storage_spcType="Property"
 Integration_spcObject=""
 GParent_spcName="TM BS Product Utility App"
 Pick_spcField=""
 Type="Input"
 Display_spcName="Product Name"
 Parent_spcName="GetPortsOfProduct"
 Parent_spcInactive="N"
 Inactive="N"
 GParent_spcInactive="N"
 Picklist=""
 Hidden="N"
 Name="Product Name"
></Business_spcService_spcMethod_spcArg
></Business_spcService_spcMethod
><Business_spcService_spcMethod
 Comments=""
 Parent_spcId="1-5RGN7C"
 Display_spcName="LOV"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Hidden="N"
 Name="LOV"
><Business_spcService_spcMethod_spcArg
 Preferred_spcSequence=""
 Data_spcType="String"
 Comments=""
 Parent_spcId="1-5RGN8A"
 Pick_spcApplet=""
 GParent_spcId="1-5RGN7C"
 Optional="Y"
 Storage_spcType="Property"
 Integration_spcObject=""
 GParent_spcName="TM BS Product Utility App"
 Pick_spcField=""
 Type="Input / Output"
 Display_spcName="Attrib01"
 Parent_spcName="LOV"
 Parent_spcInactive="N"
 Inactive="N"
 GParent_spcInactive="N"
 Picklist=""
 Hidden="N"
 Name="Attrib01"
></Business_spcService_spcMethod_spcArg
></Business_spcService_spcMethod
><Business_spcService_spcMethod
 Comments=""
 Parent_spcId="1-5RGN7C"
 Display_spcName="LoadRecordsfromFile"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Hidden="N"
 Name="LoadRecordsfromFile"
><Business_spcService_spcMethod_spcArg
 Preferred_spcSequence=""
 Data_spcType="String"
 Comments=""
 Parent_spcId="1-5RGN8D"
 Pick_spcApplet=""
 GParent_spcId="1-5RGN7C"
 Optional="N"
 Storage_spcType="Property"
 Integration_spcObject=""
 GParent_spcName="TM BS Product Utility App"
 Pick_spcField=""
 Type="Input"
 Display_spcName="BatchType"
 Parent_spcName="LoadRecordsfromFile"
 Parent_spcInactive="N"
 Inactive="N"
 GParent_spcInactive="N"
 Picklist=""
 Hidden="N"
 Name="BatchType"
></Business_spcService_spcMethod_spcArg
><Business_spcService_spcMethod_spcArg
 Preferred_spcSequence=""
 Data_spcType="String"
 Comments=""
 Parent_spcId="1-5RGN8D"
 Pick_spcApplet=""
 GParent_spcId="1-5RGN7C"
 Optional="N"
 Storage_spcType="Property"
 Integration_spcObject=""
 GParent_spcName="TM BS Product Utility App"
 Pick_spcField=""
 Type="Input"
 Display_spcName="Delimiter"
 Parent_spcName="LoadRecordsfromFile"
 Parent_spcInactive="N"
 Inactive="N"
 GParent_spcInactive="N"
 Picklist=""
 Hidden="N"
 Name="Delimiter"
></Business_spcService_spcMethod_spcArg
><Business_spcService_spcMethod_spcArg
 Preferred_spcSequence=""
 Data_spcType="String"
 Comments=""
 Parent_spcId="1-5RGN8D"
 Pick_spcApplet=""
 GParent_spcId="1-5RGN7C"
 Optional="N"
 Storage_spcType="Property"
 Integration_spcObject=""
 GParent_spcName="TM BS Product Utility App"
 Pick_spcField=""
 Type="Input"
 Display_spcName="DirectoryPath"
 Parent_spcName="LoadRecordsfromFile"
 Parent_spcInactive="N"
 Inactive="N"
 GParent_spcInactive="N"
 Picklist=""
 Hidden="N"
 Name="DirectoryPath"
></Business_spcService_spcMethod_spcArg
><Business_spcService_spcMethod_spcArg
 Preferred_spcSequence=""
 Data_spcType="String"
 Comments=""
 Parent_spcId="1-5RGN8D"
 Pick_spcApplet=""
 GParent_spcId="1-5RGN7C"
 Optional="N"
 Storage_spcType="Property"
 Integration_spcObject=""
 GParent_spcName="TM BS Product Utility App"
 Pick_spcField=""
 Type="Input"
 Display_spcName="FileName"
 Parent_spcName="LoadRecordsfromFile"
 Parent_spcInactive="N"
 Inactive="N"
 GParent_spcInactive="N"
 Picklist=""
 Hidden="N"
 Name="FileName"
></Business_spcService_spcMethod_spcArg
><Business_spcService_spcMethod_spcArg
 Preferred_spcSequence=""
 Data_spcType="String"
 Comments=""
 Parent_spcId="1-5RGN8D"
 Pick_spcApplet=""
 GParent_spcId="1-5RGN7C"
 Optional="N"
 Storage_spcType="Property"
 Integration_spcObject=""
 GParent_spcName="TM BS Product Utility App"
 Pick_spcField=""
 Type="Input"
 Display_spcName="Footer Lines to Skip"
 Parent_spcName="LoadRecordsfromFile"
 Parent_spcInactive="N"
 Inactive="N"
 GParent_spcInactive="N"
 Picklist=""
 Hidden="N"
 Name="Footer Lines to Skip"
></Business_spcService_spcMethod_spcArg
><Business_spcService_spcMethod_spcArg
 Preferred_spcSequence=""
 Data_spcType="String"
 Comments=""
 Parent_spcId="1-5RGN8D"
 Pick_spcApplet=""
 GParent_spcId="1-5RGN7C"
 Optional="N"
 Storage_spcType="Property"
 Integration_spcObject=""
 GParent_spcName="TM BS Product Utility App"
 Pick_spcField=""
 Type="Input"
 Display_spcName="Header Lines to Skip"
 Parent_spcName="LoadRecordsfromFile"
 Parent_spcInactive="N"
 Inactive="N"
 GParent_spcInactive="N"
 Picklist=""
 Hidden="N"
 Name="Header Lines to Skip"
></Business_spcService_spcMethod_spcArg
></Business_spcService_spcMethod
><Business_spcService_spcMethod
 Comments=""
 Parent_spcId="1-5RGN7C"
 Display_spcName="ProcessFiles"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Hidden="N"
 Name="ProcessFiles"
><Business_spcService_spcMethod_spcArg
 Preferred_spcSequence=""
 Data_spcType="String"
 Comments=""
 Parent_spcId="1-5RGN8Q"
 Pick_spcApplet=""
 GParent_spcId="1-5RGN7C"
 Optional="N"
 Storage_spcType="Property"
 Integration_spcObject=""
 GParent_spcName="TM BS Product Utility App"
 Pick_spcField=""
 Type="Input"
 Display_spcName="DeleteSource"
 Parent_spcName="ProcessFiles"
 Parent_spcInactive="N"
 Inactive="N"
 GParent_spcInactive="N"
 Picklist=""
 Hidden="N"
 Name="DeleteSource"
></Business_spcService_spcMethod_spcArg
><Business_spcService_spcMethod_spcArg
 Preferred_spcSequence=""
 Data_spcType="String"
 Comments=""
 Parent_spcId="1-5RGN8Q"
 Pick_spcApplet=""
 GParent_spcId="1-5RGN7C"
 Optional="N"
 Storage_spcType="Property"
 Integration_spcObject=""
 GParent_spcName="TM BS Product Utility App"
 Pick_spcField=""
 Type="Input"
 Display_spcName="DirectoryPath"
 Parent_spcName="ProcessFiles"
 Parent_spcInactive="N"
 Inactive="N"
 GParent_spcInactive="N"
 Picklist=""
 Hidden="N"
 Name="DirectoryPath"
></Business_spcService_spcMethod_spcArg
><Business_spcService_spcMethod_spcArg
 Preferred_spcSequence=""
 Data_spcType="String"
 Comments=""
 Parent_spcId="1-5RGN8Q"
 Pick_spcApplet=""
 GParent_spcId="1-5RGN7C"
 Optional="N"
 Storage_spcType="Property"
 Integration_spcObject=""
 GParent_spcName="TM BS Product Utility App"
 Pick_spcField=""
 Type="Input"
 Display_spcName="DirectoryPathTarget"
 Parent_spcName="ProcessFiles"
 Parent_spcInactive="N"
 Inactive="N"
 GParent_spcInactive="N"
 Picklist=""
 Hidden="N"
 Name="DirectoryPathTarget"
></Business_spcService_spcMethod_spcArg
><Business_spcService_spcMethod_spcArg
 Preferred_spcSequence=""
 Data_spcType="String"
 Comments=""
 Parent_spcId="1-5RGN8Q"
 Pick_spcApplet=""
 GParent_spcId="1-5RGN7C"
 Optional="N"
 Storage_spcType="Property"
 Integration_spcObject=""
 GParent_spcName="TM BS Product Utility App"
 Pick_spcField=""
 Type="Input"
 Display_spcName="FilePattern"
 Parent_spcName="ProcessFiles"
 Parent_spcInactive="N"
 Inactive="N"
 GParent_spcInactive="N"
 Picklist=""
 Hidden="N"
 Name="FilePattern"
></Business_spcService_spcMethod_spcArg
></Business_spcService_spcMethod
><Business_spcService_spcMethod
 Comments="20110727:PPB Method to create and process prepaid bulk provisioning order starting with MSISDN, SIM:SIM Type, Plan Name and Reservation Token as inputs"
 Parent_spcId="1-5RGN7C"
 Display_spcName="a"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Hidden="N"
 Name="ProcessPrepaidOrder"
><Business_spcService_spcMethod_spcArg
 Preferred_spcSequence=""
 Data_spcType="String"
 Comments="20110809:PPB Error Code if error has occurred in the execution, else OK or null value"
 Parent_spcId="1-5RGN8Z"
 Pick_spcApplet=""
 GParent_spcId="1-5RGN7C"
 Optional="N"
 Storage_spcType="Property"
 Integration_spcObject=""
 GParent_spcName="TM BS Product Utility App"
 Pick_spcField=""
 Type="Output"
 Display_spcName="Error Message"
 Parent_spcName="ProcessPrepaidOrder"
 Parent_spcInactive="N"
 Inactive="N"
 GParent_spcInactive="N"
 Picklist=""
 Hidden="N"
 Name="Error Code"
></Business_spcService_spcMethod_spcArg
><Business_spcService_spcMethod_spcArg
 Preferred_spcSequence=""
 Data_spcType="String"
 Comments="20110809:PPB Detailed Error Message if error has occurred in the execution"
 Parent_spcId="1-5RGN8Z"
 Pick_spcApplet=""
 GParent_spcId="1-5RGN7C"
 Optional="N"
 Storage_spcType="Property"
 Integration_spcObject=""
 GParent_spcName="TM BS Product Utility App"
 Pick_spcField=""
 Type="Output"
 Display_spcName="Error Message"
 Parent_spcName="ProcessPrepaidOrder"
 Parent_spcInactive="N"
 Inactive="N"
 GParent_spcInactive="N"
 Picklist=""
 Hidden="N"
 Name="Error Message"
></Business_spcService_spcMethod_spcArg
><Business_spcService_spcMethod_spcArg
 Preferred_spcSequence=""
 Data_spcType="String"
 Comments="20110809:PPB Cell Phone number for which the pre-created account, contact, address, invoice profile, order and order line items are to be created."
 Parent_spcId="1-5RGN8Z"
 Pick_spcApplet=""
 GParent_spcId="1-5RGN7C"
 Optional="N"
 Storage_spcType="Property"
 Integration_spcObject=""
 GParent_spcName="TM BS Product Utility App"
 Pick_spcField=""
 Type="Input"
 Display_spcName="Error Message"
 Parent_spcName="ProcessPrepaidOrder"
 Parent_spcInactive="N"
 Inactive="N"
 GParent_spcInactive="N"
 Picklist=""
 Hidden="N"
 Name="MSISDN"
></Business_spcService_spcMethod_spcArg
><Business_spcService_spcMethod_spcArg
 Preferred_spcSequence=""
 Data_spcType="String"
 Comments="20110809:PPB Name of the plan to be setup on the number being pre-activated, this needs to be same as the Favourite created in Siebel, using which the provide order gets created and processed."
 Parent_spcId="1-5RGN8Z"
 Pick_spcApplet=""
 GParent_spcId="1-5RGN7C"
 Optional="N"
 Storage_spcType="Property"
 Integration_spcObject=""
 GParent_spcName="TM BS Product Utility App"
 Pick_spcField=""
 Type="Input"
 Display_spcName="Error Message"
 Parent_spcName="ProcessPrepaidOrder"
 Parent_spcInactive="N"
 Inactive="N"
 GParent_spcInactive="N"
 Picklist=""
 Hidden="N"
 Name="Plan Name"
></Business_spcService_spcMethod_spcArg
><Business_spcService_spcMethod_spcArg
 Preferred_spcSequence=""
 Data_spcType="String"
 Comments="20110809:PPB Reservation token provided by BRM when the MSISDN gets reserved for the purpose of order capture."
 Parent_spcId="1-5RGN8Z"
 Pick_spcApplet=""
 GParent_spcId="1-5RGN7C"
 Optional="N"
 Storage_spcType="Property"
 Integration_spcObject=""
 GParent_spcName="TM BS Product Utility App"
 Pick_spcField=""
 Type="Input"
 Display_spcName="Error Message"
 Parent_spcName="ProcessPrepaidOrder"
 Parent_spcInactive="N"
 Inactive="N"
 GParent_spcInactive="N"
 Picklist=""
 Hidden="N"
 Name="Reservation Token"
></Business_spcService_spcMethod_spcArg
><Business_spcService_spcMethod_spcArg
 Preferred_spcSequence=""
 Data_spcType="String"
 Comments="20110809:PPB SIM number and SIMType separated with : SIM type values can be VMT / Vodafone Money Transfer interpreted as VMT or anything else considered as non-VMT"
 Parent_spcId="1-5RGN8Z"
 Pick_spcApplet=""
 GParent_spcId="1-5RGN7C"
 Optional="N"
 Storage_spcType="Property"
 Integration_spcObject=""
 GParent_spcName="TM BS Product Utility App"
 Pick_spcField=""
 Type="Input"
 Display_spcName="Error Message"
 Parent_spcName="ProcessPrepaidOrder"
 Parent_spcInactive="N"
 Inactive="N"
 GParent_spcInactive="N"
 Picklist=""
 Hidden="N"
 Name="SIM"
></Business_spcService_spcMethod_spcArg
><Business_spcService_spcMethod_spcArg
 Preferred_spcSequence=""
 Data_spcType="String"
 Comments="20110809:PPB By default the order created by this method is submitted to external systems, set this input argument as N or No if the order is not to be submitted."
 Parent_spcId="1-5RGN8Z"
 Pick_spcApplet=""
 GParent_spcId="1-5RGN7C"
 Optional="Y"
 Storage_spcType="Property"
 Integration_spcObject=""
 GParent_spcName="TM BS Product Utility App"
 Pick_spcField=""
 Type="Input"
 Display_spcName="Error Message"
 Parent_spcName="ProcessPrepaidOrder"
 Parent_spcInactive="N"
 Inactive="N"
 GParent_spcInactive="N"
 Picklist=""
 Hidden="N"
 Name="Submit Order"
></Business_spcService_spcMethod_spcArg
></Business_spcService_spcMethod
><Business_spcService_spcMethod
 Comments="20140626 : MV : published this method for auto resumption date stamping"
 Parent_spcId="1-5RGN7C"
 Display_spcName="UpdateOLI"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Hidden="N"
 Name="UpdateOLI"
></Business_spcService_spcMethod
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="/* _newline---------------+------+--------+---------------------------------------------- _newlineDate(YYYYMMDD) | Ver  | By     | Description of Change _newline---------------+------+--------+---------------------------------------------- _newline20060915       | 1.00 | Prasad | Creation _newline---------------+------+--------+---------------------------------------------- _newline*/ _newlinevar strServerPath = &quot;/siebelfs/XML/&quot;;_newline//var strServerPath = &quot;&quot;;_newlinevar mbDebug     = false; _newlinevar miFileSeq   = 0; _newlinevar msGFileName = &quot;&quot;; _newlinevar boProdAdm; _newlinevar bcProdAdm; _newlinevar prodName_usUnbar;_newlinevar  actionCode_usUnbar;_newlinevar countBarring;_newline _newlinetry{_newlinevar boSysPref = TheApplication().GetBusObject(&quot;System Preferences&quot;); _newlinevar bcSysPref = boSysPref.GetBusComp(&quot;System Preferences&quot;);_newline_newlinebcSysPref.ActivateField(&quot;Value&quot;);_newlinebcSysPref.ClearToQuery(); _newlinebcSysPref.SetSearchSpec(&quot;&apos;Name&quot;,&quot;AIA Order Backup Path&apos;&quot;); _newlinebcSysPref.ExecuteQuery(ForwardOnly); _newlinevar isRec = bcSysPref.FirstRecord();_newlineif(isRec)_newline   {_newline    strServerPath  = GetFieldValue(&quot;Value&quot;);_newline   }_newline_newline} catch (e) {_newline    _newline} finally {_newline    bcSysPref=null;_newline    boSysPref=null;_newline}_newline_newline//below is an array of product fields required in the output message _newlinevar arrProdFieldNames = new Array(&quot;Part #&quot;); _newlinevar arrProdFieldTags = new Array(&quot;ProductCode&quot;); _newline _newline//Also needed - to be set in array - ServiceId, AssetNumber, Quantity - comming from Assets Instance _newlinevar arrAssetFieldNames = new Array(&quot;Asset Number&quot;, &quot;Quantity&quot;); _newlinevar arrAssetFieldTags = new Array(&quot;AssetNumber&quot;, &quot;Quantity&quot;); _newline _newline//below is an array used to store attributes which are not to be sent out _newlinevar arrIgnAttribs = new Array(&quot;ServiceType&quot;, &quot;Service Type&quot;, &quot;PackageType&quot;, &quot;Package Type&quot;); _newline//var arrIgnAttribs = new Array(&quot;Service Type&quot;, &quot;Package Type&quot;,&quot;ServiceType&quot;, &quot;PackageType&quot;); _newlinevar strRootProdId; _newlinevar strRootProdName; _newline _newline//the following variables are initalised and used by product path finder functions _newlinevar psOUT:PropertySet; _newlinevar psProdMaster:PropertySet; _newlinevar iProdCnt;//used to store globally the count of products in the bundle"
 Program_spcLanguage="JS"
 Name="(declarations)"
 Sequence="1"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments="[SUBHAJITG][17.3.2012][ADDED CODE FOR BLACKLIST EDR]"
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function func_usBlacklist(Inputs,Outputs) _newline{ _newline//mandatory inputs: AccountId_newline//key fields and BCs:_newline var strErrCode = &quot;OK&quot;; _newline var strErrMesg = &quot;&quot;; _newline_newline var strAccId = Inputs.GetProperty(&quot;AccId&quot;); _newline var boAcc    = TheApplication().GetBusObject(&quot;Account&quot;); _newline var bcAcc     =  boAcc.GetBusComp(&quot;Account&quot;);_newline var contactBc = boAcc.GetBusComp(&quot;Contact&quot;);_newline_newline var blacklistBo = TheApplication().GetBusObject(&quot;VFQA Blacklist Customer BO&quot;); _newline var blacklistBc = blacklistBo.GetBusComp(&quot;VFQA Blacklist Customer BC&quot;);_newline_newline var IDNumber;_newline var IDType;_newline var primContact = &quot;&quot;;_newline var Firstname;_newline var Lastname;_newline_newline with(bcAcc)_newline {_newline   SetViewMode(AllView); _newline   ActivateField(&quot;Account Number&quot;); _newline   ClearToQuery(); _newline   SetSearchExpr(&quot;[Id]=&apos;&quot; + strAccId + &quot;&apos;&quot;); _newline   ExecuteQuery(ForwardOnly); _newline   var isRec = FirstRecord();_newline   if(isRec)_newline   {_newline      ActivateField(&quot;Primary Contact Id&quot;);_newline      primContact = GetFieldValue(&quot;Primary Contact Id&quot;);_newline   }_newline   else_newline  {_newline     strErrCode = &quot;Account Not Found&quot;; _newline     strErrMesg = &quot;Account not found. strAccNum=&quot; + strAccNum + &quot;.&quot; ; _newline  }_newline } //End of with bcAcc_newline_newline_newline if(primContact != &quot;&quot; &amp;&amp; primContact != null)_newline {_newline   with(contactBc)_newline   {_newline     SetViewMode(AllView);_newline     ClearToQuery(); _newline     SetSearchSpec(&quot;Id&quot;, primContact);_newline     ExecuteQuery(ForwardOnly);_newline     var isRec1 = FirstRecord();_newline     if(isRec1)_newline     {_newline         ActivateField(&quot;ID Information&quot;);_newline         ActivateField(&quot;ID Type&quot;);_newline         ActivateField(&quot;First Name&quot;);_newline         ActivateField(&quot;Last Name&quot;);_newline         IDNumber = GetFieldValue(&quot;ID Information&quot;);_newline         IDType = GetFieldValue(&quot;ID Type&quot;);_newline         Firstname =  GetFieldValue(&quot;First Name&quot;);_newline         Lastname =   GetFieldValue(&quot;Last Name&quot;);_newline     }_newline     else_newline     {_newline         strErrCode = &quot;Primary Contact Not Found&quot;; _newline         strErrMesg = &quot;Primary Contact not found. primContact=&quot; + primContact + &quot;.&quot; ; _newline     }_newline   } //end of with contactBc_newline } //end of if (primContact != &quot;&quot; &amp;&amp; primContact != null)_newline_newline//TheApplication().RaiseErrorText(&quot;strAccNum=&quot; + strAccNum + &quot;   primContact=&quot; + primContact + &quot;    IDType=&quot; + IDType + &quot;    IDNumber=&quot; + IDNumber);_newline_newline_newline if(IDNumber != &quot;&quot; &amp;&amp; IDNumber != null )_newline {_newline   with(blacklistBc)_newline   {_newline      ActivateField(&quot;Identification Number&quot;);_newline   ActivateField(&quot;Identification Type&quot;);_newline   ActivateField(&quot;Blacklist Flg&quot;);_newline   ActivateField(&quot;First Name&quot;);_newline   ActivateField(&quot;Last Name&quot;);_newline   ActivateField(&quot;Reason&quot;);//Niteshd_newline      SetViewMode(AllView);_newline      ClearToQuery(); _newline     SetSearchSpec(&quot;Identification Number&quot;,  IDNumber);_newline     ExecuteQuery(ForwardOnly);_newline  var isRec2 = FirstRecord();_newline  if(isRec2)_newline  {_newline      strErrCode = &quot;ID already in blacklist&quot;; _newline         strErrMesg = &quot;ID already in blcklist Id Number =&quot; +  IDNumber + &quot;.&quot; ; _newline  }_newline     else_newline  {_newline      NewRecord(NewAfter);_newline      SetFieldValue(&quot;First Name&quot;,Firstname);_newline        SetFieldValue(&quot;Last Name&quot;, Lastname);_newline        SetFieldValue(&quot;Identification Type&quot;, IDType);_newline//    SetFieldValue(&quot;ID Information&quot;,  IDNumber);_newline       SetFieldValue(&quot;Identification Number&quot;,  IDNumber);_newline       SetFieldValue(&quot;Blacklist Flg&quot;,&quot;Y&quot;);_newline       SetFieldValue(&quot;Reason&quot;,&quot;Customer subject to Collections due to unpaid bills.&quot;);//Niteshd_newline       //var id = GetFieldValue(&quot;Id&quot;);_newline       WriteRecord();_newline   }//   else_newline     }//with(blacklistBc)_newline_newline _newline }//if(IDNumber != &quot;&quot; &amp;&amp; IDNumber != null )_newline  Outputs.SetProperty(&quot;Error Code&quot;,    strErrCode); _newline   Outputs.SetProperty(&quot;Error Message&quot;, strErrMesg); _newlineblacklistBc = null;_newlineblacklistBo = null;_newlinecontactBc = null;_newlinebcAcc = null;_newlineboAcc = null;_newlinereturn CancelOperation;_newline}"
 Program_spcLanguage="JS"
 Name="Blacklist"
 Sequence="2"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments="[SUBHAJITG][Added method for barring scenarios]"
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function CheckAdminBar(strOrderId)_newline{ _newline//sets action code add/delete_newline var boOLI  = TheApplication().GetBusObject(&quot;Order Item&quot;);    _newline  var bcOLI =  boOLI.GetBusComp(&quot;Order Entry - Line Items&quot;);_newline  var prodAdminbar = &quot;User Bar - Mobile Admin&quot;;_newline  var prodDatabar = &quot;Data Bar&quot;;_newline  var actionCode;_newline  var prodICbar = &quot;Collection IC Bar&quot;;_newline  var prdOGbar = &quot;Collection OG Bar&quot;;_newline  var actCode;_newline  //var strMSISDN = Inputs.GetProperty(&quot;MSISDN&quot;);_newline  with( bcOLI)_newline  {_newline    SetViewMode(AllView); _newline   ActivateField(&quot;Order Header Id&quot;); _newline   ActivateField(&quot;Product&quot;); _newline  ActivateField(&quot;Action Code&quot;); _newline   ClearToQuery(); _newline   //var srchexp = &quot;[Serial Number] =&apos;&quot; + strMSISDN + &quot;&apos; AND ([Auto Type] = &apos;&quot; + OGbar + &quot;&apos; OR [Auto Type] = &apos;&quot; + IGbar +&quot;&apos;)&quot;;_newline   //TheApplication().RaiseErrorText(srchexp);_newline   SetSearchExpr(&quot;[Order Header Id] =&apos;&quot; +strOrderId + &quot;&apos; AND ([Product] = &apos;&quot; +prodAdminbar + &quot;&apos; OR [Product] = &apos;&quot; + prodDatabar +&quot;&apos;)&quot;); _newline   ExecuteQuery(ForwardOnly); _newline   var isRec = FirstRecord();_newline     if(isRec)_newline   {_newline     actionCode = GetFieldValue(&quot;Action Code&quot;);_newline  if(actionCode == &quot;Delete&quot;)_newline  {_newline    ClearToQuery();_newline       SetSearchExpr(&quot;[Order Header Id] =&apos;&quot; +strOrderId + &quot;&apos; AND ([Product] = &apos;&quot; +prodICbar + &quot;&apos; OR [Product] = &apos;&quot; + prdOGbar  +&quot;&apos;)&quot;); _newline       ExecuteQuery(ForwardOnly); _newline    var isRec2 = FirstRecord();_newline    if(isRec2)_newline    {_newline      actCode = GetFieldValue(&quot;Action Code&quot;);_newline   if(actCode == &quot;-&quot;)_newline   {_newline   SetFieldValue(&quot;Action Code&quot;,&quot;Update&quot;);_newline   WriteRecord();_newline      }// if(actCode == &quot;-&quot;)_newline    }//if(isRec2)_newline  }// if(actionCode == &quot;Delete&quot;)_newline   }// if(isRec)_newline  }// with(bcOLI)_newline bcOLI    =null;_newline boOLI = null;_newline }"
 Program_spcLanguage="JS"
 Name="CheckAdminBar"
 Sequence="3"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments="[SUBHAJITG][Added method for barring scenarios]"
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function CheckICBar(strOrderId)_newline{ _newline//sets action code add/delete_newline var boOLI  = TheApplication().GetBusObject(&quot;Order Item&quot;);    _newline  var bcOLI =  boOLI.GetBusComp(&quot;Order Entry - Line Items&quot;);_newline  var prodName;_newline  var prodAdminbar = &quot;User Bar - Mobile Admin&quot;;_newline  var prodDatabar = &quot;Data Bar&quot;;_newline  var actionCode;_newline  var prodICbar = &quot;Collection IC Bar&quot;;_newline  var prdOGbar = &quot;Collection OG Bar&quot;;_newline  var actCode;_newline  //var strMSISDN = Inputs.GetProperty(&quot;MSISDN&quot;);_newline  with( bcOLI)_newline  {_newline    SetViewMode(AllView); _newline   ActivateField(&quot;Order Header Id&quot;); _newline   ActivateField(&quot;Product&quot;); _newline  ActivateField(&quot;Action Code&quot;); _newline   ClearToQuery(); _newline   //var srchexp = &quot;[Serial Number] =&apos;&quot; + strMSISDN + &quot;&apos; AND ([Auto Type] = &apos;&quot; + OGbar + &quot;&apos; OR [Auto Type] = &apos;&quot; + IGbar +&quot;&apos;)&quot;;_newline   //TheApplication().RaiseErrorText(srchexp);_newline   SetSearchExpr(&quot;[Order Header Id] =&apos;&quot; +strOrderId + &quot;&apos; AND ([Product] = &apos;&quot; +prodICbar + &quot;&apos; OR [Product] = &apos;&quot; + prdOGbar +&quot;&apos;)&quot;); _newline   ExecuteQuery(ForwardOnly); _newline   var isRec = FirstRecord();_newline     if(isRec)_newline   {_newline     actionCode = GetFieldValue(&quot;Action Code&quot;);_newline  prodName = GetFieldValue(&quot;Product&quot;);_newline  if((prodName == &quot;Collection IC Bar&quot;  &amp;&amp; actionCode == &quot;Delete&quot;) || (prodName == &quot;Collection OG Bar&quot;  &amp;&amp; actionCode == &quot;Delete&quot;))_newline  {_newline    ClearToQuery();_newline    SetSearchExpr(&quot;[Order Header Id] =&apos;&quot; +strOrderId + &quot;&apos; AND ([Product] = &apos;&quot; +prodAdminbar + &quot;&apos; OR [Product] = &apos;&quot; + prodDatabar  +&quot;&apos;)&quot;); _newline       ExecuteQuery(ForwardOnly); _newline    var isRec2 = FirstRecord();_newline        if(isRec2)_newline  {_newline    actCode = GetFieldValue(&quot;Action Code&quot;);_newline    if (actCode == &quot;-&quot;)_newline    {_newline      SetFieldValue(&quot;Action Code&quot;,&quot;Update&quot;);_newline   WriteRecord();_newline    }_newline  }_newline  }_newline   }// if(isRec)_newline  }// with(assetBc)_newline bcOLI   =null;_newline boOLI  = null;_newline return ContinueOperation;_newline}"
 Program_spcLanguage="JS"
 Name="CheckICBar"
 Sequence="4"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments="[SATISHK][Added code to create activity for collection EDR]"
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function func_usCreateActivity(Inputs,Outputs) _newline{ _newline//mandatory inputs: AccountId, Type, AssignTo_newline//[Type] = &apos;Call - Outbound&apos;, [Description]=&apos;Call customer for outstanding payment and possible barring if not paid&apos;_newline var strErrCode = &quot;OK&quot;; _newline var strErrMesg = &quot;&quot;; _newline var strSRId    = &quot;&quot;; _newline var strAccId = Inputs.GetProperty(&quot;AccId&quot;); _newline var strActivityType      = Inputs.GetProperty(&quot;ActivityType&quot;);  //e.g. &quot;Call - Outbound&quot;_newline var strActivityDesc      = Inputs.GetProperty(&quot;ActivityDesc&quot;);_newline var boAcc:BusObject    = TheApplication().GetBusObject(&quot;Account&quot;); _newline var bcAcc:BusComp      =  boAcc.GetBusComp(&quot;Account&quot;);_newline var bcAction:BusComp      = boAcc.GetBusComp(&quot;Action&quot;);_newline var status = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;EVENT_usSTATUS&quot;,&quot;Ready To Assign&quot;);_newline  bcAcc.SetViewMode(AllView); _newline bcAcc.ActivateField(&quot;Account Number&quot;); _newline_newline  strActivityDesc = &quot;Call customer for outstanding payment and possible barring if not paid&quot;;_newline  bcAcc.ClearToQuery(); _newline  bcAcc.SetSearchExpr(&quot;[Id]=&apos;&quot; + strAccId + &quot;&apos;&quot;); _newline  bcAcc.ExecuteQuery(ForwardOnly); _newline  if(bcAcc.FirstRecord()) _newline  { _newline    bcAction.SetViewMode(AllView); _newline    bcAction.ActivateField(&quot;Type&quot;); _newline    bcAction.ActivateField(&quot;Comment&quot;);_newline    bcAction.ActivateField(&quot;Primary Owned By&quot;); _newline    bcAction.ActivateField(&quot;Class&quot;); _newline    bcAction.ActivateField(&quot;Status&quot;); _newline    bcAction.ActivateField(&quot;Location&quot;);_newline    bcAction.NewRecord(NewAfter); _newline    bcAction.SetFieldValue(&quot;Comment&quot;, strActivityDesc); _newline    bcAction.SetFieldValue(&quot;Type&quot;, strActivityType); _newline    bcAction.SetFieldValue(&quot;Status&quot;, status); _newline    _newline //SK:QC4049:09-Aug12_newline //bcAction.SetFieldValue(&quot;Class&quot;, &quot;Billing_usCollections&quot;); //SK:Commented this line._newline bcAction.SetFieldValue(&quot;Class&quot;,&quot;Request&quot;); //Setting UI field Category_newline bcAction.SetFieldValue(&quot;Call Type&quot;,&quot;Account Management&quot;); //Setting UI field Sub-Category_newline bcAction.SetFieldValue(&quot;Objective&quot;,&quot;Collections&quot;); //Setting UI field Topic_newline bcAction.SetFieldValue(&quot;Location&quot;,&quot;System&quot;); //Setting UI field Location_newline_newline    bcAction.SetFieldValue(&quot;Primary Owned By&quot;,&quot;COLLECTIONS_usQUEUE&quot;); _newline    bcAction.WriteRecord(); _newline   } _newline   else _newline  { _newline     strErrCode = &quot;Account Not Found&quot;; _newline     strErrMesg = &quot;Account not found. strAccNum=&quot; + strAccNum + &quot;.&quot; ; _newline   }_newline Outputs.SetProperty(&quot;Error Code&quot;,    strErrCode); _newline Outputs.SetProperty(&quot;Error Message&quot;, strErrMesg); _newline return CancelOperation; _newline}"
 Program_spcLanguage="JS"
 Name="CreateActivity"
 Sequence="5"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments="[SUBHAJITG][Added code to process Postpaid EDRS]"
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function func_usCreateModifyOrder_usPostpaid(Inputs,Outputs)_newline{_newline var strOrderId       = &quot;&quot;;_newline var strSRId          = &quot;&quot;;_newline var strProfileId     = &quot;&quot;;_newline var strErrCode       = &quot;OK&quot;;_newline var strErrMesg       = &quot;&quot;;_newline var numOrderTotalAmt = 0.0;_newline var strOrdSubType    = Inputs.GetProperty(&quot;RecordType&quot;);_newline var strMSISDN        = Inputs.GetProperty(&quot;MSISDN&quot;);    _newline var strProductCharge = Inputs.GetProperty(&quot;Product Charge 1&quot;);_newline var strSubdebtPrice = Inputs.GetProperty(&quot;Discount&quot;);_newline// func_usGetAccountType(Inputs,Outputs);_newline //var strAccType = Outputs.GetProperty(&quot;Account Type&quot;);_newline  var sPrice; _newline Outputs.SetProperty(&quot;Order Id&quot;, &quot;&quot;);_newline Outputs.SetProperty(&quot;SR Id&quot;,    &quot;&quot;);_newline var hasCharge        = false;_newline if (&quot;&quot; != strProductCharge)_newline {_newline  hasCharge = true;_newline  strProductCharge = ToNumber(strProductCharge);_newline }_newline var strParentProductName = &quot;&quot;;_newline var strProductName     = Inputs.GetProperty(&quot;Product Name&quot;);    _newline var strActionCode    = Inputs.GetProperty(&quot;Action Code&quot;);_newline if( strProductName  == &quot;UNBAR&quot;)_newline {_newline   func_usSetActionCodeUnbar(strMSISDN);_newline   strProductName = prodName_usUnbar;_newline   strActionCode = actionCode_usUnbar;_newline }_newline_newline var strToBeOrdIntId  = Inputs.GetProperty(&quot;Ext Ref Id&quot;);_newline var boOrd:BusObject = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);_newline var bcOrd:BusComp   = boOrd.GetBusComp(&quot;Order Entry - Orders&quot;);_newline bcOrd.SetViewMode(AllView);_newline bcOrd.ActivateField(&quot;Status&quot;);_newline bcOrd.ActivateField(&quot;Back Office Order Number&quot;);_newline bcOrd.ActivateField(&quot;Id&quot;);_newline bcOrd.ClearToQuery();_newline bcOrd.SetSearchExpr(&quot;[Back Office Order Number]=&apos;&quot; + strToBeOrdIntId + &quot;&apos;&quot;);_newline bcOrd.ExecuteQuery(ForwardOnly);_newline if(bcOrd.FirstRecord())_newline {_newline  strOrderId = bcOrd.GetFieldValue(&quot;Id&quot;);_newline  strErrCode = &quot;ORDER_usEXISTS_usFOR_usEDR&quot;;_newline  strErrMesg = &quot;An order for EDR &quot; + strToBeOrdIntId + &quot; exists in system with status &quot; +  bcOrd.GetFieldValue(&quot;Status&quot;) + &quot;.&quot;;_newline }_newline bcOrd=null;_newline boOrd=null;_newlineif(&quot;OK&quot;==strErrCode)_newline{_newline var strTBDOLIId          = &quot;&quot;;_newline var strParentOLIId       = &quot;&quot;;_newline var strRootOLIId         = &quot;&quot;;_newline var strParentProductId   = &quot;&quot;;_newline var strProdItemId        = &quot;&quot;;  _newline var strProductPortId     = &quot;&quot;;_newline var isTerminateOrder     = false;_newline var isOLIRecord;_newline if(&quot;&quot;==strProductName || &quot;&quot;==strActionCode || &quot;&quot;==strMSISDN || &quot;&quot; == strToBeOrdIntId)_newline {_newline  strErrCode = &quot;NOT_usENOUGH_usINPUTS&quot;;_newline  strErrMesg = &quot;Ext Ref, MSISDN, Product Action Code and Product Name/Code must be provided as input.&quot;;_newline }_newline else _newline {_newline  if (&quot;Root&quot; == strProductName &amp;&amp; &quot;Delete&quot; == strActionCode)_newline   isTerminateOrder = true;_newline  else_newline  {_newline   var boProd:BusObject = TheApplication().GetBusObject(&quot;Internal Product&quot;);_newline   var bcProd:BusComp   = boProd.GetBusComp(&quot;Internal Product&quot;);_newline   bcProd.SetViewMode(AllView);_newline   bcProd.ActivateField(&quot;Name&quot;);_newline   bcProd.ClearToQuery();_newline   bcProd.SetSearchExpr(&quot;[Name]=&apos;&quot; + strProductName + &quot;&apos; OR [Part #]=&apos;&quot; + strProductName + &quot;&apos;&quot;);_newline   bcProd.ExecuteQuery(ForwardOnly);_newline   if(!bcProd.FirstRecord())_newline   {_newline    strErrCode = &quot;INVALID_usPRODUCT&quot;;_newline    strErrMesg = &quot;Product with specified Name/code = &quot; + strProductName + &quot; was not found.&quot;;_newline   }_newline   else_newline   {_newline    strProductName = bcProd.GetFieldValue(&quot;Name&quot;);_newline    Inputs.SetProperty(&quot;Product Name&quot;,strProductName);_newline   }_newline   bcProd = null;_newline   boProd = null;_newline  }_newline  if(&quot;OK&quot; == strErrCode)_newline  {_newline   //TheApplication().RaiseErrorText(&quot;Hi&quot;);_newline   func_usGetAssetForMSISDN(Inputs, Outputs);_newline   strProductName = Inputs.GetProperty(&quot;Product Name&quot;);_newline   strParentProductName = Inputs.GetProperty(&quot;Parent Product Name&quot;);_newline   strErrCode = Outputs.GetProperty(&quot;Error Code&quot;);_newline   strErrMesg = Outputs.GetProperty(&quot;Error Message&quot;);_newline    if(&quot;OK&quot; == strErrCode)_newline   {_newline    var strRootAssetId      = Outputs.GetProperty(&quot;Root Asset Id&quot;);_newline    var strAccntId          = Outputs.GetProperty(&quot;Account Id&quot;);_newline    Inputs.SetProperty(&quot;Account Id&quot;,     strAccntId);_newline    Inputs.SetProperty(&quot;Root Asset Id&quot;,  strRootAssetId);_newline    var strRootProduct      = Outputs.GetProperty(&quot;Root Product&quot;);_newline    var strBillAccntId      = Outputs.GetProperty(&quot;Billing Account Id&quot;);_newline    var strServAccntId      = Outputs.GetProperty(&quot;Service Account Id&quot;);_newline    var strCIPId            = Outputs.GetProperty(&quot;Billing Profile Id&quot;);_newline    var strRootAssetIntegId = Outputs.GetProperty(&quot;Asset Integration Id&quot;);_newline   }_newline  }_newline  if(&quot;OK&quot; == strErrCode)_newline  {_newline_newline  if(isTerminateOrder &amp;&amp; &quot;Star Number&quot; == Outputs.GetProperty(&quot;NumberProduct&quot;))_newline  {_newline   Inputs.SetProperty(&quot;TicketScenario&quot;, &quot;TT_usSTAR_usDISCONNECT&quot;);_newline   func_usCreateTicket(Inputs,Outputs);_newline   strSRId    = Outputs.GetProperty(&quot;SR Id&quot;);_newline   strErrCode = Outputs.GetProperty(&quot;Error Code&quot;);_newline   strErrMesg = Outputs.GetProperty(&quot;Error Message&quot;);_newline   Outputs.SetProperty(&quot;Status Message&quot;,&quot;SR Creation for terminate EDR on star number.&quot;)_newline  }_newline  else_newline  {_newline   var boParent:BusObject = TheApplication().GetBusObject(&quot;Account&quot;);_newline   var bcParent:BusComp   = boParent.GetBusComp(&quot;Account&quot;);_newline   var bcOrder:BusComp    = boParent.GetBusComp(&quot;Order Entry - Orders&quot;);_newline   var bcOLI:BusComp;_newline   bcParent.SetViewMode(AllView);_newline   bcOrder.SetViewMode(AllView);_newline   bcParent.ActivateField(&quot;Primary Billing Profile Id&quot;);_newline   bcOrder.ActivateField(&quot;Status&quot;);_newline   bcOrder.ActivateField(&quot;Back Office Order Number&quot;);_newline   bcOrder.ActivateField(&quot;Sub Type&quot;);_newline   bcParent.ClearToQuery();_newline   bcParent.SetSearchExpr(&quot;[Id]=&apos;&quot; + strAccntId + &quot;&apos;&quot;);_newline   bcParent.ExecuteQuery();_newline   if(bcParent.FirstRecord())_newline   {_newline    strProfileId = bcParent.GetFieldValue(&quot;Primary Billing Profile Id&quot;);_newline    Outputs.SetProperty(&quot;AccountBillProfileId&quot;,strProfileId);_newline//check open orders for_newline    bcOrder.ClearToQuery();_newline    bcOrder.SetSearchExpr(&quot;[Status] = &apos;XYZ&apos;&quot;);_newline    bcOrder.ExecuteQuery(ForwardOnly);_newline    var isOrderRecord = bcOrder.FirstRecord();_newline    bcOLI      = boParent.GetBusComp(&quot;Order Entry - Line Items&quot;);_newline    bcOLI.SetViewMode(AllView);_newline    while(isOrderRecord)_newline    {//now open OLI BC and check _newline     bcOLI.ClearToQuery();_newline     bcOLI.SetSearchExpr(&quot;[Parent Order Item Id] IS NULL AND [Asset Integration Id]=&apos;&quot; + strRootAssetIntegId + &quot;&apos;&quot;);_newline     bcOLI.ExecuteQuery(ForwardOnly);_newline     if(bcOLI.FirstRecord())_newline     {_newline      strErrCode = &quot;IN_usPROGRESS_usORDER&quot;;_newline      strErrMesg = &quot;There is/are order(s) for this asset in status other than Complete / Cancelled.&quot;;_newline      break;_newline     }_newline     isOrderRecord = bcOrder.NextRecord();_newline    }_newline    bcOLI = null;_newline    if(&quot;OK&quot; == strErrCode)_newline    {_newline     bcOrder.NewRecord(NewAfter);_newline     bcOrder.SetFieldValue(&quot;Status&quot;,&quot;Paid&quot;);_newline     bcOrder.SetFieldValue(&quot;Back Office Order Number&quot;, strToBeOrdIntId);_newline   // bcOrder.SetFieldValue(&quot;Sub Type&quot;,strOrdSubType);_newline     var bcPick = bcOrder.GetPicklistBusComp(&quot;Order Type&quot;);_newline     bcPick.ClearToQuery();_newline     bcPick.SetSearchExpr(&quot;[Order Type]=&apos;Sales Order&apos;&quot;);_newline     bcPick.ExecuteQuery(ForwardOnly);_newline     if(bcPick.FirstRecord())_newline      bcPick.Pick();_newline_newline     bcOrder.SetFieldValue(&quot;Account Id&quot;, strAccntId);_newline     bcOrder.SetFieldValue(&quot;Billing Account Id&quot;, strBillAccntId);_newline     bcOrder.SetFieldValue(&quot;Service Account Id&quot;, strServAccntId);_newline     bcOrder.SetFieldValue(&quot;Billing Profile Id&quot;, strCIPId);_newline_newline     bcOrder.WriteRecord();//becos there is a state model must abide by the same_newline     strOrderId  = bcOrder.GetFieldValue(&quot;Id&quot;);_newline     bcOrder.WriteRecord();_newline     func_usCreateOLIfromAssets(strOrderId, strRootAssetId);_newline_newline     bcOrder = null;_newline     bcOLI   = null;_newline     var boORDBO:BusObject = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);_newline     bcOrder = boORDBO.GetBusComp(&quot;Order Entry - Orders&quot;);_newline     bcOLI   = boORDBO.GetBusComp(&quot;Order Entry - Line Items&quot;);_newline_newline     bcOrder.SetViewMode(AllView);_newline     bcOrder.ActivateField(&quot;Status&quot;);_newline     bcOrder.ActivateField(&quot;Order Total&quot;);_newline     bcOLI.SetViewMode(AllView);_newline     bcOLI.ActivateField(&quot;Id&quot;);_newline     bcOLI.ActivateField(&quot;Parent Order Item Id&quot;);_newline     bcOLI.ActivateField(&quot;Root Order Item Id&quot;);_newline     bcOLI.ActivateField(&quot;Prod Item Id&quot;);_newline     bcOLI.ActivateField(&quot;Product Port Id&quot;);_newline     bcOLI.ActivateField(&quot;Unit Price - Display&quot;);_newline                                                     bcOLI.ActivateField(&quot;Discount Amount&quot;);_newline                       bcOrder.ClearToQuery();_newline     bcOrder.SetSearchExpr(&quot;[Id]=&apos;&quot; + strOrderId + &quot;&apos;&quot;);_newline     bcOrder.ExecuteQuery(ForwardOnly);_newline     bcOLI.ClearToQuery();_newline     bcOLI.ExecuteQuery(ForwardOnly);_newline     isOLIRecord = bcOLI.FirstRecord();_newline     while(isOLIRecord)_newline     {_newline      bcOLI.SetFieldValue(&quot;Integration Id&quot;, bcOLI.GetFieldValue(&quot;Id&quot;));_newline      if(isTerminateOrder)_newline       bcOLI.SetFieldValue(&quot;Action Code&quot;,&quot;Delete&quot;);_newline      bcOLI.WriteRecord();_newline      isOLIRecord = bcOLI.NextRecord();_newline     }_newline     bcOrder.ClearToQuery();_newline     bcOrder.SetSearchExpr(&quot;[Id]=&apos;&quot; + strOrderId + &quot;&apos;&quot;);_newline     bcOrder.ExecuteQuery(ForwardOnly);_newline          if( bcOrder.FirstRecord())_newline         {_newline           bcOrder.ActivateField(&quot;VFQ Channel Type&quot;);_newline           bcOrder.SetFieldValue(&quot;VFQ Channel Type&quot;, strOrdSubType);_newline           bcOrder.WriteRecord();_newline         }_newline// modify_newline     if(!isTerminateOrder)_newline     {_newline      if(&quot;Add&quot;==strActionCode)_newline      {_newline// product_newline       bcOLI.ClearToQuery();_newline//        bcOLI.InvokeMethod(&quot;EnableCopyExtAttr&quot;);_newline//        bcOLI.InvokeMethod(&quot;EnableConfigCxProd&quot;);_newlinebcOLI.SetSearchExpr(&quot;[Product] =&apos;&quot; + strProductName + &quot;&apos; AND [Order Header Id] = &apos;&quot; + strOrderId + &quot;&apos;&quot;);_newline       bcOLI.ExecuteQuery();_newline       if(bcOLI.FirstRecord())_newline       {_newline        strErrCode=&quot;PRODUCT_usTO_usADD_usEXISTS&quot;;_newline        strErrMesg=&quot;Specified product &quot; + strProductName + &quot; for add action is already existing in the asset.&quot;;_newline        bcOrder.SetFieldValue(&quot;Status&quot;,&quot;Cancelled&quot;);_newline        bcOrder.WriteRecord();_newline       }_newline       else_newline       {_newline// loose item_newline        bcOLI.NewRecord(NewAfter);_newline        bcOLI.SetFieldValue(&quot;Action Code&quot;,&quot;Add&quot;);_newline        bcOLI.SetFieldValue(&quot;Service Id&quot;,strMSISDN);_newline        var bcProdPick:BusComp = bcOLI.GetPicklistBusComp(&quot;Product&quot;);//Product_newline        bcProdPick.SetViewMode(AllView);_newline        bcProdPick.ClearToQuery();_newline        bcProdPick.SetSearchExpr(&quot;[Name]=&apos;&quot; + strProductName + &quot;&apos;&quot;);_newline        bcProdPick.ExecuteQuery(ForwardOnly);_newline        if(bcProdPick.FirstRecord())_newline         bcProdPick.Pick();_newline        bcProdPick=null;_newline        strTBDOLIId = bcOLI.GetFieldValue(&quot;Id&quot;);_newline        bcOLI.ActivateField(&quot;Adjusted List Price - Display&quot;);_newline        if(hasCharge)_newline        {_newline         sPrice = bcOLI.GetFieldValue(&quot;Adjusted List Price - Display&quot;);_newline        bcOLI.SetFieldValue(&quot;Unit Price - Display&quot;, sPrice);_newline         bcOLI.WriteRecord();_newline        }_newline  _newline        bcOLI.WriteRecord();_newline_newline        bcOrder.ClearToQuery();_newline        bcOrder.SetSearchExpr(&quot;[Id]=&apos;&quot; + strOrderId + &quot;&apos;&quot;);_newline        bcOrder.ExecuteQuery(ForwardOnly);_newline       }_newline//find place in the hie_newline       var psIpPorts:PropertySet = TheApplication().NewPropertySet();_newline       var psOpPorts:PropertySet = TheApplication().NewPropertySet();_newline       psIpPorts.SetProperty(&quot;Root Product Name&quot;,  strRootProduct);_newline       psIpPorts.SetProperty(&quot;Child Product Name&quot;, strProductName);_newline       if(&quot;&quot; != strParentProductName)//if the specified product was derived as a child_newline        psIpPorts.SetProperty(&quot;Parent Product Name&quot;, strParentProductName);_newline//fetch values of flds to position the OLI in hie_newline       GetDetailsOfLooseProductInstance(psIpPorts,psOpPorts);_newline       strParentProductId   =  psOpPorts.GetProperty(&quot;Parent Product Id&quot;);_newline       // strParentProductId = &apos;1-WGRO0K&apos;;_newline       strProdItemId        =  psOpPorts.GetProperty(&quot;Prod Item Id&quot;);//PortValidProdId_newline       strProductPortId     =  psOpPorts.GetProperty(&quot;Product Port Id&quot;);//AssemblyPortId_newline       Outputs.SetProperty(&quot;Parent Product Id&quot;,   strParentProductId);_newline       Outputs.SetProperty(&quot;Prod Item Id&quot;,        strProdItemId);   //PortValidProdId_newline       Outputs.SetProperty(&quot;Product Port Id&quot;,     strProductPortId);//AssemblyPortId_newline       if(&quot;OK&quot; != func_usPositionNewLineItemInOLITree(strOrderId,strTBDOLIId,strParentProductId,strProdItemId,strProductPortId))_newline       {_newline        strErrCode=&quot;PROD_usPOSITION_usIN_usHIE_usNOTFOUND2 OR PROD NOT APPLICABLE FOR ACCOUNT TYPE&quot;_newline        strErrMesg=&quot;Position and / or parent of the product &quot; + strProductName + &quot; in the existing asset hierarchy was not found or Account is Postpaid&quot;_newline        _newline       }_newline      }_newline      else if(&quot;Delete&quot;==strActionCode)_newline      {//find the product and set the action code as Delete_newline       bcOLI.ClearToQuery();_newline       bcOLI.SetSearchExpr(&quot;[Product] =&apos;&quot; + strProductName + &quot;&apos;&quot;);_newline       bcOLI.ExecuteQuery(ForwardOnly);_newline       if(bcOLI.FirstRecord())_newline       {_newline        bcOLI.SetFieldValue(&quot;Action Code&quot;, &quot;Delete&quot;);_newline        bcOLI.WriteRecord();_newline       }_newline       else_newline       {_newline        strErrCode=&quot;PRODUCT_usTO_usDELETE_usNOT_usIN_usASSETS&quot;_newline        strErrMesg=&quot;Specified product &quot; + strProductName + &quot; for delete action was not found in the assets.&quot;_newline        bcOrder.SetFieldValue(&quot;Status&quot;,&quot;Cancelled&quot;);_newline        bcOrder.WriteRecord();_newline       }_newline      }_newline      else_newline      {_newline       strErrCode=&quot;INVALID_usACTION&quot;_newline       strErrMesg=&quot;Action code specified on the product &quot; + strActionCode + &quot; is invalid.&quot;_newline      }_newline     }_newline     if(&quot;&quot;==strErrCode || &quot;OK&quot;==strErrCode)_newline     {_newline      bcOrder.ClearToQuery();_newline      bcOrder.SetSearchExpr(&quot;[Id]=&apos;&quot; + strOrderId + &quot;&apos;&quot;);_newline      bcOrder.ExecuteQuery(ForwardOnly);_newline      numOrderTotalAmt = bcOrder.GetFieldValue(&quot;Order Total&quot;);_newline      Outputs.SetProperty(&quot;Order Total&quot;,numOrderTotalAmt);_newline      if(0.0 &lt; numOrderTotalAmt)_newline      {_newline      try{_newline        var bcPayment:BusComp = boORDBO.GetBusComp(&quot;Payments&quot;);_newline        bcPayment.ActivateField(&quot;Payment Profile Name&quot;);_newline        bcPayment.NewRecord(NewAfter);_newline        var bcProfilePick:BusComp = bcPayment.GetPicklistBusComp(&quot;VFQ Billing Profile Name&quot;);_newline        bcProfilePick.SetViewMode(AllView);_newline        bcProfilePick.ClearToQuery();_newline        bcProfilePick.SetSearchExpr(&quot;[Id]=&apos;&quot; + strProfileId + &quot;&apos;&quot;);_newline        bcProfilePick.ExecuteQuery(ForwardOnly);_newline        if(bcProfilePick.FirstRecord())_newline        {_newline         Outputs.SetProperty(&quot;Profile For Payment Found&quot;,&quot;true&quot;);_newline         bcProfilePick.Pick();_newline         bcPayment.WriteRecord();_newline        }_newline        else_newline        {_newline         bcPayment.UndoRecord();_newline         strErrCode = &quot;PAY_usPROFILE_usERR&quot;;_newline         strErrMesg = &quot;Payment could not be created for the order because of payment profile issue.&quot;;_newline        }_newline        bcProfilePick=null; _newline        bcPayment = null;_newline       }_newline       catch(e)_newline       {_newline        strErrCode = e.errCode+&quot;:&quot;+e.errText;_newline        strErrMesg = &quot;Error occured while creating payment record.&quot;;_newline       }_newline      }_newline     }_newline     bcOrder.ClearToQuery();_newline     bcOrder.SetSearchExpr(&quot;[Id]=&apos;&quot; + strOrderId + &quot;&apos;&quot;);_newline     bcOrder.ExecuteQuery(ForwardOnly);_newline    if( bcOrder.FirstRecord())_newline     {_newline       bcOrder.SetFieldValue(&quot;VFQ Modify Order Flag&quot;,&quot;Y&quot;);_newline       bcOrder.SetFieldValue(&quot;VFQ Validated Order&quot;,&quot;Y&quot;);_newline       bcOrder.WriteRecord();_newline      }_newline     if(&quot;&quot;==strErrCode || &quot;OK&quot;==strErrCode)_newline     {_newline      if(countBarring == 2)_newline   {_newline     DeleteActionCode(strOrderId);   _newline   }_newline   CheckAdminBar(strOrderId);_newline     CheckICBar(strOrderId);_newline_newline   bcOrder.SetFieldValue(&quot;Status&quot;, &quot;Submitted&quot;);_newline      bcOrder.WriteRecord();_newline      var bsPMT:Service = TheApplication().GetService(&quot;Workflow Process Manager&quot;);_newline      var psOp:PropertySet  = TheApplication().NewPropertySet();_newline      var psInp1:PropertySet  = TheApplication().NewPropertySet();_newline      psInp1.SetProperty(&quot;RowId&quot;, strOrderId);_newline      psInp1.SetProperty(&quot;ProcessName&quot;, &quot;SISOMBillingSubmitOrderWebService&quot;);_newline      bsPMT.InvokeMethod(&quot;RunProcess&quot;, psInp1, psOp);_newline      psInp1 = null;_newline      psOp   = null;_newline      bsPMT  = null;_newline      strErrCode = &quot;OK&quot;;_newline      strErrMesg = &quot;Order submitted.&quot;+ &quot;Pri:&quot; + strSubdebtPrice;_newline    _newline     }_newline     else _newline     {_newline      bcOrder.SetFieldValue(&quot;Status&quot;, &quot;Cancelled&quot;);_newline      bcOrder.WriteRecord();_newline     }_newline    }_newline   }_newline   else_newline   {_newline    strErrCode=&quot;NO_usACCOUNT&quot;_newline    strErrMesg=&quot;Account not found.&quot;_newline   }_newline   var bcParent = null;_newline   var boParent = null;_newline  }_newline }_newline }_newline}_newline Outputs.SetProperty(&quot;Order Id&quot;,   strOrderId)_newline Outputs.SetProperty(&quot;SR Id&quot;,      strSRId)_newline Outputs.SetProperty(&quot;Error Code&quot;, strErrCode)_newline Outputs.SetProperty(&quot;Error Message&quot;,&quot;OrderId:&quot; + strOrderId + &quot;;&quot; + strErrMesg)_newline Outputs.SetProperty(&quot;ProdName&quot;,strProductName)_newline return CancelOperation;_newline}"
 Program_spcLanguage="JS"
 Name="CreateModifyOrder_usPostpaid"
 Sequence="6"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments="[SUBHAJITG][Added code for Unbar]"
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function DeleteActionCode(strOrderId)_newline{ _newline//sets action code add/delete_newline  var boOLI  = TheApplication().GetBusObject(&quot;Order Item&quot;); _newline  var bcOLI = boOLI.GetBusComp(&quot;Order Entry - Line Items&quot;);_newline   var OGBar = &quot;Collection OG Bar&quot;;_newline  //var strMSISDN = Inputs.GetProperty(&quot;MSISDN&quot;);_newline  with(bcOLI)_newline  {_newline    SetViewMode(AllView); _newline   ActivateField(&quot;Order Header Id&quot;); _newline    ActivateField(&quot;Product&quot;); _newline   ClearToQuery(); _newline   //var srchexp = &quot;[Serial Number] =&apos;&quot; + strMSISDN + &quot;&apos; AND ([Auto Type] = &apos;&quot; + OGbar + &quot;&apos; OR [Auto Type] = &apos;&quot; + IGbar +&quot;&apos;)&quot;;_newline   //TheApplication().RaiseErrorText(srchexp);_newline   SetSearchExpr(&quot;[Order Header Id] =&apos;&quot; +strOrderId + &quot;&apos; AND [Product] = &apos;&quot; + OGBar +&quot;&apos;&quot;);_newline   ExecuteQuery(ForwardOnly); _newline   var record = FirstRecord();_newline   if(record)_newline   {_newline     SetFieldValue(&quot;Action Code&quot;,&quot;Delete&quot;);_newline  WriteRecord();_newline   }_newline  }//  with(bcOLI)_newline  bcOLI   =null;_newline  boOLI = null;_newline return ContinueOperation;_newline}"
 Program_spcLanguage="JS"
 Name="DeleteActionCode"
 Sequence="7"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments="[SUBHAJITG][5.4.2012][ADDED CODE FOR DISCONNECT]"
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function func_usDisconnect(Inputs,Outputs) _newline{ _newline//mandatory inputs: AccountId, MSISDN_newline//[Type] = &apos;Call - Outbound&apos;, [Description]=&apos;Disconnect the MSISDN&apos;_newline var strErrCode = &quot;OK&quot;; _newline var strErrMesg = &quot;&quot;; _newline var strSRId    = &quot;&quot;; _newline var strAccId = Inputs.GetProperty(&quot;AccId&quot;); _newline var strActivityType      = Inputs.GetProperty(&quot;ActivityType&quot;);  //e.g. &quot;Call - Outbound&quot;_newline var vMSISDN = Inputs.GetProperty(&quot;MSISDN&quot;); _newline var strActivityDesc;_newline var boAcc:BusObject    = TheApplication().GetBusObject(&quot;Account&quot;); _newline var bcAcc:BusComp      =  boAcc.GetBusComp(&quot;Account&quot;);_newline var bcAction:BusComp      = boAcc.GetBusComp(&quot;Action&quot;);_newline var status = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;EVENT_usSTATUS&quot;,&quot;Ready To Assign&quot;);_newline bcAcc.SetViewMode(AllView); _newline bcAcc.ActivateField(&quot;Account Number&quot;); _newline_newline  strActivityDesc = &quot;Disconnect the MSISDN - &quot; + vMSISDN; _newline  bcAcc.ClearToQuery(); _newline  bcAcc.SetSearchExpr(&quot;[Id]=&apos;&quot; + strAccId + &quot;&apos;&quot;); _newline  bcAcc.ExecuteQuery(ForwardOnly); _newline  if(bcAcc.FirstRecord()) _newline  { _newline    bcAction.SetViewMode(AllView); _newline    bcAction.ActivateField(&quot;Type&quot;); _newline    bcAction.ActivateField(&quot;Description&quot;);_newline    bcAction.ActivateField(&quot;Primary Owned By&quot;); _newline    bcAction.ActivateField(&quot;Status&quot;); _newline    bcAction.ActivateField(&quot;Type&quot;);_newline    bcAction.ActivateField(&quot;Class&quot;);_newline    bcAction.ActivateField(&quot;Location&quot;);_newline    bcAction.NewRecord(NewAfter); _newline    bcAction.SetFieldValue(&quot;Comment&quot;, strActivityDesc); //SK QC4049. Setting Comment field instead of Description._newline    bcAction.SetFieldValue(&quot;Status&quot;, status); _newline    bcAction.SetFieldValue(&quot;Primary Owned By&quot;, &quot;COLLECTIONS_usQUEUE&quot;); _newline _newline_newline //SK: QC4049: 09Aug12_newline //bcAction.SetFieldValue(&quot;Type&quot;, strActivityType); //SK: Commented this redundant line_newline bcAction.SetFieldValue(&quot;Type&quot;,&quot;Internal&quot;);_newline //bcAction.SetFieldValue(&quot;Class&quot;,&quot;Request_usDisconnection&quot;); //SK: Commented this line._newline bcAction.SetFieldValue(&quot;Class&quot;,&quot;Requests&quot;); //Setting UI field Category_newline bcAction.SetFieldValue(&quot;Call Type&quot;,&quot;Account Management&quot;); //Setting UI field Sub-Category_newline bcAction.SetFieldValue(&quot;Objective&quot;,&quot;Disconnection&quot;); //Setting UI field Topic_newline bcAction.SetFieldValue(&quot;Location&quot;,&quot;System&quot;); //Setting UI field Location_newline_newline    bcAction.WriteRecord();_newline   } _newline   else _newline  { _newline     strErrCode = &quot;Account Not Found&quot;; _newline     strErrMesg = &quot;Account not found. strAccNum=&quot; + strAccNum + &quot;.&quot; ; _newline   }_newline Outputs.SetProperty(&quot;Error Code&quot;,    strErrCode); _newline Outputs.SetProperty(&quot;Error Message&quot;, strErrMesg); _newline return CancelOperation; _newline}"
 Program_spcLanguage="JS"
 Name="Disconnect"
 Sequence="8"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments="20110929:Enhanced to search based on parent product"
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function GetDetailsOfLooseProductInstance(Inputs,Outputs)_newline{_newline/*_newlineFor a given product by name, find the values of key fields as below and send out in Outputs_newlineName of the Parent Product_newlineProd Item Id - PortValidProdId_newlineProduct Port Id - AssemblyPortId_newlineInternally uses a ProductPort propset for the root product_newline20110929:Enhanced to search based on parent product_newline*/_newline Outputs.SetProperty(&quot;Parent Product Id&quot;,   &quot;&quot;);_newline// Outputs.SetProperty(&quot;Parent Product Name&quot;, &quot;&quot;);_newline Outputs.SetProperty(&quot;Prod Item Id&quot;,        &quot;&quot;);//PortValidProdId_newline Outputs.SetProperty(&quot;Product Port Id&quot;,     &quot;&quot;);//AssemblyPortId_newline var strRootProdName  = Inputs.GetProperty(&quot;Root Product Name&quot;);_newline var strChildProdName = Inputs.GetProperty(&quot;Child Product Name&quot;);_newline var strProdFileName  = NormFileName(&quot;AllPorts_us&quot; + strRootProdName + &quot;.xml&quot;);_newline var psIp:PropertySet = TheApplication().NewPropertySet();_newline var psOp:PropertySet = TheApplication().NewPropertySet();_newline var bs1:Service      = TheApplication().GetService(&quot;EAI XML Read from File&quot;);_newline/*_newlineGet prod structure details in a propset, this is supported by a BSM : _newline&lt;GetAllPortsSimple&gt;_newline&lt;Product IsDefault=&quot;Y&quot; PortProductName=&quot;Email Bundle&quot; RootProductId=&quot;1-5EA7N&quot; PortValidProdId=&quot;1-W0YXG&quot; ProductId=&quot;1-5EA7N&quot; PortProductId=&quot;1-4VTVL&quot; PortName=&quot;Email Product&quot; AssemblyPortId=&quot;1-W0YXG&quot;&gt;&lt;/Product&gt;_newline&lt;Product IsDefault=&quot;&quot; PortProductName=&quot;WiMax Service Bundle&quot; RootProductId=&quot;1-5EA7N&quot; PortValidProdId=&quot;1-23N9VG&quot; ProductId=&quot;1-5EA7N&quot; PortProductId=&quot;1-23N9N6&quot; PortName=&quot;Internet Service&quot; AssemblyPortId=&quot;1-W4FZ5&quot;&gt;&lt;/Product&gt;_newline&lt;/GetAllPortsSimple&gt;_newline*/_newline var psProd:PropertySet = TheApplication().NewPropertySet();_newline psIp.SetProperty(&quot;FileName&quot;,strServerPath + NormFileName(strProdFileName))_newline_newline try_newline {_newline  bs1.InvokeMethod(&quot;ReadPropSet&quot;,psIp,psProd);_newline }_newline catch (e)//since the file was not found, excute the BS that generates the file_newline {_newline  bs1 = TheApplication().GetService(&quot;TM BS Product Utility App&quot;);_newline  psIp.SetProperty(&quot;Product Name&quot;,strRootProdName);_newline  bs1.InvokeMethod(&quot;GetPortsOfProduct&quot;,psIp,psProd);//this method writes to a file for next time use and also returns the propset_newline  psProd=psProd.GetChild(0);_newline }_newline Outputs.SetProperty(&quot;ProductCount&quot;,psProd.GetChildCount());_newline var strParProdName = Inputs.GetProperty(&quot;Parent Product Name&quot;);_newline var strPortProductIdForParent = &quot;&quot;;_newline var strKeyName  = &quot;PortProductName&quot;;_newline var strKeyValue = strChildProdName; _newline if(&quot;&quot; != strParProdName)//_newline {_newline  strPortProductIdForParent = GetPropsetFieldByKey(psProd, &quot;PortProductId&quot;,       &quot;PortProductName&quot;, strParProdName);_newline_newline  if(&quot;&quot; != strPortProductIdForParent)_newline  {_newline  strKeyName  = strKeyName + &quot;:ProductId&quot;;_newline  strKeyValue = strKeyValue + &quot;:&quot; + strPortProductIdForParent;_newline  }_newline }_newline Outputs.SetProperty(&quot;PortProductIdForParent&quot;,strPortProductIdForParent);_newline Outputs.SetProperty(&quot;Parent Product Id&quot;,   GetPropsetFieldByKey(psProd, &quot;ProductId&quot;,       strKeyName, strKeyValue));_newline// Outputs.SetProperty(&quot;Parent Product Name&quot;, GetPropsetFieldByKey(psProd, &quot;PortProductName&quot;, strKeyName, strKeyValue));_newline Outputs.SetProperty(&quot;Prod Item Id&quot;,        GetPropsetFieldByKey(psProd, &quot;PortValidProdId&quot;, strKeyName, strKeyValue));//PortValidProdId_newline Outputs.SetProperty(&quot;Product Port Id&quot;,     GetPropsetFieldByKey(psProd, &quot;AssemblyPortId&quot;,  strKeyName, strKeyValue));//AssemblyPortId_newline return CancelOperation;_newline}"
 Program_spcLanguage="JS"
 Name="GetDetailsOfLooseProductInstance"
 Sequence="44"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments="20110929:Enhanced to search by multiple property matches"
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function GetPropsetFieldByKey(psSRC,FieldName,KeyName,KeyValue)_newline{_newline/*_newlinethis is renamed from Get Asset FieldByKey to GetPropsetFieldByKey_newlinepsSRC will contain child propset records_newline20110929:Enhanced to search by multiple property matches, can take in : separated KeyName and KeyValue input arguments_newline*/_newline_newline var arrKeyName = KeyName.split(&quot;:&quot;);_newline var arrKeyValue = KeyValue.split(&quot;:&quot;);_newline _newline_newline var matchFound = true;_newline for (var iCnt=0; iCnt &lt; psSRC.GetChildCount(); iCnt++)_newline {//for each child_newline  matchFound = true;_newline  for(var i=0; i &lt; arrKeyName.length; i++)_newline  {_newline   if(arrKeyValue[i] != psSRC.GetChild(iCnt).GetProperty(arrKeyName[i]))_newline    matchFound = false;_newline  }_newline  if(matchFound)_newline   return psSRC.GetChild(iCnt).GetProperty(FieldName);_newline }_newline return &quot;&quot;;_newline}"
 Program_spcLanguage="JS"
 Name="GetPropsetFieldByKey"
 Sequence="45"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function LOV(Inputs,Outputs)_newline{_newlinevar BOListOfVal = TheApplication().GetBusObject(&quot;List Of Values&quot;);_newlinevar BCListOfVal = BOListOfVal.GetBusComp(&quot;List Of Values&quot;);_newlinevar strLIC = Inputs.GetProperty(&quot;Attrib01&quot;);_newlinevar strDisplayName = &quot;&quot;;_newlineBCListOfVal .ClearToQuery(); _newlineBCListOfVal.SetViewMode(AllView);_newlinevar SearchSpec = &quot; [Value] =&apos;&quot;+ strLIC +&quot;&apos;&quot;;_newlineBCListOfVal.SetSearchExpr(SearchSpec); _newlineBCListOfVal.ExecuteQuery(ForwardOnly);_newlinevar isRecord = BCListOfVal.FirstRecord();_newlineif (isRecord)_newline{_newlinestrDisplayName = BCListOfVal.GetFieldValue(&quot;Name&quot;);_newline} _newlineOutputs.SetProperty(&quot;Attrib01&quot;,strDisplayName);_newlineBCListOfVal = null;_newlineBOListOfVal = null;_newlinereturn (CancelOperation);_newline_newline}"
 Program_spcLanguage="JS"
 Name="LOV"
 Sequence="47"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="/*---------------------------------------------------------------------- _newlineGeneric function to log the propertyset to file _newline---------------+------+--------+---------------------------------------------- _newlineDate(YYYYMMDD) | Ver  | By     | Description of Change _newline---------------+------+--------+---------------------------------------------- _newline20050515       | 1.00 | Prasad | Creation _newline20051228       | 1.1  | Shyamal| Commenting the Log property set. _newline20051228       | 1.2  | Prasad | UnCommenting the filewriting, better way is to change BSUProp. _newline---------------+------+--------+---------------------------------------------- _newline*/ _newlinefunction LogPropSet(inputPS,msFileSuffix)_newline{ _newline//1.1 below _newline if(mbDebug) _newline { _newline  msFileSuffix = NormFileName(msFileSuffix); _newline  var msFileName = msGFileName + ((miFileSeq &lt; 10)?&quot;0&quot;:&quot;&quot;) + miFileSeq + msFileSuffix + &quot;.xml&quot;; _newline  var fileSvc = TheApplication().GetService(&quot;EAI XML Write to File&quot;); _newline  var outPS = TheApplication().NewPropertySet(); _newline  var tmpProp = inputPS.Copy(); _newline  tmpProp.SetProperty(&quot;FileName&quot;, strServerPath + msFileName); _newline  fileSvc.InvokeMethod(&quot;WritePropSet&quot;, tmpProp, outPS); _newline//clean up _newline  fileSvc = null; _newline  outPS.Reset(); _newline  tmpProp.Reset(); _newline  miFileSeq++; _newline } _newline//1.1 above  _newline}"
 Program_spcLanguage="JS"
 Name="LogPropSet"
 Sequence="46"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="/*---------------------------------------------------------------------- _newlineCan be used to remove special characters from the prospective file names. _newlineNot being used much currently. All special characters /\~ will be replaced by space char _newlineChange History _newline---------------+------+--------+---------------------------------------------- _newlineDate(YYYYMMDD) | Ver  | By     | Description of Change _newline---------------+------+--------+---------------------------------------------- _newline20060916       | 1.0  | Prasad | Creation _newline---------------+------+--------+----------------------------------------------*/ _newlinefunction NormFileName(strSrc) _newline{//define special string _newline var strSpStr     = &quot;:/\~&quot;; _newline var chrToFind; _newline var chrToReplace = &quot;_us&quot;; _newline var chrFound; _newline var strDest      =&quot;&quot;; _newline for(var iCharCnt=0; iCharCnt &lt; strSpStr.length; iCharCnt++) _newline { _newline  strDest = &quot;&quot;; _newline  chrToFind = strSpStr.substring(iCharCnt,iCharCnt+1); _newline  for(var iStrCharPos=0; iStrCharPos&lt;strSrc.length; iStrCharPos++) _newline  { _newline   chrFound = strSrc.substring(iStrCharPos,iStrCharPos+1); _newline   if(chrFound == chrToFind ) _newline    strDest = strDest + chrToReplace; _newline   else _newline    strDest = strDest + chrFound; _newline  } _newline  strSrc = strDest; _newline } _newline return strDest; _newline}"
 Program_spcLanguage="JS"
 Name="NormFileName"
 Sequence="54"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function Service_usPreInvokeMethod(MethodName, Inputs, Outputs)_newline{_newline Outputs.SetProperty(&quot;Error Code&quot;,&quot;&quot;);_newline Outputs.SetProperty(&quot;Error Message&quot;,&quot;&quot;);_newline if(&quot;TestBC&quot;==MethodName)_newline  return TestBC(Inputs, Outputs);_newline else if(&quot;TestOrder&quot;==MethodName)_newline  return TestOrder(Inputs, Outputs);_newline// else if(&quot;LoadBRMBatch&quot;==MethodName)_newline//  return func_usLoadBRMBatch(Inputs,Outputs);_newline else if(&quot;ProcessPrepaidOrder&quot;==MethodName)_newline  return func_usProcessPrepaidOrder(Inputs, Outputs);_newline else if(&quot;CreateModifyOrder&quot;==MethodName)_newline  return func_usCreateModifyOrder(Inputs, Outputs);_newline else if(&quot;CreateModifyOrder_usPostpaid&quot;==MethodName)_newline  return func_usCreateModifyOrder_usPostpaid(Inputs, Outputs);_newline else if(&quot;CreateModifyOrderOOB&quot;==MethodName)_newline  return func_usCreateModifyOrderOOB(Inputs, Outputs);_newline else if(&quot;CreateTicket&quot;==MethodName)_newline  return func_usCreateTicket(Inputs, Outputs);_newline else if(&quot;GetPortsOfProduct&quot;==MethodName)_newline {_newline  func_usGetPortsOfProduct(Inputs, Outputs);_newline  return CancelOperation;_newline }_newline else if(&quot;Blacklist&quot;==MethodName)_newline {_newline  return func_usBlacklist(Inputs, Outputs);_newline }_newline else if(&quot;Disconnect&quot;==MethodName)_newline {_newline  return func_usDisconnect(Inputs, Outputs);_newline }_newline else if(&quot;CreateActivity&quot;==MethodName)_newline {_newline  return  func_usCreateActivity(Inputs, Outputs);_newline }_newline else if(&quot;mCheckBlackBerryService&quot;==MethodName)_newline {_newline  return  mCheckBlackBerryService(inRootId , Outputs );_newline }_newline else if(&quot;LoadRecordsfromFile&quot;==MethodName)_newline  return func_usLoadRecordsfromFile(Inputs, Outputs);_newline else if(&quot;ProcessFiles&quot;==MethodName)_newline  return func_usProcessFiles(Inputs, Outputs);_newline else_newline if(&quot;Process_usALU_usCL_usEDR&quot;==MethodName)_newline{_newline   mProcess_usALU_usCL_usEDR(Inputs, Outputs);_newline  return (CancelOperation);_newline} _newlineelse_newline if(&quot;GetCustInfo&quot;==MethodName)_newline{_newline   mGetCustInfo (Inputs , Outputs);_newline  return (CancelOperation);_newline}_newlineelse if(&quot;GetAssetForMSISDN_usTest&quot;==MethodName)_newline  return func_usGetAssetForMSISDN_usTest(Inputs, Outputs);_newlineelse if(&quot;GetAssetForMSISDN&quot;==MethodName)_newline  return func_usGetAssetForMSISDN(Inputs, Outputs);_newline else if(&quot;GetDetailsOfLooseProductInstance&quot;==MethodName)_newline  return GetDetailsOfLooseProductInstance(Inputs, Outputs);_newline// else if(&quot;ProcessSuspendResume&quot;==MethodName)_newline//  return func_usProcessSuspendResume(Inputs, Outputs);_newline// else if(&quot;SubmitSuspendResumeSR&quot;==MethodName)_newline//  return func_usSubmitSuspendResumeSR(Inputs, Outputs);_newline else if(&quot;ProcessBarringEDR&quot;==MethodName)_newline  return func_usBarringEDR(Inputs, Outputs);_newline else if(&quot;ValidateSuspendResume&quot;==MethodName)_newline  return func_usValidateSuspendResume(Inputs, Outputs);_newline else if(&quot;UpdateOLI&quot; == MethodName)_newline  return func_usUpdateOLI(Inputs, Outputs);_newlineelse if(&quot;LOV&quot; == MethodName)_newline  return LOV(Inputs, Outputs);_newline else if(&quot;AutomatedProcessing&quot; == MethodName)_newline  return func_usAutomatedProcessing(Inputs, Outputs);_newline else if(&quot;DisconnectOrder&quot;==MethodName)_newline  return func_usDisconnectOrder(Inputs, Outputs)_newline else if(&quot;CancelFDO&quot;==MethodName)_newline  return func_usCancelFDO(Inputs, Outputs)_newline else if(&quot;CreateModifyOrderGeneric&quot;==MethodName)_newline  return func_usCreateModifyOrderGeneric(Inputs, Outputs)_newline else_newline  return (ContinueOperation);_newline}"
 Program_spcLanguage="JS"
 Name="Service_usPreInvokeMethod"
 Sequence="58"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments="[SUBHAJITG][Added code to process UNBAR EDRS for postpaid]"
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function func_usSetActionCodeUnbar(strMSISDN)_newline{ _newline//sets action code add/delete_newline var boAsset   = TheApplication().GetBusObject(&quot;Asset DB&quot;); _newline  var assetBc = boAsset.GetBusComp(&quot;Asset Mgmt - Asset&quot;);_newline  prodName_usUnbar = &quot;&quot;;_newline  actionCode_usUnbar = &quot;&quot;;_newline  var ICbar = &quot;Collection IC Bar&quot;;_newline  var OGBar = &quot;Collection OG Bar&quot;;_newline  var active = &quot;Active&quot;;_newline  var srchexp;_newline  //var strMSISDN = Inputs.GetProperty(&quot;MSISDN&quot;);_newline  with(assetBc)_newline  {_newline    SetViewMode(AllView); _newline   ActivateField(&quot;Serial Number&quot;); _newline    ActivateField(&quot;Auto Type&quot;); _newline ActivateField(&quot;Status&quot;); _newline   ClearToQuery(); _newline   srchexp = &quot;[Serial Number] =&apos;&quot; + strMSISDN + &quot;&apos; AND ([Auto Type] = &apos;&quot; + OGBar + &quot;&apos; OR [Auto Type] = &apos;&quot; + ICbar + &quot;&apos;) AND [Status] = &apos;&quot; + active + &quot;&apos;&quot;;_newline   //TheApplication().RaiseErrorText(srchexp);_newline    //SetSearchExpr(&quot;[Serial Number] =&apos;&quot; + strMSISDN + &quot;&apos; AND([Auto Type] = &apos;&quot; + OGBar + &quot;&apos; OR [Auto Type] = &apos;&quot; + ICbar +&quot;&apos;) AND &quot;);_newline SetSearchExpr(srchexp);_newline   ExecuteQuery(ForwardOnly); _newline  countBarring = CountRecords();_newline   if( countBarring ==2)_newline   {_newline     actionCode_usUnbar = &quot;Delete&quot;;_newline     prodName_usUnbar = &quot;Collection IC Bar&quot;;_newline   }_newline   if ( countBarring != 2)_newline   {_newline     var isRec = FirstRecord();_newline     if(isRec)_newline    {_newline      actionCode_usUnbar = &quot;Delete&quot;;_newline      prodName_usUnbar  = GetFieldValue(&quot;Product Name&quot;);_newline     }// if(isRec)_newline  }// if (c != 2)_newline  }// with(assetBc)_newline  boAsset   =null;_newline assetBc = null;_newline return ContinueOperation;_newline}"
 Program_spcLanguage="JS"
 Name="SetActionCodeUnbar"
 Sequence="55"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function TestBC(Inputs,Outputs)_newline{_newline var strBOName  = Inputs.GetProperty(&quot;BOName&quot;);_newline var strBCName  = Inputs.GetProperty(&quot;BCName&quot;);_newline var strFldName = Inputs.GetProperty(&quot;FieldName&quot;);_newline var strSS      = Inputs.GetProperty(&quot;SearchSpec&quot;);_newline var boTest:BusObject = TheApplication().GetBusObject(strBOName);_newline var bcTest:BusComp   = boTest.GetBusComp(strBCName);_newline bcTest.SetViewMode(AllView);_newline bcTest.ActivateField(&quot;Id&quot;);_newline bcTest.ActivateField(strFldName);_newline bcTest.ClearToQuery();_newline bcTest.SetSearchExpr(strSS);_newline bcTest.ExecuteQuery(ForwardOnly);_newline if(bcTest.FirstRecord())_newline {_newline  Outputs.SetProperty(&quot;FieldValue&quot;,bcTest.GetFieldValue(strFldName));_newline }_newline else_newline {_newline  Outputs.SetProperty(&quot;Error Code&quot;,&quot;NO_usREC&quot;);_newline  Outputs.SetProperty(&quot;Error Message&quot;,&quot;No record was found with gven search specification.&quot;);_newline }_newline bcTest = null;_newline boTest = null;_newline return CancelOperation;_newline}"
 Program_spcLanguage="JS"
 Name="TestBC"
 Sequence="56"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function TestOrder(Inputs,Outputs)_newline{_newline var boTest:BusObject = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);_newline var bcTest:BusComp   = boTest.GetBusComp(&quot;Order Entry - Orders&quot;);_newline var bcOLI:BusComp    = boTest.GetBusComp(&quot;Order Entry - Line Items&quot;);_newline bcTest.SetViewMode(AllView);_newline bcTest.ActivateField(&quot;Id&quot;);_newline bcTest.ClearToQuery();_newline bcTest.SetSearchExpr(&quot;[Id]=&apos;&quot; + Inputs.GetProperty(&quot;Order Id&quot;) + &quot;&apos;&quot;);_newline bcTest.ExecuteQuery(ForwardOnly);_newline if(bcTest.FirstRecord())_newline {_newline  bcOLI.ActivateField(&quot;Product&quot;);_newline  bcOLI.NewRecord(NewAfter);_newline  bcOLI.SetFieldValue(&quot;Action Code&quot;,&quot;Add&quot;);_newline  var bcProdPick:BusComp = bcOLI.GetPicklistBusComp(&quot;Product&quot;);//Product_newline//should be Product w/ ST constraint instead? but get error: Field &apos;Cfg Complex Product Id&apos; does not exist in definition for business component &apos;Order Entry - Line Items&apos;_newline  bcProdPick.SetViewMode(AllView);_newline  bcProdPick.ClearToQuery();_newline  bcProdPick.SetSearchExpr(&quot;[Name]=&apos;&quot; + Inputs.GetProperty(&quot;Product Name&quot;) + &quot;&apos;&quot;);_newline  bcProdPick.ExecuteQuery(ForwardOnly);_newline  if(bcProdPick.FirstRecord())_newline   bcProdPick.Pick();_newline  bcProdPick=null;_newline  bcOLI.WriteRecord();_newline }_newline else_newline {_newline  Outputs.SetProperty(&quot;Error Code&quot;,&quot;NO_usREC&quot;);_newline  Outputs.SetProperty(&quot;Error Message&quot;,&quot;No record was found with gven search specification.&quot;);_newline }_newline bcTest = null;_newline boTest = null;_newline return CancelOperation;_newline}"
 Program_spcLanguage="JS"
 Name="TestOrder"
 Sequence="57"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments="20140528:NS Added function for AutoAsset"
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="/*-------------+------+--------+---------------------------------------------- _newlineDate(YYYYMMDD) | Ver  | By     | Description of Change _newline---------------+------+--------+---------------------------------------------- _newline20140527       | 1.00 | NANDEESHS | This function will Complete order &amp; auto Asset_newline---------------+------+--------+--------------------------------------------*/ _newlinefunction func_usAutoAsset(Inputs, Outputs)_newline{_newlinevar strOrderId = Inputs.GetProperty(&quot;RowId&quot;);_newline var boorder = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);_newline var bcorder = boorder.GetBusComp(&quot;Order Entry - Orders&quot;);_newline var bcorderLine = boorder.GetBusComp(&quot;Order Entry - Line Items&quot;);_newline var err =&quot;&quot;;_newline bcorder.ClearToQuery();_newline bcorder.SetViewMode(AllView);_newline bcorder.SetSearchSpec(&quot;Id&quot;,strOrderId);_newline bcorder.ExecuteQuery();_newline    var isRecord = bcorder.FirstRecord();_newline    while(isRecord)_newline    {_newline        try_newline        {_newline            with(bcorderLine)_newline            {_newline    ClearToQuery();_newline    SetViewMode(AllView);_newline     ExecuteQuery();_newline    var isLineRecord = FirstRecord();_newline    while(isLineRecord)_newline    {_newline     SetFieldValue(&quot;Status&quot;,&quot;Complete&quot;);_newline     WriteRecord();_newline     InvokeMethod(&quot;OrderToAsset&quot;);_newline     isLineRecord = NextRecord();_newline    }_newline   }_newline bcorder.SetFieldValue(&quot;Status&quot;,&quot;Complete&quot;);_newline   isRecord = bcorder.NextRecord();_newline  }_newline  catch(e)_newline  {_newline   err=e.toString(); _newline   Outputs.SetProperty(&quot;Err&quot;,err); _newline  }_newline } _newline bcorder = null;_newline boorder = null;_newline}"
 Program_spcLanguage="JS"
 Name="func_usAutoAsset"
 Sequence="9"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="/*-------+------+--------+---------------------------------------------- _newlineYYYYMMDD | Ver  | By     | Description of Change _newline---------+------+--------+---------------------------------------------- _newline20140206 | 1.00 | PPB    | Barring related EDR processing _newline20140213 | 1.10 | PPB    | PortOut driven bestmate cleanup order _newline20140224 | 1.20 | PPB    | Date check for AutoResume _newline20140318 | 1.30 | ARPANC | If Donot Block flag is true on an account don&apos;t bar it _newline---------+------+--------+--------------------------------------------*/ _newlinefunction func_usAutomatedProcessing(Inputs, Outputs) _newline{ _newline var strEDRBatchId = Inputs.GetProperty(&quot;EDRBatchId&quot;); _newline var strEDRChildId = Inputs.GetProperty(&quot;EDRChildId&quot;); _newline var strExtRefId   = Inputs.GetProperty(&quot;Ext Ref Id&quot;);//stamp on the resultant record like order/SR etc _newline var strRecordType = Inputs.GetProperty(&quot;RecordType&quot;);//will contain batchtype at parent record _newline var strActionType = Inputs.GetProperty(&quot;Attrib02&quot;);//will contain actiontype at child record _newline var strAttrib01 = Inputs.GetProperty(&quot;Attrib01&quot;); _newline var strAttrib03 = Inputs.GetProperty(&quot;Attrib03&quot;); _newline var strAttrib04 = Inputs.GetProperty(&quot;Attrib04&quot;); _newline var strAttrib05 = Inputs.GetProperty(&quot;Attrib05&quot;); _newline var strAttrib11 = Inputs.GetProperty(&quot;Attrib11&quot;); _newline var strAttrib12 = Inputs.GetProperty(&quot;Attrib12&quot;); _newline var strAttrib13 = Inputs.GetProperty(&quot;Attrib13&quot;); _newline var strAttrib21 = Inputs.GetProperty(&quot;Attrib21&quot;); _newline var strAttrib22 = Inputs.GetProperty(&quot;Attrib22&quot;); _newline var strAttrib23 = Inputs.GetProperty(&quot;Attrib23&quot;); _newline var strErrCode=&quot;OK&quot;, strErrMesg=&quot;&quot;,strOrderId=&quot;&quot;; _newline var dtReq,dtNow=new Date(); _newline _newline if(&quot;RemoveBestMateNP&quot;==strActionType) _newline { _newline  func_usProcessEDR_usBestMateCleanup(Inputs, Outputs); _newline  strErrMesg = Outputs.GetProperty(&quot;Error Message&quot;); _newline  strErrCode = Outputs.GetProperty(&quot;Error Code&quot;); _newline } _newline else if(&quot;AutoResume&quot;==strActionType) _newline {//Attrib04 - stores assetintegid _newline//1.2 below _newline  if(&quot;&quot;!=strAttrib12) _newline   dtReq=new Date(strAttrib12); _newline  else _newline   dtReq=new Date(); _newline  if(dtReq &gt;= dtNow)//wait till maturity _newline  { _newline    strErrMesg = &quot;AutoResume order not yet ready to be created based on timestamp of request.&quot;; _newline    strErrCode = &quot;Initial&quot;; _newline  } _newline  else _newline  { _newline//1.2 above _newline   func_usValidateExistingOrder(Inputs, Outputs) _newline   strErrMesg = Outputs.GetProperty(&quot;Error Message&quot;); _newline   strErrCode = Outputs.GetProperty(&quot;Error Code&quot;); _newline   strOrderId = Outputs.GetProperty(&quot;Order Id&quot;); _newline   if(&quot;OK&quot;==strErrCode) _newline   { _newline    Inputs.SetProperty(&quot;Integration Id&quot;, strAttrib04); _newline    Inputs.SetProperty(&quot;Request Type&quot;,   &quot;Resume&quot;); _newline    Inputs.SetProperty(&quot;Request Source&quot;, &quot;User&quot;);//hard code for EDRs _newline    func_usProcessSuspendResumeSub(Inputs, Outputs); _newline    strOrderId = Outputs.GetProperty(&quot;OrderId&quot;); _newline    strErrMesg = Outputs.GetProperty(&quot;Error Message&quot;); _newline    strErrCode = Outputs.GetProperty(&quot;Error Code&quot;); _newline   } _newline  } _newline } _newline else if(&quot;Credit:Account Termination&quot;==strActionType || _newline  &quot;Credit:Incoming Bar&quot; ==strActionType || _newline  &quot;Credit:Outgoing Bar&quot; ==strActionType || &quot;Credit:Exit Collection&quot; ==strActionType || &quot;Credit:Promise To Pay&quot; ==strActionType) _newline { _newline // 1.3 Below _newline  var boAccount = TheApplication().GetBusObject(&quot;Account&quot;); _newline  var bcAccount = boAccount.GetBusComp(&quot;Account&quot;);//child assets _newline  bcAccount.ActivateField(&quot;VFQA Do Not Block&quot;); _newline  bcAccount.SetViewMode(AllView); _newline  bcAccount.ClearToQuery(); _newline  bcAccount.SetSearchExpr(&quot;[Id]=&apos;&quot; + strAttrib03 + &quot;&apos;&quot;); _newline  bcAccount.ExecuteQuery(ForwardOnly); _newlineif(bcAccount.FirstRecord()) _newline  { _newline  var strDonotBlock = bcAccount.GetFieldValue(&quot;VFQA Do Not Block&quot;); _newline  if (strDonotBlock == &quot;Y&quot;) _newline  {  _newline  strErrCode=&quot;Initial&quot;; _newline  strErrMesg=&quot;Account Do Not Block Flag is True&quot;; _newline  } _newline  else _newline  { _newline  Inputs.SetProperty(&quot;Bill Profile Id&quot;,strAttrib01); _newline  Inputs.SetProperty(&quot;Request Type&quot;, strActionType); _newline  func_usProcessCollectionsForBillProfile(Inputs, Outputs); _newline  strErrCode = Outputs.GetProperty(&quot;Error Code&quot;); _newline  strErrMesg = Outputs.GetProperty(&quot;Error Message&quot;); _newline  } _newline  } _newline } _newline // 1.3 Above _newline else _newline { _newline  strErrCode=&quot;UNSUPPORTED&quot;; _newline  strErrMesg=&quot;Unsupported automated processing request for type: &quot; + strActionType; _newline } _newline Outputs.SetProperty(&quot;Error Code&quot;,strErrCode); _newline Outputs.SetProperty(&quot;Error Message&quot;,strErrMesg); _newline Outputs.SetProperty(&quot;Order Id&quot;,strOrderId); _newline bcAccount = null; _newline boAccount = null; _newline return CancelOperation; _newline}"
 Program_spcLanguage="JS"
 Name="func_usAutomatedProcessing"
 Sequence="10"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function func_usBarringEDR(Inputs, Outputs)_newline{_newline var strOrdSubType  = Inputs.GetProperty(&quot;RecordType&quot;);_newline var strMSISDN      = Inputs.GetProperty(&quot;MSISDN&quot;);//can be FL number also :-)_newline var strProductName = Inputs.GetProperty(&quot;Product Name&quot;);    _newline var strProductId=&quot;&quot;, strAccntId=&quot;&quot;;_newline var strActionCode  = Inputs.GetProperty(&quot;Action Code&quot;);   _newline var strToBeOrdIntId= Inputs.GetProperty(&quot;Ext Ref Id&quot;);_newline var boMain, bcOrd, bcOLI, bcProd, bcAsset, bcAccnt, bsUtil, psIp, psOp;_newline var strErrCode = &quot;OK&quot;,  strErrMesg =&quot;&quot;;_newline var strOrderId,strAccId, strRootAssetId, strRootAccId, strCpdProdNum, strIntegId, strRootIntegId, strBillingType, strServiceInst, strProductType, strParBillingType, strParServiceInst;_newline var strOpStatus,strStatus,strOLIProdName, strConId, strCIPId, isRec;_newline//check existing order_newline func_usValidateExistingOrder(Inputs, Outputs);_newline strOrderId = Outputs.GetProperty(&quot;Order Id&quot;);_newline strErrCode = Outputs.GetProperty(&quot;Error Code&quot;);_newline strErrMesg = Outputs.GetProperty(&quot;Error Message&quot;);_newline if(&quot;OK&quot; == strErrCode)_newline {_newline  if((&quot;&quot; == strProductName &amp;&amp; (&quot;Add&quot; == strActionCode || &quot;Delete&quot; == strActionCode)) _newline   || &quot;&quot; == strActionCode _newline   || &quot;&quot; == strMSISDN _newline   || &quot;&quot; == strToBeOrdIntId_newline   || &quot;CollectionsBarring&quot; != strOrdSubType)_newline  {_newline   strErrCode = &quot;NOT_usENOUGH_usINPUTS&quot;;_newline   strErrMesg = &quot;Ext Ref Id, MSISDN, Action Code are mandatory inputs, for Add or Delete action Product Name/Code must be provided as input.&quot;;_newline  }_newline  else _newline  {_newline   if(&quot;Add&quot; == strActionCode || &quot;Delete&quot; == strActionCode)_newline   {_newline//check product_newline    boMain = TheApplication().GetBusObject(&quot;Internal Product&quot;);_newline    bcProd = boMain.GetBusComp(&quot;Internal Product&quot;);_newline    bcProd.SetViewMode(AllView);_newline    bcProd.ActivateField(&quot;Name&quot;);_newline    bcProd.ClearToQuery();_newline    bcProd.SetSearchExpr(&quot;[Name]=&apos;&quot; + strProductName + &quot;&apos; OR [Part #]=&apos;&quot; + strProductName + &quot;&apos;&quot;);_newline    bcProd.ExecuteQuery(ForwardOnly);_newline    if(!bcProd.FirstRecord())_newline    {_newline     strErrCode = &quot;INVALID_usPRODUCT&quot;;_newline     strErrMesg = &quot;Product with Name/code = &quot; + strProductName + &quot; not found.&quot;;_newline    }_newline    else_newline    {_newline     strProductName = bcProd.GetFieldValue(&quot;Name&quot;);_newline     strProductId = bcProd.GetFieldValue(&quot;Id&quot;);_newline    }_newline   }_newline   if(&quot;OK&quot; == strErrCode)_newline   {_newline    boMain = TheApplication().GetBusObject(&quot;Asset Management&quot;);_newline    bcAsset = boMain.GetBusComp(&quot;Asset Mgmt - Asset&quot;);_newline    bcAsset.ActivateField(&quot;Integration Id&quot;);_newline    bcAsset.ClearToQuery();_newline//we consider non-Inactive, non-promotion root assets _newline    bcAsset.SetSearchExpr(&quot;[Serial Number]=&apos;&quot; + strMSISDN + &quot;&apos; AND [Status]&lt;&gt;&apos;Inactive&apos; AND [Parent Asset Id] IS NULL AND [Product Type]&lt;&gt;&apos;Promotion&apos;&quot;);_newline    bcAsset.ExecuteQuery();_newline    if(!bcAsset.FirstRecord())_newline    {_newline     strErrCode = &quot;ASSET_usNOT_usFOUND&quot;;_newline     strErrMesg = &quot;Asset with service id &quot; + strMSISDN + &quot; not found.&quot;;_newline    }_newline    else_newline    {_newline     strIntegId     = bcAsset.GetFieldValue(&quot;Integration Id&quot;);_newline     if(&quot;Resume&quot; == strActionCode || &quot;Suspend&quot; == strActionCode)_newline     {//prepare and proceed to create respective order_newline      Inputs.SetProperty(&quot;Integration Id&quot;, strIntegId);_newline      Inputs.SetProperty(&quot;Request Type&quot;,   strActionCode);_newline      Inputs.SetProperty(&quot;Request Source&quot;, &quot;System&quot;);//hard code for EDRs_newline      func_usProcessSuspendResumeSub(Inputs, Outputs);_newline      strOrderId = Outputs.GetProperty(&quot;OrderId&quot;);_newline      strErrMesg = Outputs.GetProperty(&quot;Error Message&quot;);_newline      strErrCode = Outputs.GetProperty(&quot;Error Code&quot;);_newline     }_newline     else_newline     {//this is barring products request Add or Delete (one or more at a time?)_newline      strErrCode = &quot;WIP&quot;;_newline      strErrMesg = &quot;This functionality is being implemented and is in WIP status.&quot;;_newline     }_newline    }_newline   }_newline//check asset details_newline  }_newline }_newline Outputs.SetProperty(&quot;Order Id&quot;,      strOrderId);_newline Outputs.SetProperty(&quot;Error Message&quot;, strErrMesg);_newline Outputs.SetProperty(&quot;Error Code&quot;, strErrCode);_newline return CancelOperation;_newline}"
 Program_spcLanguage="JS"
 Name="func_usBarringEDR"
 Sequence="11"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="/*-------------+------+--------+----------------------------------------------  _newlineDate(YYYYMMDD) | Ver  | By     | Description of Change  _newline---------------+------+--------+----------------------------------------------  _newline20140129       | 1.00 | Prasad | This function cancels all the future dated orders for a given asset _newline---------------+------+--------+--------------------------------------------*/  _newlinefunction func_usCancelFDO(Inputs, Outputs) _newline{ _newline//this function fires cancel action on all future dated orders for a given asset. _newline//it is assumed that FDOs will typically contain only one service bundle / root OLI for the given asset instance _newline var strErrCode=&quot;OK&quot;,strErrMesg=&quot;&quot;; _newline var strAssetIntegId = Inputs.GetProperty(&quot;Integration Id&quot;);//rowid:1-UITVX, integid:1-UIS3O _newline var boMain,bcOLI,bcOrder,psIp,psOp; _newline var bsUtil; _newline var isRec; _newline var sysdate = new Date();_newline      _newline var CurMonth = sysdate.getMonth();_newline      _newline var CurDay   = sysdate.getDate();_newline      _newline var vTimeString = (sysdate.getMonth() + &quot;/&quot; + sysdate.getDate() + &quot;/&quot; + sysdate.getFullYear()+ &quot; 00:00:00&quot;);_newline_newline var dtNow=new Date(); _newline dtNow.setHours(0);dtNow.setMinutes(0);dtNow.setSeconds(0); _newline var recCnt=0; _newline var recCntErr=0; _newline var dtDue; _newline var strOrderIdList=&quot;&quot;; _newline var arrOrderId; _newline if(&quot;&quot;==strAssetIntegId) _newline { _newline  strErrCode=&quot;ASSET_usINTEG_usID_usMISSING&quot;; _newline  strErrMesg=&quot;Asset reference needs to be specified as input &apos;Integration Id&apos;&quot;; _newline } _newline else _newline { _newline  boMain=TheApplication().GetBusObject(&quot;PDS Order Item&quot;); _newline  bcOLI=boMain.GetBusComp(&quot;Order Entry - Line Items&quot;); _newline  bcOLI.ActivateField(&quot;Order Header Id&quot;); _newline  bcOLI.ActivateField(&quot;Due Date&quot;); _newline  bcOLI.SetViewMode(AllView); _newline  bcOLI.InvokeMethod(&quot;SetAdminMode&quot;, &quot;TRUE&quot;);_newline_newline_newline  bcOLI.ClearToQuery(); _newline  bcOLI.SetSearchExpr(&quot;[Asset Integration Id]=&apos;&quot; + strAssetIntegId + &quot;&apos; AND [Status]=&apos;Open&apos;&quot; ); _newline  bcOLI.ExecuteQuery(ForwardOnly); _newline  isRec=bcOLI.FirstRecord(); _newline  while(isRec) _newline  { _newline   dtDue=new Date(bcOLI.GetFieldValue(&quot;Due Date&quot;)); _newline   dtDue.setHours(0);dtDue.setMinutes(0);dtDue.setSeconds(0); _newline   if(dtDue&gt;dtNow) _newline    strOrderIdList=strOrderIdList + bcOLI.GetFieldValue(&quot;Order Header Id&quot;) + &quot;;&quot;; _newline   isRec=bcOLI.NextRecord(); _newline  } _newline//so far the list of order Ids is received, now run in a loop and execute cancelorder _newline  arrOrderId=strOrderIdList.split(&quot;;&quot;); _newline  if(0&lt;arrOrderId.length &amp;&amp; &quot;&quot;!=arrOrderId[0])//an array out of null string also has one element :-( _newline  { _newline   bsUtil=TheApplication().GetService(&quot;Workflow Process Manager&quot;); _newline/*OOB Cancel order processing is through a signal &apos;OrderCancel&apos; _newlineIt invokes WFP &apos;SWICancel Sales Order&apos; which is interactive flow _newlineIt validation order by Rule Set &apos;Cancel Order Validation&apos; - checks [Cancel Reason] is not null and [Change Cost] is null (i.e. PONR not reached) _newlineIf valid set field values before submitting order for cancellation  _newline--Order BC _newlineCancel Reason           = System Cancelled FDO _newlineFulfillment Mode        = LookupValue(&quot;FULFLMNT_usMODE_usTYPE&quot;, &quot;Cancel&quot;) _newlineStatus                  = LookupValue(&quot;FS_usORDER_usSTATUS&quot;, &quot;Pending Cancel&quot;) _newlineFulfillment Status Code = &quot;&quot; _newlineBack Office Error Text  = &quot;&quot; _newline--OLI BC _newlineFulfillment Status Code = &quot;&quot; _newlineStatus Context          = &quot;&quot; _newlineThen invoke SISOMBillingSubmitOrderWebService, set input arguments _newlineObject Id=Order Row id _newlineFulfillment Mode = Cancel*/ _newline   boMain=TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;); _newline   bcOrder=boMain.GetBusComp(&quot;Order Entry - Orders&quot;); _newline   bcOrder.SetViewMode(AllView) ;_newline   bcOrder.InvokeMethod(&quot;SetAdminMode&quot;, &quot;TRUE&quot;);_newline   bcOrder.ActivateField(&quot;Cancel Reason&quot;); _newline   bcOrder.ActivateField(&quot;Fulfillment Mode&quot;); _newline   bcOrder.ActivateField(&quot;Status&quot;); _newline   bcOrder.ActivateField(&quot;Fulfillment Status Code&quot;); _newline   bcOrder.ActivateField(&quot;Back Office Error Text&quot;); _newline   bcOrder.ActivateField(&quot;Requested Ship Date&quot;);                               // [MAYANK][For Setting Due Date = Sysdate in case of Cancel Order Defect# 8606]_newline_newline_newline _newline   bcOLI=boMain.GetBusComp(&quot;Order Entry - Line Items&quot;); _newline   bcOLI.SetViewMode(AllView) _newline   bcOLI.ActivateField(&quot;Fulfillment Status Code&quot;); _newline   bcOLI.ActivateField(&quot;Status Context&quot;); _newline   for(var i=0;i&lt;arrOrderId.length;i++) _newline   { _newline    if(&quot;&quot;!=arrOrderId[i]) _newline    { _newline     bcOrder.ClearToQuery(); _newline     bcOrder.SetSearchExpr(&quot;[Id]=&apos;&quot; + arrOrderId[i] + &quot;&apos;&quot;); _newline     bcOrder.ExecuteQuery(ForwardOnly); _newline     if(bcOrder.FirstRecord()) _newline     { _newline      bcOrder.SetFieldValue(&quot;Cancel Reason&quot;,&quot;System Cancelled FDO&quot;); _newline      bcOrder.SetFieldValue(&quot;Fulfillment Mode&quot;, &quot;Cancel&quot;); _newline      bcOrder.SetFieldValue(&quot;Status&quot;,&quot;Pending Cancel&quot;); _newline      bcOrder.SetFieldValue(&quot;Fulfillment Status Code&quot;,&quot;&quot;); _newline      bcOrder.SetFieldValue(&quot;Back Office Error Text&quot;,&quot;&quot;); _newline      bcOrder.SetFieldValue(&quot;Requested Ship Date&quot;,vTimeString);                             // [MAYANK][For Setting Due Date = Sysdate in case of Cancel Order Defect# 8606]_newline      bcOrder.WriteRecord(); _newline      isRec = bcOLI.FirstRecord();//no need to query again since bcOLI has been already opened _newline      while(isRec) _newline      { _newline       bcOLI.SetFieldValue(&quot;Fulfillment Status Code&quot;,&quot;&quot;); _newline       bcOLI.SetFieldValue(&quot;Status Context&quot;,&quot;&quot;); _newline       bcOLI.WriteRecord(); _newline       isRec=bcOLI.NextRecord(); _newline      } _newline      psIp=TheApplication().NewPropertySet(); _newline      psIp.SetProperty(&quot;ProcessName&quot;,      &quot;SISOMBillingSubmitOrderWebService&quot;); _newline      psIp.SetProperty(&quot;Fulfillment Mode&quot;, &quot;Cancel&quot;); _newline      psIp.SetProperty(&quot;RowId&quot;,            arrOrderId[i]); _newline      psOp=TheApplication().NewPropertySet(); _newline      try _newline      { _newline       bsUtil.InvokeMethod(&quot;RunProcess&quot;, psIp, psOp);//do not check any errors etc, since this async submission _newline       Outputs.SetProperty(&quot;Order_us&quot; + arrOrderId[i],&quot;OK&quot;); _newline       recCnt++; _newline      } _newline      catch(e) _newline      { _newline       Outputs.SetProperty(&quot;Order_us&quot; + arrOrderId[i], e.errCode + &quot;:&quot; + e.errText); _newline       recCntErr++; _newline      } _newline     } _newline    } _newline   } _newline   strErrMesg=&quot;Future dated orders cancellation: Cancel request submitted - &quot; + recCnt + &quot;, failed - &quot; + recCntErr; _newline  } _newline  else _newline  { _newline   strErrMesg=&quot;No future dated orders found.&quot;; _newline  } _newline } _newline arrOrderId=null; _newline boMain=null; _newline bcOLI=null; _newline bcOrder=null; _newline psOp=null; _newline psIp=null; _newline bsUtil=null; _newline Outputs.SetProperty(&quot;Error Code&quot;, strErrCode); _newline Outputs.SetProperty(&quot;Error Message&quot;, strErrMesg); _newline return CancelOperation; _newline}"
 Program_spcLanguage="JS"
 Name="func_usCancelFDO"
 Sequence="12"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments="[ARPANCHOUHAN][20.02.2014][ADDED CODE FOR EXIT COLLECTIONS RESUME/MODIFY ORDER]"
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="/*-------------+------+--------+----------------------------------------------  _newlineDate(YYYYMMDD) | Ver  | By     | Description of Change  _newline---------------+------+--------+----------------------------------------------  _newline20140222       | 1.00 | ARPANC | This function will remove System Bar from an asset _newline---------------+------+--------+--------------------------------------------*/  _newlinefunction func_usCheckandRemoveBar(Inputs, Outputs) _newline{        _newline        var isRec; _newline  var isPresent; _newline  var strChildInfo; _newline  var strOrderId = &quot;&quot;; _newline  var strOrderValid = &quot;Y&quot; _newline  var strAssetId = Inputs.GetProperty(&quot;Asset Id&quot;); _newline  var strAssetIntegId = Inputs.GetProperty(&quot;Integration Id&quot;); _newline  var strExtRefIdChld = Inputs.GetProperty(&quot;Ext Ref Id&quot;); _newline  var strAccntId = Inputs.GetProperty(&quot;Account Id&quot;); _newline  var strContactId = Inputs.GetProperty(&quot;Contact Id&quot;); _newline  var strCIPId = Inputs.GetProperty(&quot;Billing Profile Id&quot;); _newline  var strNotAssertise = Inputs.GetProperty(&quot;NotAssertise&quot;);//NandeeshS added to get Request type_newline  var strProdName = &quot;Dummy&quot; _newline  var strActionCode = &quot;Dummy&quot; _newline  var strParentProdName1 = Inputs.GetProperty(&quot;Parent Product Names&quot;); _newline  var strParentProdName = &quot;Dummy&quot;; _newline                                 _newline        var boAssetChild = TheApplication().GetBusObject(&quot;Account&quot;); _newline  var bcAssetChild = boAssetChild.GetBusComp(&quot;Asset Mgmt - Asset (Order Mgmt)&quot;);    _newline      bcAssetChild.SetViewMode(AllView); _newline      bcAssetChild.ActivateField(&quot;Product Name&quot;); _newline      bcAssetChild.ClearToQuery(); _newline//1.1 Below:Query Asset with Parent Asset Id and Product Type _newline      bcAssetChild.SetSearchExpr(&quot;[Root Asset Id]=&apos;&quot; + strAssetId + &quot;&apos; AND [Prod Type] = &apos;System Bar&apos;&quot;); _newline      bcAssetChild.ExecuteQuery(ForwardOnly); _newline      isRec = bcAssetChild.FirstRecord(); _newline         while(isRec) _newline         { _newline//1.1 Below:Fetch ProductName for all the asset returned in above query and prepare a consolidated input to create and update order _newline          strProdName = bcAssetChild.GetFieldValue(&quot;Product Name&quot;)+&quot;;&quot;+strProdName; _newline    strActionCode = &quot;Delete&quot;+&quot;;&quot;+strActionCode; _newline    strParentProdName = strParentProdName1+&quot;;&quot;+strParentProdName; _newline       isRec = bcAssetChild.NextRecord();     _newline         } _newline//1.1 Below:Format Input for Function func_usCreateModifyOrderGeneric. _newline    strProdName = strProdName.split(&quot;;Dummy&quot;); _newline       strProdName = strProdName[0]; _newline    strActionCode = strActionCode.split(&quot;;Dummy&quot;); _newline       strActionCode = strActionCode[0]; _newline    strParentProdName = strParentProdName.split(&quot;;Dummy&quot;); _newline       strParentProdName = strParentProdName[0]; _newline          Inputs.SetProperty(&quot;Ext Ref Id&quot;, strExtRefIdChld); _newline       Inputs.SetProperty(&quot;Integration Id&quot;, strAssetIntegId); _newline       Inputs.SetProperty(&quot;Account Id&quot;, strAccntId); _newline       Inputs.SetProperty(&quot;Contact Id&quot;, strContactId); _newline       Inputs.SetProperty(&quot;Billing Profile Id&quot;, strCIPId); _newline       Inputs.SetProperty(&quot;Product Names&quot;, strProdName); _newline       Inputs.SetProperty(&quot;Action Codes&quot;, strActionCode); _newline       if(strNotAssertise !=&quot;Y&quot;)// NandeeshS added this modify order Auto Complete &amp; Asset_newline      {_newline            Inputs.SetProperty(&quot;Submit&quot;, &quot;AutoAsset&quot;); _newline      }_newline       Inputs.SetProperty(&quot;Parent Product Names&quot;, strParentProdName); _newline    Inputs.SetProperty(&quot;Asset Integration Id&quot;, strAssetIntegId); _newline    Inputs.SetProperty(&quot;Order Validation&quot;, strOrderValid); _newline    Inputs.SetProperty(&quot;ByPass Validation&quot;, &quot;Y&quot;);//NandeeshS: Added to bypass Validation_newline             func_usCreateModifyOrderGeneric(Inputs, Outputs); _newline    strOrderId = Outputs.GetProperty(&quot;Order Id&quot;); _newline             strChildInfo = strOrderId +&quot;:&quot;+Outputs.GetProperty(&quot;Error Code&quot;)+&quot;:&quot;+Outputs.GetProperty(&quot;Error Message&quot;); _newline      Outputs.SetProperty(&quot;Comment_usStatus&quot;, strChildInfo); _newline    _newline   bcAssetChild = null; _newline         boAssetChild = null; _newline }"
 Program_spcLanguage="JS"
 Name="func_usCheckandRemoveBar"
 Sequence="13"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function func_usCreateModifyOrder(IP,OP)_newline{_newline var strRootAssetId, strPromAssetId, strRootProduct, strBillAccntId, strServAccntId, strCIPId, strPayProId, strRootAssetIntegId;_newline var strOrderId=&quot;&quot;, strSRId=&quot;&quot;, strErrCode=&quot;OK&quot;, strErrMesg=&quot;&quot;, numOrderTotalAmt=0.0, strAccntId=&quot;&quot;;_newline var boParent, bcParent, bcOrd, bcOLI,bcPick,bcPayment,bcComIP,boComIP;_newline var boMain,bcProd,psInp1,psOp,psOpm,bsPMT,isRec;_newline var strOrdSubType=IP.GetProperty(&quot;RecordType&quot;);_newline var strMSISDN=IP.GetProperty(&quot;MSISDN&quot;);    _newline var strProductCharge=IP.GetProperty(&quot;Product Charge 1&quot;);_newline var strSubdebtPrice=IP.GetProperty(&quot;Discount&quot;);_newline var strAccType = OP.GetProperty(&quot;Account Type&quot;);_newline var sPrice; _newline OP.SetProperty(&quot;Order Id&quot;, &quot;&quot;);_newline OP.SetProperty(&quot;SR Id&quot;,    &quot;&quot;);_newline var hasCharge        = false;_newline if (&quot;&quot; != strProductCharge)_newline {_newline  hasCharge = true;_newline  strProductCharge = ToNumber(strProductCharge);_newline }_newline var strParentProductName = &quot;&quot;;_newline var strProductName     = IP.GetProperty(&quot;Product Name&quot;);    _newline if((&quot;2&quot;==strOrdSubType || &quot;1&quot;==strOrdSubType) &amp;&amp; &quot;Prepaid&quot; == strAccType)_newline {_newline  strProductName = strProductName + &quot;_usRPLN&quot;;_newline  IP.SetProperty(&quot;Product Name&quot;, strProductName);    _newline }_newline var strActionCode    = IP.GetProperty(&quot;Action Code&quot;);   _newline var strToBeOrdIntId  = IP.GetProperty(&quot;Ext Ref Id&quot;);_newline boMain = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);_newline bcOrd = boMain.GetBusComp(&quot;Order Entry - Orders&quot;);_newline bcOrd.SetViewMode(AllView);_newline bcOrd.ActivateMultipleFields(func_usMultiFields(&quot;Order Entry - Orders&quot;));_newline bcOrd.ClearToQuery();_newline bcOrd.SetSearchExpr(&quot;[Back Office Order Number]=&apos;&quot; + strToBeOrdIntId + &quot;&apos;&quot;);_newline bcOrd.ExecuteQuery(ForwardOnly);_newline if(bcOrd.FirstRecord())_newline {_newline  strOrderId = bcOrd.GetFieldValue(&quot;Id&quot;);_newline  strErrCode = &quot;ORDER_usEXISTS_usFOR_usEDR&quot;;_newline  strErrMesg = &quot;Order for &quot; + strToBeOrdIntId + &quot; exists [status:&quot; +  bcOrd.GetFieldValue(&quot;Status&quot;) + &quot;]&quot;;_newline }_newline if(&quot;OK&quot;==strErrCode)_newline {_newline  var strTBDOLIId = &quot;&quot;, strParentOLIId = &quot;&quot;, strRootOLIId = &quot;&quot;, strParentProductId = &quot;&quot;, strProdItemId = &quot;&quot;, strProductPortId = &quot;&quot;,isOLIRecord;_newline  var isDiscOrd     = false;_newline  if(&quot;&quot;==strProductName || &quot;&quot;==strActionCode || &quot;&quot;==strMSISDN || &quot;&quot; == strToBeOrdIntId)_newline  {_newline   strErrCode = &quot;NOT_usENOUGH_usINPUTS&quot;;_newline   strErrMesg = &quot;ExtRef, MSISDN, Action Code and Product Name/Code must be provided.&quot;;_newline  }_newline  else _newline  {_newline   if (&quot;Root&quot; == strProductName &amp;&amp; &quot;Delete&quot; == strActionCode &amp;&amp; &quot;Prepaid&quot; == strAccType)_newline    isDiscOrd = true;_newline   else if(strOrdSubType == &quot;SUB-DELETED&quot;)_newline    isDiscOrd = false;_newline   else_newline   {_newline    boMain = TheApplication().GetBusObject(&quot;Internal Product&quot;);_newline    bcProd = boMain.GetBusComp(&quot;Internal Product&quot;);_newline    bcProd.SetViewMode(AllView);_newline    bcProd.ActivateField(&quot;Name&quot;);_newline    bcProd.ClearToQuery();_newline    bcProd.SetSearchExpr(&quot;[Name]=&apos;&quot; + strProductName + &quot;&apos; OR [Part #]=&apos;&quot; + strProductName + &quot;&apos;&quot;);_newline    bcProd.ExecuteQuery(ForwardOnly);_newline    if(!bcProd.FirstRecord())_newline    {_newline     strErrCode = &quot;INVALID_usPRODUCT&quot;;_newline     strErrMesg = &quot;Product with Name/code = &quot; + strProductName + &quot; not found.&quot;;_newline    }_newline    else_newline    {_newline     strProductName = bcProd.GetFieldValue(&quot;Name&quot;);_newline     IP.SetProperty(&quot;Product Name&quot;,strProductName);_newline    }_newline   }_newline   if(&quot;OK&quot; == strErrCode)_newline   {_newline    func_usGetAssetForMSISDN(IP,OP);_newlineif(&quot;BUCKET-ADD&quot; != strOrdSubType)_newline{_newline    strProductName = OP.GetProperty(&quot;Product Name&quot;);_newline    strParentProductName = OP.GetProperty(&quot;Parent Product Name&quot;);_newline  }_newline  strErrCode = OP.GetProperty(&quot;Error Code&quot;);_newline    strErrMesg = OP.GetProperty(&quot;Error Message&quot;);_newline    if(&quot;OK&quot; == strErrCode)_newline    {_newline     strRootAssetId      = OP.GetProperty(&quot;Root Asset Id&quot;);_newline     strPromAssetId      = OP.GetProperty(&quot;Promotion Asset Id&quot;);_newline     strAccntId          = OP.GetProperty(&quot;Account Id&quot;);_newline     IP.SetProperty(&quot;Account Id&quot;,     strAccntId);_newline     IP.SetProperty(&quot;Root Asset Id&quot;,  strRootAssetId);_newline     strRootProduct      = OP.GetProperty(&quot;Root Product&quot;);_newline     strBillAccntId      = OP.GetProperty(&quot;Billing Account Id&quot;);_newline     strServAccntId      = OP.GetProperty(&quot;Service Account Id&quot;);_newline     strCIPId            = OP.GetProperty(&quot;Billing Profile Id&quot;);_newline     strPayProId         = OP.GetProperty(&quot;Payment Profile Id&quot;);_newline     strRootAssetIntegId = OP.GetProperty(&quot;Asset Integration Id&quot;);_newline    }_newline   }_newline   if(&quot;OK&quot; == strErrCode)_newline   {_newline    if(isDiscOrd &amp;&amp; &quot;Star Number&quot; == OP.GetProperty(&quot;NumberType&quot;))_newline    {_newline     IP.SetProperty(&quot;TicketScenario&quot;, &quot;TT_usSTAR_usDISCONNECT&quot;);_newline     func_usCreateTicket(IP,OP);_newline     strSRId    = OP.GetProperty(&quot;SR Id&quot;);_newline    }_newline    else_newline    {_newline     boMain = TheApplication().GetBusObject(&quot;Account&quot;);_newline     bcParent = boMain.GetBusComp(&quot;Account&quot;);_newline     bcParent.SetViewMode(AllView);_newline     bcParent.ClearToQuery();_newline     bcParent.SetSearchExpr(&quot;[Id]=&apos;&quot; + strAccntId + &quot;&apos;&quot;);_newline     bcParent.ExecuteQuery();_newline     if(bcParent.FirstRecord())_newline     {_newline      bcOrd=boMain.GetBusComp(&quot;Order Entry - Orders&quot;);_newline      bcOrd.InvokeMethod(&quot;SetAdminMode&quot;, &quot;TRUE&quot;);_newline      bcOrd.SetViewMode(AllView);_newline      bcOrd.ActivateMultipleFields(func_usMultiFields(&quot;Order Entry - Orders&quot;));_newline      bcOrd.ClearToQuery();_newline      bcOrd.SetSearchExpr(&quot;[Status] &lt;&gt; &apos;Complete&apos;&quot;);_newline      bcOrd.ExecuteQuery(ForwardOnly);_newline      isRec = bcOrd.FirstRecord();_newline      bcOLI = boMain.GetBusComp(&quot;Order Entry - Line Items&quot;);_newline      bcOLI.SetViewMode(AllView);_newline      while(isRec)_newline      {_newline       bcOLI.ClearToQuery();_newline       bcOLI.SetSearchExpr(&quot;[Status]&lt;&gt;&apos;Cancelled&apos; AND [Status]&lt;&gt;&apos;Complete&apos; AND [Status]&lt;&gt;&apos;Paid&apos; AND [Asset Integration Id]=&apos;&quot; + strRootAssetIntegId + &quot;&apos;&quot;);_newline       bcOLI.ExecuteQuery(ForwardOnly);_newline       if(bcOLI.FirstRecord())_newline       {_newline        strErrCode = &quot;IN_usPROGRESS_usORDER&quot;;_newline        strErrMesg = &quot;Open order(s) exist(s) for this asset.&quot;;_newline        break;_newline       }_newline       isRec = bcOrd.NextRecord();_newline      }_newline      if(&quot;OK&quot; == strErrCode)_newline      {_newline       bcOrd.NewRecord(NewAfter);_newline       bcOrd.SetFieldValue(&quot;Status&quot;,&quot;Paid&quot;);_newline       bcOrd.SetFieldValue(&quot;Back Office Order Number&quot;, strToBeOrdIntId);_newline       bcPick = bcOrd.GetPicklistBusComp(&quot;Order Type&quot;);_newline       bcPick.ClearToQuery();_newline       bcPick.SetSearchExpr(&quot;[Order Type]=&apos;Sales Order&apos;&quot;);_newline       bcPick.ExecuteQuery(ForwardOnly);_newline       if(bcPick.FirstRecord())_newline        bcPick.Pick();_newline       bcOrd.SetFieldValue(&quot;Account Id&quot;, strAccntId);_newline       bcOrd.SetFieldValue(&quot;Billing Account Id&quot;, strBillAccntId);_newline       bcOrd.SetFieldValue(&quot;Service Account Id&quot;, strServAccntId);_newline       bcOrd.SetFieldValue(&quot;Billing Profile Id&quot;, strCIPId);_newline       bcOrd.WriteRecord();_newline       strOrderId  = bcOrd.GetFieldValue(&quot;Id&quot;);_newline       bcOrd.WriteRecord();_newline       func_usCreateOLIfromAssets(strOrderId, strRootAssetId, strPromAssetId);_newline       boMain=TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);_newline       bcOrd=boMain.GetBusComp(&quot;Order Entry - Orders&quot;);_newline       bcOrd.InvokeMethod(&quot;SetAdminMode&quot;, &quot;TRUE&quot;);_newline       bcOrd.SetViewMode(AllView);_newline       bcOrd.ActivateMultipleFields(func_usMultiFields(&quot;Order Entry - Orders&quot;));_newline       bcOLI.SetViewMode(AllView);_newline       bcOrd.ClearToQuery();_newline       bcOrd.SetSearchExpr(&quot;[Id]=&apos;&quot; + strOrderId + &quot;&apos;&quot;);_newline       bcOrd.ExecuteQuery(ForwardOnly);_newline       bcOLI   = boMain.GetBusComp(&quot;Order Entry - Line Items&quot;);_newline       bcOLI.ActivateMultipleFields(func_usMultiFields(&quot;Order Entry - Line Items&quot;));_newline       bcOLI.ClearToQuery();_newline       bcOLI.ExecuteQuery(ForwardOnly);_newline       isOLIRecord = bcOLI.FirstRecord();_newline       while(isOLIRecord)_newline       {_newline        bcOLI.SetFieldValue(&quot;Integration Id&quot;, bcOLI.GetFieldValue(&quot;Id&quot;));_newline        if(isDiscOrd)_newline         bcOLI.SetFieldValue(&quot;Action Code&quot;,&quot;Delete&quot;);_newline        bcOLI.WriteRecord();_newline        isOLIRecord = bcOLI.NextRecord();_newline       }_newline       bcOrd.ClearToQuery();_newline       bcOrd.SetSearchExpr(&quot;[Id]=&apos;&quot; + strOrderId + &quot;&apos;&quot;);_newline       bcOrd.ExecuteQuery(ForwardOnly);_newline       if(!isDiscOrd)_newline       {_newline        if(&quot;Add&quot;==strActionCode)_newline        {_newline         bcOLI.ClearToQuery();_newline         bcOLI.SetSearchExpr(&quot;[Product] =&apos;&quot; + strProductName + &quot;&apos; AND [Order Header Id] = &apos;&quot; + strOrderId + &quot;&apos;&quot;);_newline         bcOLI.ExecuteQuery();_newline         if(bcOLI.FirstRecord())_newline         {_newline          strErrCode=&quot;PRODUCT_usTO_usADD_usEXISTS&quot;;_newline          strErrMesg=&quot;Product &quot; + strProductName + &quot; already exists.&quot;;_newline          bcOrd.SetFieldValue(&quot;Status&quot;,&quot;Cancelled&quot;);_newline          bcOrd.WriteRecord();_newline         }_newline         else_newline         {_newline          bcOLI.NewRecord(NewAfter);_newline          bcPick = bcOLI.GetPicklistBusComp(&quot;Product&quot;);_newline          bcPick.SetViewMode(AllView);_newline          bcPick.ClearToQuery();_newline          bcPick.SetSearchExpr(&quot;[Name]=&apos;&quot; + strProductName + &quot;&apos;&quot;);_newline          bcPick.ExecuteQuery(ForwardOnly);_newline          if(bcPick.FirstRecord())_newline{_newline           bcPick.Pick();_newline}_newline          else_newline          {_newline           strErrCode=&quot;PROD_usPICK_usFAILED&quot;;_newline           strErrMesg=&quot;Product &quot; + strProductName + &quot; could not be set.&quot;;_newline          }_newline          bcOLI.SetFieldValue(&quot;Action Code&quot;,&quot;Add&quot;);_newline          bcOLI.SetFieldValue(&quot;Service Id&quot;,strMSISDN);_newline          strTBDOLIId = bcOLI.GetFieldValue(&quot;Id&quot;);_newline          if(hasCharge)_newline          {_newline           sPrice = bcOLI.GetFieldValue(&quot;Adjusted List Price - Display&quot;);_newline           bcOLI.SetFieldValue(&quot;Unit Price - Display&quot;, sPrice);_newline           bcOLI.WriteRecord();_newline          }_newline          if(&quot;SUB-DEBT&quot; == strOrdSubType || &quot;BAL-EXPIRE&quot; == strOrdSubType)_newline          {_newline           strSubdebtPrice = ToNumber(strSubdebtPrice);_newline           bcOLI.SetFieldValue(&quot;Discount Amount&quot;, strSubdebtPrice);_newline           bcOLI.WriteRecord();   _newline          }_newline          bcOLI.WriteRecord();_newline          bcOrd.ClearToQuery();_newline          bcOrd.SetSearchExpr(&quot;[Id]=&apos;&quot; + strOrderId + &quot;&apos;&quot;);_newline          bcOrd.ExecuteQuery(ForwardOnly);_newline         }_newline         var psIpPorts = TheApplication().NewPropertySet();_newline         var psOpPorts = TheApplication().NewPropertySet();_newline         psIpPorts.SetProperty(&quot;Root Product Name&quot;,  strRootProduct);_newline         psIpPorts.SetProperty(&quot;Child Product Name&quot;, strProductName);_newline         if(&quot;&quot; != strParentProductName)_newline         psIpPorts.SetProperty(&quot;Parent Product Name&quot;, strParentProductName);_newline         GetDetailsOfLooseProductInstance(psIpPorts,psOpPorts);_newline         strParentProductId   =  psOpPorts.GetProperty(&quot;Parent Product Id&quot;);_newline         strProdItemId        =  psOpPorts.GetProperty(&quot;Prod Item Id&quot;);_newline         strProductPortId     =  psOpPorts.GetProperty(&quot;Product Port Id&quot;);_newline         OP.SetProperty(&quot;Parent Product Id&quot;,   strParentProductId);_newline         OP.SetProperty(&quot;Prod Item Id&quot;,        strProdItemId);   _newline         OP.SetProperty(&quot;Product Port Id&quot;,     strProductPortId);_newline         if(&quot;OK&quot; != func_usPositionNewLineItemInOLITree(strOrderId,strTBDOLIId,strParentProductId,strProdItemId,strProductPortId))_newline         {_newline         strErrCode=&quot;PROD_usNOT_usIN_usHIE&quot;;_newline         strErrMesg=&quot;Position and / or parent of the product &quot; + strProductName + &quot; in the existing asset hierarchy was not found.&quot;;_newline         }_newline        }_newline        else if(&quot;Delete&quot;==strActionCode)_newline        {_newline         bcOLI.ClearToQuery();_newline         bcOLI.SetSearchExpr(&quot;[Product] =&apos;&quot; + strProductName + &quot;&apos;&quot;);_newline         bcOLI.ExecuteQuery(ForwardOnly);_newline         if(bcOLI.FirstRecord())_newline         {_newline          bcOLI.SetFieldValue(&quot;Action Code&quot;, &quot;Delete&quot;);_newline          bcOLI.WriteRecord();_newline         }_newline         else_newline         {_newline          strErrCode=&quot;PRODUCT_usTO_usDELETE_usNOT_usIN_usASSETS&quot;_newline          strErrMesg=&quot;Product &quot; + strProductName + &quot; for delete not found in the assets.&quot;_newline          bcOrd.SetFieldValue(&quot;Status&quot;,&quot;Cancelled&quot;);_newline          bcOrd.WriteRecord();_newline         }_newline        }_newline        else_newline        {_newline         strErrCode=&quot;INVALID_usACTION&quot;_newline         strErrMesg=&quot;Action code specified is invalid.&quot;_newline        }_newline       }_newline       if((&quot;&quot;==strErrCode || &quot;OK&quot;==strErrCode)  &amp;&amp; &quot;BUCKET-ADD&quot; != strOrdSubType )_newline       {_newline        bcOrd.ClearToQuery();_newline        bcOrd.SetSearchExpr(&quot;[Id]=&apos;&quot; + strOrderId + &quot;&apos;&quot;);_newline        bcOrd.ExecuteQuery(ForwardOnly);_newline        numOrderTotalAmt = bcOrd.GetFieldValue(&quot;Order Total&quot;);_newline        OP.SetProperty(&quot;Order Total&quot;,numOrderTotalAmt);_newline        if(0.0 &lt; numOrderTotalAmt)_newline        {_newline         try_newline         {_newline          bcPayment = boMain.GetBusComp(&quot;Payments&quot;);_newline          bcPayment.ActivateField(&quot;Payment Profile Name&quot;);_newline          bcPayment.ActivateField(&quot;Bill Profile Name&quot;);_newlinebcPayment.ActivateField(&quot;Transaction Amount&quot;);_newlinebcPayment.ActivateField(&quot;Payment Method&quot;);_newline          bcPayment.NewRecord(NewAfter);_newlinebcPayment.SetFieldValue(&quot;Payment Method&quot;, &quot;Credit Card&quot;);_newline          bcPick = bcPayment.GetPicklistBusComp(&quot;Payment Profile Name&quot;);_newline          bcPick.SetViewMode(AllView);_newline          bcPick.ClearToQuery();_newline          bcPick.SetSearchExpr(&quot;[Id]=&apos;&quot; + strPayProId + &quot;&apos;&quot;);_newline          bcPick.ExecuteQuery(ForwardOnly);_newline          if(bcPick.FirstRecord())_newline          {_newline           bcPick.Pick();_newlinebcPayment.SetFieldValue(&quot;Transaction Amount&quot;, numOrderTotalAmt);_newline           bcPayment.WriteRecord();_newline           bcPayment.InvokeMethod(&quot;CreditCardAuthentication&quot;);_newline          }_newline          else_newline          {_newline           bcPayment.UndoRecord();_newline           strErrCode = &quot;PAY_usPROFILE_usERR&quot;;_newline           strErrMesg = &quot;Payment could not be created.&quot;;_newline          }_newline         }_newline         catch(e)_newline         {_newline          strErrCode = &quot;PAYMENT_usERR&quot;;_newline          strErrMesg = &quot;Payment creation or processing Error: &quot; + e.errCode+&quot;:&quot;+e.errText;;_newline         }_newline        }_newline       }_newline       bcOrd.ClearToQuery();_newline       bcOrd.SetSearchExpr(&quot;[Id]=&apos;&quot; + strOrderId + &quot;&apos;&quot;);_newline       bcOrd.ExecuteQuery(ForwardOnly);_newline    if(bcOrd.FirstRecord())_newline    {_newline        var BillProfId = bcOrd.GetFieldValue(&quot;Billing Profile Id&quot;);_newline     boComIP = TheApplication().GetBusObject(&quot;Com Invoice Profile&quot;);_newline     bcComIP = boComIP.GetBusComp(&quot;Com Invoice Profile&quot;);_newline     bcComIP.SetViewMode(AllView);_newline     bcComIP.ActivateField(&quot;Payment Method&quot;);_newline     bcComIP.ClearToQuery();_newline     bcComIP.SetSearchExpr(&quot;[Id]=&apos;&quot; + BillProfId + &quot;&apos;&quot;);_newline     bcComIP.ExecuteQuery(ForwardOnly);_newline      if(bcComIP.FirstRecord())_newline      {_newline    var strPayProPayMeth = bcComIP.GetFieldValue(&quot;Payment Method&quot;);_newline      }_newline    if((&quot;Prepaid&quot; == strPayProPayMeth || &quot;Cash&quot; == strPayProPayMeth) &amp;&amp; &quot;BUCKET-ADD&quot; != strOrdSubType)_newline       {_newline     if(&quot;THRESHOLD&quot; == strOrdSubType || &quot;ANNIVERSARY&quot; == strOrdSubType)_newline{_newline bcOrd.ActivateField(&quot;Cancel Reason&quot;);_newlinebcOrd.SetFieldValue(&quot;Cancel Reason&quot;,&quot;Payment Failure&quot;);_newline     bcOrd.SetFieldValue(&quot;Status&quot;,&quot;Cancelled&quot;);_newline     strErrCode = &quot;PAYPROFILE_usINVALID&quot;;_newline     bcOrd.WriteRecord();_newline       }_newlineelse_newline        {_newline         strErrCode=&quot;OK&quot;;_newline        }_newline}_newline         if(&quot;&quot;==strErrCode || &quot;OK&quot;==strErrCode)_newline         {_newlinebcOrd.ActivateField(&quot;VFQA Source&quot;);_newlinebcOrd.ActivateField(&quot;Submit Date&quot;);_newlinebcOrd.ActivateField(&quot;TimeStamp&quot;);      _newlinebcOrd.SetFieldValue(&quot;Status&quot;, &quot;Open&quot;);_newline       bcOrd.SetFieldValue(&quot;VFQA Source&quot;, &quot;EDR&quot;);_newline       bcOrd.SetFieldValue(&quot;Submit Date&quot;,  bcOrd.GetFieldValue(&quot;TimeStamp&quot;));_newline       bcOrd.WriteRecord();   _newline bcOLI.ActivateField(&quot;Action Code&quot;);_newline  bcOLI.SetViewMode(AllView);_newline   bcOLI.ClearToQuery();_newline   bcOLI.SetSearchExpr(&quot;[Action Code]=&apos;Update&apos;&quot;);_newline   bcOLI.ExecuteQuery();_newline   var isRecord = bcOLI.FirstRecord();_newline   while(isRecord)_newline   {_newline    bcOLI.SetFieldValue(&quot;Action Code&quot;, &quot;-&quot;);_newline    bcOLI.WriteRecord();_newline    isRecord = bcOLI.NextRecord();_newline   }       _newline       bsPMT = TheApplication().GetService(&quot;Workflow Process Manager&quot;);_newline       psOp = TheApplication().NewPropertySet();_newline       psInp1 = TheApplication().NewPropertySet();_newline       psInp1.SetProperty(&quot;RowId&quot;, strOrderId);_newline       psInp1.SetProperty(&quot;ProcessName&quot;, &quot;SISOMBillingSubmitOrderWebService&quot;);_newline       bsPMT.InvokeMethod(&quot;RunProcess&quot;, psInp1, psOp);_newline       strErrCode = &quot;OK&quot;;_newline       strErrMesg = &quot;Order submitted.&quot;+ &quot;Pri:&quot; + strSubdebtPrice;_newline         }_newline    }_newline  }_newline  }_newline     else_newline     {_newline      strErrCode=&quot;NO_usACCOUNT&quot;_newline      strErrMesg=&quot;Account not found.&quot;_newline     }_newline    }_newline   }_newline  }_newline }_newline bcProd = null;_newline boComIP = null;_newline bcComIP = null;_newline bcOrd = null;_newline bcOLI   = null;_newline psInp1 = null;_newline psOp   = null;_newline bsPMT  = null;_newline bcParent = null;_newline bcPick = null;_newline bcPayment = null;_newline bcOrd=null;_newline OP.SetProperty(&quot;Order Id&quot;,   strOrderId)_newline OP.SetProperty(&quot;SR Id&quot;,      strSRId)_newline OP.SetProperty(&quot;Error Code&quot;, strErrCode)_newline OP.SetProperty(&quot;Error Message&quot;,&quot;OrderId:&quot;+strOrderId+&quot;;&quot;+strErrMesg)_newline OP.SetProperty(&quot;ProdName&quot;, strProductName)_newline OP.SetProperty(&quot;AccountId&quot;, strAccntId);_newline return CancelOperation;_newline}"
 Program_spcLanguage="JS"
 Name="func_usCreateModifyOrder"
 Sequence="14"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments="20140204:PPB Generic function creates a modify order for one given root asset and applies add/delete one or more products in the bundle."
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="/*-------------+------+--------+----------------------------------------------  _newlineDate(YYYYMMDD) | Ver  | By     | Description of Change  _newline---------------+------+--------+----------------------------------------------  _newline20140205       | 1.00 | Prasad | This function creates a modify order and adds requested products _newline---------------+------+--------+--------------------------------------------*/  _newlinefunction func_usCreateModifyOrderGeneric(Inputs, Outputs) _newline{ _newline var boAsset,bcAsset,boOrder,bcOrder,bcOLI,isRec,psIp,psOp,bcPick; _newline var strRootProdId=&quot;&quot;, strRootProdName=&quot;&quot;, strRootAssetStatus=&quot;&quot;, strParAssetId=&quot;&quot;, strRootAssetId=&quot;&quot;,strAccntId=&quot;&quot;,strTBDOLIId=&quot;&quot;; _newline var strErrCode=&quot;OK&quot;; _newline var strErrMesg=&quot;&quot;; _newline var strRootOLIIdInNewOrder=&quot;&quot;; _newline var strPrimaryMSN = &quot;N&quot;_newline var strOrderId=&quot;&quot;,strCIPId=&quot;&quot;,strContactId=&quot;&quot;,strErrMesgLocal=&quot;&quot;; _newline var strOrderValid = Inputs.GetProperty(&quot;Order Validation&quot;);_newline var strExtRefId      = Inputs.GetProperty(&quot;Ext Ref Id&quot;); _newline var strAssetIntegId  = Inputs.GetProperty(&quot;Asset Integration Id&quot;); _newline var strDoSubmit      = Inputs.GetProperty(&quot;Submit&quot;); _newline var strListOfProd    = Inputs.GetProperty(&quot;Product Names&quot;);//; separated lists _newline var strListOfAction  = Inputs.GetProperty(&quot;Action Codes&quot;); _newline var strListOfParProd = Inputs.GetProperty(&quot;Parent Product Names&quot;); _newline var stByPassValidation = Inputs.GetProperty(&quot;ByPass Validation&quot;);_newline var arrListOfProd    = strListOfProd.split(&quot;;&quot;); _newline var arrListOfAction  = strListOfAction.split(&quot;;&quot;); _newline var arrListOfParProd = strListOfParProd.split(&quot;;&quot;); _newline//fetch and store the values tobe set on Add product OLIs _newline var arrListOfProdItemId    = new Array(); _newline var arrListOfProductPortId = new Array(); _newline var arrListOfProdFeasib = new Array();//stores null value if product action is feasible, error message otherwise _newline var bsUtil=TheApplication().GetService(&quot;Workflow Process Manager&quot;); _newline var strAssetNumber;_newline _newline//input validations and preperations _newline_newline// Outputs.SetProperty(&quot;arrListOfProd&quot;,arrListOfProd);_newline //Outputs.SetProperty(&quot;arrListOfAction&quot;,arrListOfAction+&quot; actual &quot;+strListOfAction);_newline// Outputs.SetProperty(&quot;strListOfParProd&quot;,strListOfParProd[0]); _newline_newline_newline if(&quot;&quot;==strDoSubmit)  _newline  strDoSubmit=&quot;Y&quot;;//consider autosubmission when not speciffied _newline if(&quot;&quot;==strAssetIntegId) _newline { _newline  strErrCode=&quot;INPUT_usERROR&quot;; _newline  strErrMesg=strErrMesg + &quot;Non null value required for &apos;Asset Integration Id&apos; on which modify order is to be created.\r&quot;; _newline } _newline if(arrListOfProd.length != arrListOfParProd.length || arrListOfProd.length != arrListOfAction.length) _newline {//length of all arrays must be same _newline  strErrCode=&quot;INPUT_usERROR&quot;; _newline  strErrMesg=strErrMesg + &quot;Count of values in the three inputs &apos;Product Names&apos;, &apos;Action Codes&apos;, &apos;Parent Product Names&apos; must be same.\r&quot;; _newline } _newline if(&quot;&quot;==arrListOfProd[0] || &quot;&quot;==arrListOfAction[0]) _newline {//First element must not be 0, blank string split gives a one-element array :-( _newline  strErrCode=&quot;INPUT_usERROR&quot;; _newline  strErrMesg=strErrMesg + &quot;There must be at least one non-null value provided for &apos;Product Names&apos; and &apos;Action Codes&apos;.\r&quot;; _newline } _newline for(var i=0; i &lt; arrListOfAction.length; i++) _newline { _newline  if(&quot;Delete&quot;!=arrListOfAction[i] &amp;&amp; &quot;Add&quot;!=arrListOfAction[i] &amp;&amp; arrListOfAction[i] != &quot;&quot; &amp;&amp; arrListOfAction[i] != null ) _newline  { _newline   strErrCode=&quot;INPUT_usERROR&quot;; _newline   strErrMesg=strErrMesg+&quot;Only Add / Delete action code is allowed.\r&quot;; _newline   break; _newline  } _newline } _newline//initialize arrays _newline for(i=0; i&lt;arrListOfProd.length; i++) _newline { _newline  arrListOfProdItemId[i]=&quot;&quot;; _newline  arrListOfProductPortId[i]=&quot;&quot;; _newline  arrListOfProdFeasib[i]=&quot;&quot;; _newline } _newline//check asset, must not be inactive (can be in suspended status), must be a root asset _newline boAsset = TheApplication().GetBusObject(&quot;Asset Management&quot;); _newline bcAsset = boAsset.GetBusComp(&quot;Asset Mgmt - Asset&quot;); _newline bcAsset.ActivateField(&quot;Parent Asset Id&quot;); _newline bcAsset.ActivateField(&quot;Root Asset Id&quot;); _newline bcAsset.ActivateField(&quot;Status&quot;); _newline bcAsset.ActivateField(&quot;Product Name&quot;); _newline bcAsset.ActivateField(&quot;Product Id&quot;); _newline bcAsset.ActivateField(&quot;Owner Account Id&quot;); _newline bcAsset.ActivateField(&quot;Billing Profile Id&quot;); _newline bcAsset.ActivateField(&quot;Owner Contact Id&quot;); _newline bcAsset.SetViewMode(AllView); _newline bcAsset.ClearToQuery(); _newline bcAsset.SetSearchExpr(&quot;[Integration Id]=&apos;&quot; + strAssetIntegId + &quot;&apos;&quot;); _newline bcAsset.ExecuteQuery(ForwardOnly); _newline isRec=bcAsset.FirstRecord(); _newline if(!isRec) _newline { _newline  strErrCode=&quot;INPUT_usERROR&quot;; _newline  strErrMesg=strErrMesg + &quot;Asset with integration id &quot; + strAssetIntegId + &quot; not found.\r&quot;; _newline } _newline else _newline { _newline  strRootAssetId     = bcAsset.GetFieldValue(&quot;Root Asset Id&quot;); _newline  strParAssetId      = bcAsset.GetFieldValue(&quot;Parent Asset Id&quot;); _newline  strRootProdId      = bcAsset.GetFieldValue(&quot;Product Id&quot;); _newline  strRootProdName    = bcAsset.GetFieldValue(&quot;Product Name&quot;); _newline  strRootAssetStatus = bcAsset.GetFieldValue(&quot;Status&quot;); _newline  strContactId       = bcAsset.GetFieldValue(&quot;Owner Contact Id&quot;); _newline  strCIPId           = bcAsset.GetFieldValue(&quot;Billing Profile Id&quot;); _newline  strAccntId         = bcAsset.GetFieldValue(&quot;Owner Account Id&quot;); _newline  strAssetNumber     = bcAsset.GetFieldValue(&quot;Serial Number&quot;); _newline  if(&quot;&quot;!=strParAssetId) _newline  { _newline   strErrCode=&quot;INPUT_usERROR&quot;; _newline   strErrMesg=strErrMesg + &quot;Asset is not a root asset.\r&quot;; _newline  } _newline  if(&quot;Inactive&quot;==strParAssetId) _newline  { _newline   strErrCode=&quot;INPUT_usERROR&quot;; _newline   strErrMesg=strErrMesg + &quot;Asset status = &quot; + strRootAssetStatus + &quot;, hence can not create modify order.\r&quot;; _newline  } _newline//get details about requested add/delete operations _newline  if(&quot;OK&quot;==strErrCode) _newline  { _newline   for(var i=0; i &lt; arrListOfProd.length; i++) _newline   { _newline    if(&quot;Add&quot;==arrListOfAction[i]) _newline    {//product to Add must exist in the root product bundle  _newline     var psIp = TheApplication().NewPropertySet(); _newline     var psOp = TheApplication().NewPropertySet(); _newline     psIp.SetProperty(&quot;Root Product Name&quot;,  strRootProdName); _newline     psIp.SetProperty(&quot;Child Product Name&quot;, arrListOfProd[i]); _newline     if(&quot;&quot; != arrListOfParProd[i]) _newline     psIp.SetProperty(&quot;Parent Product Name&quot;, arrListOfParProd[i]); _newline     GetDetailsOfLooseProductInstance(psIp,psOp); _newline     arrListOfParProd[i]  =  psOp.GetProperty(&quot;Parent Product Id&quot;);//this can be root product itself _newline     arrListOfProdItemId[i] =  psOp.GetProperty(&quot;Prod Item Id&quot;);//PortValidProdId _newline     arrListOfProductPortId[i] =  psOp.GetProperty(&quot;Product Port Id&quot;);//AssemblyPortId _newline//     Outputs.SetProperty(&quot;info_usprod_us&quot; + i, &quot;Parent:&quot; + arrListOfParProd[i] + &quot;;PortValidProdId:&quot; + arrListOfProdItemId[i] + &quot;;AssemblyPortId:&quot; + arrListOfProductPortId[i]); _newline     if(&quot;&quot;==arrListOfProdItemId[i]) _newline     { _newline      strErrCode=&quot;PRODUCT_usERROR&quot;; _newline      strErrMesgLocal = &quot;Product [&quot; + arrListOfProd[i] + &quot;] to add, not a valid child in hierarchy.&quot;; _newline      strErrMesg=strErrMesg + strErrMesgLocal + &quot;\r&quot;; _newline      arrListOfProdFeasib[i]=arrListOfProdFeasib[i] + &quot;\r&quot; + strErrMesgLocal; _newline     } _newline//Check add-product does not exist already in asset [multi-cardinality option??] _newline     bcAsset.ClearToQuery(); _newline     bcAsset.SetSearchExpr(&quot;[Root Asset Id]=&apos;&quot; + strRootAssetId + &quot;&apos; AND [Status]&lt;&gt;&apos;Inactive&apos; AND [Product Name]=&apos;&quot; + arrListOfProd[i] + &quot;&apos;&quot;); _newline     bcAsset.ExecuteQuery(ForwardOnly); _newline     isRec=bcAsset.FirstRecord(); _newline     if(isRec) _newline     { _newline      strErrCode=&quot;PRODUCT_usERROR&quot;; _newline      strErrMesgLocal = &quot;Product [&quot; + arrListOfProd[i] + &quot;] to add, already exists in asset structure.&quot;; _newline      strErrMesg=strErrMesg + strErrMesgLocal + &quot;\r&quot;; _newline      arrListOfProdFeasib[i]=arrListOfProdFeasib[i] + &quot;\r&quot; + strErrMesgLocal; _newline     } _newline    } _newline    else if(&quot;Delete&quot;==arrListOfAction[i]) _newline    {//must exist in asset check one by one and set error _newline     bcAsset.ClearToQuery(); _newline     bcAsset.SetSearchExpr(&quot;[Root Asset Id]=&apos;&quot; + strRootAssetId + &quot;&apos; AND [Status]&lt;&gt;&apos;Inactive&apos; AND [Product Name]=&apos;&quot; + arrListOfProd[i] + &quot;&apos;&quot;); _newline     bcAsset.ExecuteQuery(ForwardOnly); _newline     isRec=bcAsset.FirstRecord(); _newline     if(!isRec) _newline     { _newline      strErrCode=&quot;PRODUCT_usERROR&quot;; _newline      strErrMesgLocal = &quot;Product [&quot; + arrListOfProd[i] + &quot;] to delete, not in asset structure.&quot;; _newline      strErrMesg=strErrMesg + strErrMesgLocal + &quot;\r&quot;; _newline      arrListOfProdFeasib[i]=arrListOfProdFeasib[i] + &quot;\r&quot; + strErrMesgLocal; _newline     } _newline    } _newline   } _newline  } _newline  for(i=0; i&lt;arrListOfProd.length; i++) _newline   Outputs.SetProperty(&quot;prod_usfeasibility_us&quot; + i, arrListOfProdFeasib[i]); _newline//now process order _newline  if(&quot;OK&quot;==strErrCode) _newline  { _newline//create order _newline   psIp = TheApplication().NewPropertySet(); _newline   psOp = TheApplication().NewPropertySet(); _newline   psIp.SetProperty(&quot;AssetIntegrationId&quot;, strAssetIntegId); _newline   psIp.SetProperty(&quot;AccountId&quot;,strAccntId); _newline   psIp.SetProperty(&quot;ProcessName&quot;, &quot;SISOMModifyWebService-Order&quot;); _newline   bsUtil.InvokeMethod(&quot;RunProcess&quot;, psIp, psOp); _newline   strOrderId=psOp.GetProperty(&quot;ActiveDocumentId&quot;); _newline   if(&quot;&quot;!=strOrderId) _newline   { _newline    boOrder=TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;); _newline    bcOrder=boOrder.GetBusComp(&quot;Order Entry - Orders&quot;); _newline    bcOrder.SetViewMode(AllView); _newline    bcOrder.ActivateField(&quot;Back Office Order Number&quot;); _newline    bcOrder.ActivateField(&quot;Billing Profile Id&quot;); _newline    //bcOrder.ActivateField(&quot;Charged Flag&quot;); //Commented by AMITB for Paid Flag removal_newline    bcOrder.ClearToQuery(); _newline    bcOrder.SetSearchExpr(&quot;[Id]=&apos;&quot; + strOrderId + &quot;&apos;&quot;); _newline    bcOrder.ExecuteQuery(ForwardOnly); _newline    if(bcOrder.FirstRecord()) _newline    { _newline     if(&quot;&quot;!=strExtRefId) _newline      bcOrder.SetFieldValue(&quot;Back Office Order Number&quot;,strExtRefId); _newline     bcOrder.SetFieldValue(&quot;Contact Id&quot;,strContactId); _newline     bcOrder.SetFieldValue(&quot;Billing Profile Id&quot;,strCIPId);//Charged Flag=Y for submit _newline     //bcOrder.SetFieldValue(&quot;Charged Flag&quot;,&quot;Y&quot;);//Commented by AMITB for Paid Flag removal_newline     bcOrder.WriteRecord(); _newline//work on OLI _newline     bcOLI=boOrder.GetBusComp(&quot;Order Entry - Line Items&quot;); _newline     bcOLI.SetViewMode(AllView); _newline     bcOLI.ActivateField(&quot;Product&quot;); _newline     bcOLI.ActivateField(&quot;Action Code&quot;); _newline//get rowid of the root OLI for the asset integid specified, to be returned in the output _newline     bcOLI.ClearToQuery(); _newline     bcOLI.SetSearchExpr(&quot;[Asset Integration Id]=&apos;&quot; + strAssetIntegId + &quot;&apos;&quot;); _newline     bcOLI.ExecuteQuery(ForwardOnly); _newline     isRec=bcOLI.FirstRecord(); _newline     if(isRec) _newline      strRootOLIIdInNewOrder=bcOLI.GetFieldValue(&quot;Id&quot;); _newline//delete first _newline     for(var i=0; i &lt; arrListOfProd.length; i++) _newline     { _newline      if(&quot;&quot;==arrListOfProdFeasib[i] &amp;&amp; &quot;Delete&quot;==arrListOfAction[i]) _newline      { _newline       bcOLI.ClearToQuery(); _newline       bcOLI.SetSearchExpr(&quot;[Root Asset Integration Id]=&apos;&quot; + strAssetIntegId + &quot;&apos; AND [Product]=&apos;&quot; + arrListOfProd[i] + &quot;&apos;&quot;); _newline       bcOLI.ExecuteQuery(ForwardOnly); _newline       isRec=bcOLI.FirstRecord(); _newline// ARPANC : Fixed issue with infinite loop _newline       while(isRec) _newline        { _newline         bcOLI.SetFieldValue(&quot;Action Code&quot;,&quot;Delete&quot;); _newline         bcOLI.WriteRecord(); _newline         isRec=bcOLI.NextRecord(); _newline        } _newline      } _newline     } _newline//add next _newline     for(var i=0; i &lt; arrListOfProd.length; i++) _newline     { _newline      if(&quot;&quot;==arrListOfProdFeasib[i] &amp;&amp; &quot;Add&quot;==arrListOfAction[i]) _newline      { _newline       bcOLI.NewRecord(NewAfter); _newline       bcPick = bcOLI.GetPicklistBusComp(&quot;Product&quot;); _newline       bcPick.SetViewMode(AllView); _newline       bcPick.ClearToQuery(); _newline       bcPick.SetSearchExpr(&quot;[Name]=&apos;&quot; + arrListOfProd[i] + &quot;&apos;&quot;); _newline       bcPick.ExecuteQuery(ForwardOnly); _newline       if(bcPick.FirstRecord()) _newline       { _newline        bcPick.Pick(); _newline        bcOLI.SetFieldValue(&quot;Action Code&quot;,&quot;Add&quot;); _newline  bcOLI.SetFieldValue(&quot;Service Id&quot;, strAssetNumber); _newline        bcOLI.WriteRecord(); _newline        strTBDOLIId=bcOLI.GetFieldValue(&quot;Id&quot;); _newline        if(&quot;OK&quot; != func_usPositionNewLineItemInOLITree(strOrderId,strTBDOLIId,arrListOfParProd[i],arrListOfProdItemId[i],arrListOfProductPortId[i])) _newline        { _newline         strErrCode=&quot;ERR&quot;; _newline         strErrMesg=strErrMesg+&quot;Product &quot; + arrListOfProd[i] + &quot; could not be set in the asset hierarchy.\r&quot;; _newline        } _newline       } _newline       else _newline       { _newline        strErrCode=&quot;ERR&quot;; _newline        strErrMesg=strErrMesg + &quot;Product &quot; + strProductName + &quot; could not be set on new OLI.\r&quot;; _newline        bcOLI.UndoRecord(); _newline       } _newline      } _newline     } _newline//now submit if specified in inputs _newline     if(&quot;Y&quot;==strDoSubmit) _newline     { _newline   //bcOrder.SetFieldValue(&quot;Charged Flag&quot;,&quot;Y&quot;); //Commented by AMITB for Paid Flag removal_newline      psIp = TheApplication().NewPropertySet(); _newline      psOp = TheApplication().NewPropertySet(); _newline      psIp.SetProperty(&quot;RowId&quot;, strOrderId); _newline      psIp.SetProperty(&quot;Fulfillment Mode&quot;,&quot;Deliver&quot;); _newline   psIp.SetProperty(&quot;CancelOrderFlg&quot;, strOrderValid);_newline   psIp.SetProperty(&quot;SetPrimaryMSISDN&quot;, strPrimaryMSN);_newline   if(stByPassValidation==&quot;Y&quot;)_newline   psIp.SetProperty(&quot;VFQAByPassValidationFlag&quot;, stByPassValidation);_newline      psIp.SetProperty(&quot;ProcessName&quot;, &quot;SISOMBillingSubmitOrderWebService&quot;); _newline      bsUtil.InvokeMethod(&quot;RunProcess&quot;, psIp, psOp); _newline     } _newline if(&quot;AutoAsset&quot;==strDoSubmit) //NandeeshS Added for Auto complete &amp; Asset_newline_newline{_newline_newlineInputs.SetProperty(&quot;RowId&quot;, strOrderId);_newline_newlinefunc_usAutoAsset(Inputs, Outputs);_newline_newline} //NandeeshS Ended_newline    } _newline   } _newline  } _newline } _newline  //Outputs.SetProperty(&quot;Order Submit Error&quot;,psOp.GetProperty(&quot;Error Message&quot;));_newline Outputs.SetProperty(&quot;Error Code&quot;,strErrCode); _newline Outputs.SetProperty(&quot;Error Message&quot;,strErrMesg); _newline Outputs.SetProperty(&quot;Order Id&quot;,strOrderId); _newline Outputs.SetProperty(&quot;Root Order Item Id&quot;,strRootOLIIdInNewOrder); _newline bcAsset  = null; _newline boAsset  = null; _newline bcPick   = null; _newline bcOLI    = null; _newline bcOrder  = null; _newline boOrder  = null; _newline psIp     = null; _newline psOp     = null; _newline bsUtil   = null; _newline return CancelOperation; _newline}"
 Program_spcLanguage="JS"
 Name="func_usCreateModifyOrderGeneric"
 Sequence="15"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function func_usCreateOLIfromAssets(orderId,rootAssetId,promAssetId)_newline{_newline//queries asset as a IO, transforms into Order-&gt;OLI IO using a data map and then upserts_newline//enhanced to fetch the promotion asset also. Do we need to bring in other root assets if any under the common promotion? - Not for NOW_newline var psInp1:PropertySet = TheApplication().NewPropertySet();_newline var psInp2:PropertySet = TheApplication().NewPropertySet();_newline var psInp3:PropertySet = TheApplication().NewPropertySet();_newline var psOp:PropertySet  = TheApplication().NewPropertySet();_newline// psInp1.SetProperty(&quot;PrimaryRowId&quot;,        rootAssetId);_newline if(&quot;&quot;!=promAssetId)_newline  psInp1.SetProperty(&quot;SearchSpec&quot;, &quot;[Line Item.Status]=&apos;Active&apos; AND ([Header.Id]=&apos;&quot; + rootAssetId + &quot;&apos; OR [Header.Id]=&apos;&quot; + promAssetId + &quot;&apos;)&quot;);_newline else_newline  psInp1.SetProperty(&quot;SearchSpec&quot;, &quot;[Line Item.Status]=&apos;Active&apos; AND [Header.Id]=&apos;&quot; + rootAssetId + &quot;&apos;&quot;);_newline psInp1.SetProperty(&quot;OutputIntObjectName&quot;, &quot;SIS OM Asset&quot;);_newline var bsPMT:Service = TheApplication().GetService(&quot;EAI Siebel Adapter&quot;);_newline bsPMT.InvokeMethod(&quot;Query&quot;, psInp1, psOp);_newline_newline psInp2 = psOp.Copy();_newline psInp2.SetProperty(&quot;MapName&quot;,  &quot;SISOMPMTMap&quot;);_newline psInp2.SetProperty(&quot;Order Id&quot;, orderId);_newline psOp   = TheApplication().NewPropertySet();_newline bsPMT  = TheApplication().GetService(&quot;EAI Data Transformation Engine&quot;);_newline bsPMT.InvokeMethod(&quot;Execute&quot;, psInp2, psOp);_newline_newline psInp3 = psOp.Copy();_newline psOp   = TheApplication().NewPropertySet();_newline bsPMT  = TheApplication().GetService(&quot;EAI Siebel Adapter&quot;);_newline bsPMT.InvokeMethod(&quot;Upsert&quot;, psInp3, psOp);_newline_newline bsPMT  = null;_newline psInp1 = null;_newline psInp2 = null;_newline psInp3 = null;_newline psOp   = null;_newline return;_newline}"
 Program_spcLanguage="JS"
 Name="func_usCreateOLIfromAssets"
 Sequence="16"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function func_usCreateTicket(Inputs,Outputs) _newline{//mandatory inputs: TicketScenario, RefNumber _newline var strErrCode = &quot;OK&quot;; _newline var strErrMesg = &quot;&quot;; _newline var strSRId    = &quot;&quot;; _newline var strTicketScenario = Inputs.GetProperty(&quot;TicketScenario&quot;); _newline var strRefNumber      = Inputs.GetProperty(&quot;Ext Ref Id&quot;); _newline var strAccountId   = Inputs.GetProperty(&quot;Account Id&quot;);  _newline var strProductId   = Inputs.GetProperty(&quot;Product Id&quot;);  _newline var strAssetId     = Inputs.GetProperty(&quot;Root Asset Id&quot;);  _newline if(&quot;&quot;==strAssetId) strAssetId = Inputs.GetProperty(&quot;Asset Id&quot;);  _newline var strMSISDN      = Inputs.GetProperty(&quot;MSISDN&quot;);  _newline var boSR, bcSR;_newline boSR = TheApplication().GetBusObject(&quot;Service Request&quot;); _newline bcSR = boSR.GetBusComp(&quot;Service Request&quot;); _newline bcSR.SetViewMode(AllView); _newline bcSR.ActivateMultipleFields(func_usMultiFields(&quot;Service Request&quot;));_newline if(&quot;TT_usSTAR_usDISCONNECT&quot; == strTicketScenario) _newline { _newline/* _newlineMandatory inputs: MSISDN, Account Id, Product Id _newline_newlinesimply create a SR for the Disconnection EDR for a star number customer _newline------------------------------------------------------ _newlineXML Tag:SR BC Field:Sample _newline------------------------------------------------------ _newlineAbstract:Abstract:This is a STAR number _newlineAccountId:Account Id:1-UCD1I _newlineArea:Area:AIA _newlineDescription:Description:This is a STAR Number.Customer has not recharged for last 180 days and hence is the MSISDN is due for disconnect. Please contact customer and inform him to recharge or his Star number will be disconnected. _newlineIntegrationId:Integration Id:248274651 _newlineOwner:Owner:SADMIN _newlinePriority:Priority:1 _newlineProductId:Product Id:1-H7XJ _newlineSerialNumber:Serial Number:97477750887 _newlineSeverity:Severity:1 _newlineSource:Source:AIA _newlineStatus:Status:Not Solved _newlineSub-AreaNoConstrain:Sub-Area No Constrain:0 _newlineSub-Status:Sub-Status:First Escalation _newlineTicketType:Ticket Type:Customer Trouble Ticket _newline*/ _newline  var strDescr     = &quot;This is a STAR Number.Customer has not recharged for last 180 days and hence is the MSISDN is due for disconnect. &quot;; _newline  strDescr         = strDescr + &quot;Please contact customer and inform him to recharge or his Star number will be disconnected.&quot;; _newline  bcSR.ClearToQuery(); _newline  bcSR.SetSearchExpr(&quot;[Account Id]=&apos;&quot; + strAccountId + &quot;&apos; AND [Integration Id]=&apos;&quot; + strRefNumber + &quot;&apos;&quot;); _newline  bcSR.ExecuteQuery(ForwardOnly); _newline  if(!bcSR.FirstRecord()) _newline  { _newline   bcSR.NewRecord(NewAfter); _newline   bcSR.SetFieldValue(&quot;Description&quot;,    strDescr); _newline   bcSR.SetFieldValue(&quot;Integration Id&quot;, strRefNumber); _newline   bcSR.SetFieldValue(&quot;Account Id&quot;,     strAccountId); _newline   var bcAssetPick:BusComp = bcSR.GetPicklistBusComp(&quot;Serial Number&quot;); _newline   bcAssetPick.SetViewMode(AllView); _newline   bcAssetPick.ClearToQuery(); _newline   bcAssetPick.SetSearchExpr(&quot;[Serial Number]=&apos;&quot; + strMSISDN + &quot;&apos; AND [Parent Asset Id] IS NULL&quot;); _newline   bcAssetPick.ExecuteQuery(ForwardOnly); _newline   if(bcAssetPick.FirstRecord()) _newline   { _newline    bcAssetPick.Pick(); _newline    bcSR.SetFieldValue(&quot;Area&quot;,           &quot;AIA&quot;); _newline    bcSR.SetFieldValue(&quot;Abstract&quot;,       &quot;This is a STAR number&quot;); _newline    bcSR.SetFieldValue(&quot;Owner&quot;,          &quot;SADMIN&quot;); _newline    bcSR.SetFieldValue(&quot;Priority&quot;,       &quot;1&quot;); _newline    bcSR.SetFieldValue(&quot;Severity&quot;,       &quot;1&quot;); _newline    bcSR.SetFieldValue(&quot;Source&quot;,         &quot;AIA&quot;); _newline    bcSR.SetFieldValue(&quot;Status&quot;,         &quot;Not Solved&quot;); _newline    bcSR.SetFieldValue(&quot;Sub-Status&quot;,     &quot;First Escalation&quot;); _newline    bcSR.SetFieldValue(&quot;Ticket Type&quot;,    &quot;Customer Trouble Ticket&quot;); _newline    bcSR.WriteRecord(); _newline    strSRId = bcSR.GetFieldValue(&quot;Id&quot;); _newline   } _newline   else _newline   { _newline    strErrCode = &quot;ASSET_usPICK_usFAILED&quot;; _newline    strErrMesg = &quot;Asset for &quot; + strMSISDN + &quot; could not be selected for the SR.&quot;; _newline   } _newline  } _newline  else _newline  { _newline   strSRId = bcSR.GetFieldValue(&quot;Id&quot;); _newline   strErrCode = &quot;SR_usEXISTS&quot;; _newline   strErrMesg = &quot;SR for the reference number &quot; + strRefNumber + &quot; already exists.&quot;; _newline  } _newline }_newline else if(&quot;SUSPEND_usRESUME&quot; == strTicketScenario)_newline {_newline   bcSR.NewRecord(NewAfter); _newline   bcSR.SetFieldValue(&quot;INS Product&quot;, &quot;Request&quot;); _newline   bcSR.SetFieldValue(&quot;INS Area&quot;, &quot;Service Related&quot;); _newline   bcSR.SetFieldValue(&quot;INS Sub-Area&quot;, &quot;Suspend Resume&quot;); _newline//   bcSR.SetFieldValue(&quot;CEM Planned Start Date&quot;, ); _newline   bcSR.SetFieldValue(&quot;Account Id&quot;, strAccountId); _newline   bcSR.SetFieldValue(&quot;Product Id&quot;, strProductId); _newline   bcSR.SetFieldValue(&quot;Asset Id&quot;, strAssetId); _newline   bcSR.WriteRecord(); _newline   strSRId = bcSR.GetFieldValue(&quot;Id&quot;); _newline }_newline else _newline { _newline  strErrCode = &quot;UNSUPPORTED_usSR_usSCENARIO&quot;; _newline  strErrMesg = &quot;Scenario &quot; + strTicketScenario + &quot; for Service Request process is not supported.&quot;; _newline }_newline Outputs.SetProperty(&quot;Error Code&quot;,    strErrCode); _newline Outputs.SetProperty(&quot;Error Message&quot;, strErrMesg); _newline Outputs.SetProperty(&quot;SR Id&quot;,         strSRId); _newline boSR = null;_newline bcSR = null;_newline return CancelOperation; _newline}"
 Program_spcLanguage="JS"
 Name="func_usCreateTicket"
 Sequence="17"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function func_usDisconnectOrder(Inputs, Outputs)_newline{_newline//this will fetch in the non-Promotion root asset id reference_newline//find the parent promotion if any_newline//if there is no other peer asset under the parent promotion, then include the promotion asset also for disconnection_newline var strOrderId=&quot;&quot;;_newline var strErrCode=&quot;OK&quot;;_newline var strErrMesg=&quot;&quot;;_newline var strAssetIntegId = Inputs.GetProperty(&quot;Integration Id&quot;);//rowid:1-UITVX, integid:1-UIS3O_newline var strAccntId = Inputs.GetProperty(&quot;Account Id&quot;);         //1-4HLIH_newline var strConId = Inputs.GetProperty(&quot;Contact Id&quot;);           //1-4HL8V_newline var strCIPId = Inputs.GetProperty(&quot;Billing Profile Id&quot;);   //1-4HLJV_newline var strExtRef= Inputs.GetProperty(&quot;Ext Ref Id&quot;);           //test_newline var strDiscReason= Inputs.GetProperty(&quot;Reason&quot;);_newline var strRelatedAssetIntegIdList=&quot;&quot;;_newline var bcAsset,boAsset,arrIntegList;_newline var psIp,psOp,boOrder,bcOrder,bcOLI,bsUtil,isRec;_newline try_newline {_newline  boAsset = TheApplication().GetBusObject(&quot;Asset Management&quot;);_newline  bcAsset = boAsset.GetBusComp(&quot;Asset Mgmt - Asset&quot;);_newline  bcAsset.ActivateField(&quot;Integration Id&quot;);_newline  bcAsset.SetViewMode(AllView);_newline  bcAsset.ClearToQuery();_newline  bcAsset.SetSearchExpr(&quot;[Prod Prom Instance Id]=&apos;&quot; + strAssetIntegId + &quot;&apos;&quot;);_newline  bcAsset.ExecuteQuery(ForwardOnly);_newline  isRec=bcAsset.FirstRecord();_newline  while(isRec)_newline  {_newline   strRelatedAssetIntegIdList=strRelatedAssetIntegIdList + bcAsset.GetFieldValue(&quot;Integration Id&quot;) + &quot;;&quot;;_newline   isRec=bcAsset.NextRecord();_newline  }_newline_newline  psIp = TheApplication().NewPropertySet();_newline  psOp = TheApplication().NewPropertySet();_newline  bsUtil = TheApplication().GetService(&quot;Workflow Process Manager&quot;);_newline  psIp.SetProperty(&quot;AccountId&quot;, strAccntId);_newline  psIp.SetProperty(&quot;ProcessName&quot;, &quot;SISOMDisconnectWebService-Order&quot;);_newline  psIp.SetProperty(&quot;AssetIntegrationId&quot;, strAssetIntegId);_newline  bsUtil.InvokeMethod(&quot;RunProcess&quot;, psIp, psOp);_newline  strOrderId = psOp.GetProperty(&quot;ActiveDocumentId&quot;);_newline//call it on other related RCP assets also if any_newline  if(&quot;&quot;!=strRelatedAssetIntegIdList)_newline  {_newline   arrIntegList=strRelatedAssetIntegIdList.split(&quot;;&quot;);_newline   for(var i=0;i&lt;arrIntegList.length;i++)_newline   {_newline    if(&quot;&quot;!=arrIntegList[i])_newline    {_newline     psIp = TheApplication().NewPropertySet();_newline     psIp.GetProperty(&quot;ActiveDocumentId&quot;,strOrderId);_newline     psIp.SetProperty(&quot;AccountId&quot;, strAccntId);_newline     psIp.SetProperty(&quot;ProcessName&quot;, &quot;SISOMDisconnectWebService-Order&quot;);_newline     psIp.SetProperty(&quot;AssetIntegrationId&quot;, arrIntegList[i]);_newline     psOp = TheApplication().NewPropertySet();_newline     bsUtil.InvokeMethod(&quot;RunProcess&quot;, psIp, psOp);_newline    }_newline   }_newline  }_newline  if(&quot;&quot;!=strOrderId)_newline  {_newline   boOrder = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);_newline   bcOrder = boOrder.GetBusComp(&quot;Order Entry - Orders&quot;);_newline   bcOrder.SetViewMode(AllView);_newline   bcOrder.ActivateField(&quot;Contact Id&quot;);_newline   bcOrder.ActivateField(&quot;Billing Profile Id&quot;);_newline   bcOrder.ActivateField(&quot;Cancel Reason&quot;);_newline   bcOrder.InvokeMethod(&quot;SetAdminMode&quot;, &quot;TRUE&quot;);_newline   bcOrder.ClearToQuery();_newline   bcOrder.SetSearchExpr(&quot;[Id]=&apos;&quot; + strOrderId + &quot;&apos;&quot;);_newline   bcOrder.ExecuteQuery(ForwardOnly);_newline   if(bcOrder.FirstRecord())_newline   {_newline//set fields on order_newline    bcOrder.SetFieldValue(&quot;Contact Id&quot;,         strConId);_newline    bcOrder.SetFieldValue(&quot;Billing Profile Id&quot;, strCIPId);_newline    bcOrder.SetFieldValue(&quot;Cancel Reason&quot;, strDiscReason);_newline    bcOrder.WriteRecord();_newline    if(&quot;&quot;!=strDiscReason)_newline    {_newline//set Cancel Reason on the root OLI_newline     bcOLI   = boOrder.GetBusComp(&quot;Order Entry - Line Items&quot;);_newline     bcOLI.SetViewMode(AllView);_newline     bcOLI.InvokeMethod(&quot;SetAdminMode&quot;, &quot;TRUE&quot;);_newline     bcOLI.ActivateField(&quot;Cancel Reason&quot;);_newline     bcOLI.ClearToQuery();_newline     bcOLI.SetSearchExpr(&quot;[Parent Order Item Id] IS NULL&quot;);_newline     bcOLI.ExecuteQuery(ForwardOnly);_newline     isRec = bcOLI.FirstRecord();_newline     while(isRec)_newline     {_newline      bcOLI.SetFieldValue(&quot;Cancel Reason&quot;,strDiscReason);_newline      bcOLI.WriteRecord();_newline      isRec = bcOLI.NextRecord();_newline     }_newline    }_newline//submit the order_newline    bsUtil = TheApplication().GetService(&quot;Workflow Process Manager&quot;);_newline    psIp = TheApplication().NewPropertySet(); _newline    psOp = TheApplication().NewPropertySet();_newline    psIp.SetProperty(&quot;RowId&quot;, strOrderId);_newline    psIp.SetProperty(&quot;ProcessName&quot;, &quot;SISOMBillingSubmitOrderWebService&quot;);_newline    bsUtil.InvokeMethod(&quot;RunProcess&quot;, psIp, psOp);_newline    strErrCode = &quot;OK&quot;;_newline    strErrMesg = &quot;Order submitted.&quot;;_newline   }_newline  }_newline }_newline catch(e)_newline {_newline  strErrCode = &quot;DISCONNECT_usERR&quot;;_newline  strErrMesg = e.errCode + &quot;:&quot; + e.errText;_newline }_newline bsUtil=null;_newline psIp=null;_newline psOp=null;_newline bcOLI=null;_newline bcOrder=null;_newline boOrder=null;_newline bcAsset=null;_newline boAsset=null;_newline Outputs.SetProperty(&quot;OrderId&quot;,strOrderId)_newline Outputs.SetProperty(&quot;Error Code&quot;,strErrCode)_newline Outputs.SetProperty(&quot;Error Message&quot;,strErrMesg)_newline return CancelOperation;_newline}"
 Program_spcLanguage="JS"
 Name="func_usDisconnectOrder"
 Sequence="18"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function func_usGetAccountType(Inputs,Outputs)_newline{_newline var strMSISDN  = Inputs.GetProperty(&quot;MSISDN&quot;);_newline var strAccId = &quot;&quot;;_newline Outputs.SetProperty(&quot;Error Code&quot;,    &quot;OK&quot;);_newline Outputs.SetProperty(&quot;Error Message&quot;, &quot;&quot;);_newline Outputs.SetProperty(&quot;Root Asset Id&quot;, &quot;&quot;);_newline Outputs.SetProperty(&quot;Root Product&quot;,  &quot;&quot;);_newline Outputs.SetProperty(&quot;Account Id&quot;,    &quot;&quot;);_newline Outputs.SetProperty(&quot;Service Account Id&quot;,   &quot;&quot;);_newline var strRootAssetId    = &quot;&quot;;_newline var boAsset:BusObject   = TheApplication().GetBusObject(&quot;Asset Management&quot;);_newline var bcAsset:BusComp     = boAsset.GetBusComp(&quot;Asset Mgmt - Asset&quot;);_newline bcAsset.ActivateField(&quot;Service Account Id&quot;);_newline bcAsset.SetViewMode(AllView);_newline bcAsset.ClearToQuery();_newline bcAsset.SetSearchExpr(&quot;[Serial Number]=&apos;&quot; + strMSISDN + &quot;&apos; AND [Status]=&apos;Active&apos; AND [Parent Asset Id] IS NULL&quot;);_newline bcAsset.ExecuteQuery(ForwardOnly);_newline if(bcAsset.FirstRecord())_newline  {_newline  strRootAssetId = bcAsset.GetFieldValue(&quot;Id&quot;);_newline  strAccId = bcAsset.GetFieldValue(&quot;Service Account Id&quot;);_newline //TheApplication().RaiseErrorText(&quot;Message&quot; + strAccId);_newline  var boAccount:BusObject   = TheApplication().GetBusObject(&quot;Account&quot;);_newline  var bcAccount:BusComp   = boAccount.GetBusComp(&quot;Account&quot;);//child assets_newline  bcAccount.ActivateField(&quot;Payment Type&quot;);_newline  bcAccount.SetViewMode(AllView);_newline  bcAccount.ClearToQuery();_newline  bcAccount.SetSearchExpr(&quot;[Id]=&apos;&quot; + strAccId + &quot;&apos; AND [Payment Type] = &apos;Prepaid&apos;&quot;);_newline  bcAccount.ExecuteQuery(ForwardOnly);_newline  _newline if(bcAccount.FirstRecord()) _newline{ _newline  var strAccType = &quot;Prepaid&quot;;_newline  //TheApplication().RaiseErrorText(&quot;Message&quot; + strAccType);_newline    Outputs.SetProperty(&quot;Account Type&quot;,    strAccType);_newline  _newline// else_newline   //var strAccType = &apos;Postpaid&apos;;_newline}_newlineelse_newline{_newline   var strAccType = &apos;Postpaid&apos;;_newline    Outputs.SetProperty(&quot;Account Type&quot;,    strAccType); _newline}_newline }_newline bcAsset=null;_newline boAsset=null;_newlineboAccount = null;_newlinebcAccount = null;_newline}"
 Program_spcLanguage="JS"
 Name="func_usGetAccountType"
 Sequence="19"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function func_usGetAssetForMSISDN(Inputs,Outputs)_newline{_newline var strMSISDN  = Inputs.GetProperty(&quot;MSISDN&quot;);_newline var strAccId = &quot;&quot;, prodFound=false;_newline var strRecordType  = Inputs.GetProperty(&quot;RecordType&quot;);_newline Outputs.SetProperty(&quot;Parent Product Name&quot;, &quot;&quot;);//EDRs like 1,2_newline Outputs.SetProperty(&quot;Error Code&quot;,    &quot;OK&quot;);_newline Outputs.SetProperty(&quot;Error Message&quot;, &quot;&quot;);_newline Outputs.SetProperty(&quot;Root Asset Id&quot;, &quot;&quot;);_newline Outputs.SetProperty(&quot;Root Product&quot;,  &quot;&quot;);_newline Outputs.SetProperty(&quot;Account Id&quot;,    &quot;&quot;);_newline Outputs.SetProperty(&quot;Service Account Id&quot;,   &quot;&quot;);_newline Outputs.SetProperty(&quot;Billing Account Id&quot;,   &quot;&quot;);_newline Outputs.SetProperty(&quot;Billing Profile Id&quot;,   &quot;&quot;);_newline Outputs.SetProperty(&quot;Asset Integration Id&quot;, &quot;&quot;);_newline var strProdPromInstId= &quot;&quot;;_newline var strRootAssetId   = &quot;&quot;;_newline var boAsset, bcAsset, bcAXA, boProd1, bcProd1, bcProdRel1,boCIP,bcCIP;_newline var strPlanAssetId    = &quot;&quot;, strParentAssetProdName  = &quot;&quot;, strCIPId=&quot;&quot;, strPayProId=&quot;&quot;,strPayProPayMeth=&quot;&quot;;_newline boAsset = TheApplication().GetBusObject(&quot;Asset Management&quot;);_newline bcAsset = boAsset.GetBusComp(&quot;Asset Mgmt - Asset&quot;);_newline bcAsset.ActivateField(&quot;Prod Prom Instance Id&quot;);_newline bcAsset.ActivateField(&quot;Product Name&quot;);_newline bcAsset.ActivateField(&quot;Integration Id&quot;);_newline bcAsset.ActivateField(&quot;Owner Account Id&quot;);_newline bcAsset.ActivateField(&quot;Service Account Id&quot;);_newline bcAsset.ActivateField(&quot;Billing Account Id&quot;);_newline bcAsset.ActivateField(&quot;Billing Profile Id&quot;);_newline bcAsset.ActivateField(&quot;Payment Type&quot;);_newline bcAsset.ActivateField(&quot;Type&quot;);//this stores Commit Plan, Service Plan etc_newline bcAsset.SetViewMode(AllView);_newline bcAsset.ClearToQuery();_newline bcAsset.SetSearchExpr(&quot;[Serial Number]=&apos;&quot; + strMSISDN + &quot;&apos; AND [Status]=&apos;Active&apos; AND [Parent Asset Id] IS NULL AND [Product Type]&lt;&gt;&apos;Promotion&apos;&quot;);_newline bcAsset.ExecuteQuery(ForwardOnly);_newline if(!bcAsset.FirstRecord())//asset not found, return error_newline {_newline  Outputs.SetProperty(&quot;Error Code&quot;,    &quot;ROOT_usASSET_usNOT_usFOUND&quot;)_newline  Outputs.SetProperty(&quot;Error Message&quot;, &quot;Asset with MSISDN &quot; + strMSISDN + &quot; not found in Active status.&quot;)_newline }_newline else_newline {_newline  strRootAssetId = bcAsset.GetFieldValue(&quot;Id&quot;);_newline  strProdPromInstId = bcAsset.GetFieldValue(&quot;Prod Prom Instance Id&quot;);//can be null_newline  Outputs.SetProperty(&quot;Root Asset Id&quot;,         strRootAssetId);_newline  Outputs.SetProperty(&quot;Prod Prom Instance Id&quot;, strProdPromInstId);_newline  Outputs.SetProperty(&quot;Root Product&quot;,          bcAsset.GetFieldValue(&quot;Product Name&quot;));_newline  Outputs.SetProperty(&quot;Account Id&quot;,            bcAsset.GetFieldValue(&quot;Owner Account Id&quot;));_newline  Outputs.SetProperty(&quot;Service Account Id&quot;,    bcAsset.GetFieldValue(&quot;Service Account Id&quot;));_newline  Outputs.SetProperty(&quot;Billing Account Id&quot;,    bcAsset.GetFieldValue(&quot;Billing Account Id&quot;));_newline  strCIPId = bcAsset.GetFieldValue(&quot;Billing Profile Id&quot;);_newline  Outputs.SetProperty(&quot;Billing Profile Id&quot;,    strCIPId);_newline  Outputs.SetProperty(&quot;Asset Integration Id&quot;,  bcAsset.GetFieldValue(&quot;Integration Id&quot;));_newline//get PayProfile id Stored at CIP_newline  if(&quot;&quot;!=strCIPId)_newline  {_newline   boCIP = TheApplication().GetBusObject(&quot;Com Invoice Profile&quot;);_newline   bcCIP = boCIP.GetBusComp(&quot;Com Invoice Profile&quot;);_newline   bcCIP.SetViewMode(AllView);_newline   bcCIP.ActivateField(&quot;Payment Profile&quot;);_newline   bcCIP.ActivateField(&quot;Payment Method&quot;);_newline   bcCIP.ClearToQuery();_newline   bcCIP.SetSearchExpr(&quot;[Id]=&apos;&quot; + strCIPId + &quot;&apos;&quot;);_newline   bcCIP.ExecuteQuery(ForwardOnly);_newline   if(bcCIP.FirstRecord())_newline   {_newline    strPayProId = bcCIP.GetFieldValue(&quot;Payment Profile&quot;);_newline    strPayProPayMeth = bcCIP.GetFieldValue(&quot;Payment Method&quot;);_newline    Outputs.SetProperty(&quot;Payment Profile Id&quot;, strPayProId);_newline    Outputs.SetProperty(&quot;Payment Method&quot;,     strPayProPayMeth);_newline   }_newline  }_newline//requery to find the prepaid postpaid_newline  var strAccType = &quot;&quot;;_newline  var strProdName = Inputs.GetProperty(&quot;Product Name&quot;);_newline  bcAsset.ClearToQuery();_newline  bcAsset.SetSearchExpr(&quot;[Root Asset Id]=&apos;&quot; + strRootAssetId + &quot;&apos; AND [Status]=&apos;Active&apos; AND [Product Name]=&apos;&quot; + strProdName + &quot;&apos;&quot;);_newline  bcAsset.ExecuteQuery(ForwardOnly);_newline  prodFound = bcAsset.FirstRecord();_newline  if(prodFound)_newline  {//find prepaid or postpaid based on given product_newline   strAccType = bcAsset.GetFieldValue(&quot;Payment Type&quot;);_newline   Outputs.SetProperty(&quot;PaymentType&quot;, strAccType);_newline//Find attribute &apos;Number Type&apos;_newline   bcAXA = boAsset.GetBusComp(&quot;Asset Mgmt - Asset XA&quot;);_newline   bcAXA.SetViewMode(AllView);_newline   bcAXA.ActivateField(&quot;Value&quot;);_newline   bcAXA.ClearToQuery();_newline   bcAXA.SetSearchExpr(&quot;[Name]=&apos;Number Type&apos;&quot;);_newline   bcAXA.ExecuteQuery(ForwardOnly);_newline   if(bcAXA.FirstRecord())_newline    Outputs.SetProperty(&quot;NumberType&quot;, bcAXA.GetFieldValue(&quot;Value&quot;));_newline  }_newline//requery to find the promotion asset id_newline  if(&quot;&quot;!=strProdPromInstId)_newline  {_newline   bcAsset.ClearToQuery();_newline   bcAsset.SetSearchExpr(&quot;[Integration Id]=&apos;&quot; + strProdPromInstId + &quot;&apos;&quot;);_newline   bcAsset.ExecuteQuery(ForwardOnly);_newline   if(bcAsset.FirstRecord())//asset not found, return error_newline   {_newline    Outputs.SetProperty(&quot;Promotion Asset Id&quot;, bcAsset.GetFieldValue(&quot;Id&quot;));_newline   }_newline  }_newline  bcAsset=null;_newline  boAsset=null;_newline  if(prodFound &amp;&amp; strAccType == &quot;Prepaid&quot; &amp;&amp; (&quot;PTP-EXPIRE&quot; == strRecordType || &quot;SUB-DELETED&quot;== strRecordType))//delete operation EDRs_newline  {_newline   Outputs.SetProperty(&quot;Product Name&quot;,strProdName);_newline   Outputs.SetProperty(&quot;Error Code&quot;,    &quot;OK&quot;);_newline   Outputs.SetProperty(&quot;Error Message&quot;, &quot;&quot;);_newline  }_newline  else if(strAccType == &quot;Prepaid&quot; &amp;&amp; (&quot;BUCKET-REPLENISHMENT&quot; == strRecordType ||_newline   &quot;ANNIVERSARY&quot; == strRecordType || _newline   &quot;BAL-EXPIRE&quot; == strRecordType || _newline   &quot;THRESHOLD&quot; == strRecordType || _newline   &quot;SUB-DEBT&quot; == strRecordType || _newline   &quot;INSUFFICIENT-BALANCE&quot; == strRecordType))_newline  {_newline  /* if(&quot;Automatic Debit&quot; != strPayProPayMeth &amp;&amp; &quot;Credit Card&quot; != strPayProPayMeth)_newline   {_newline    Outputs.SetProperty(&quot;Error Code&quot;,    &quot;PAYPROFILE_usINVALID&quot;);_newline    Outputs.SetProperty(&quot;Error Message&quot;, &quot;EDR type &quot; + strRecordType + &quot; not permitted with payment method = &quot; + strPayProPayMeth + &quot;, requires Credit Card or Automatic Debit.&quot;);_newline   }_newline   else_newline   {*/_newline//reopen BO and diff BC_newline    boAsset   = TheApplication().GetBusObject(&quot;Asset Management&quot;);_newline    bcAsset   = boAsset.GetBusComp(&quot;Asset Mgmt - Asset - Complex Header&quot;);//child assets_newline    bcAsset.SetViewMode(AllView);//20140603 FIX FOR EDR_newline    bcAsset.ActivateField(&quot;Product Name&quot;);_newline    bcAsset.ActivateField(&quot;Root Asset Id&quot;);_newline    bcAsset.ActivateField(&quot;Parent Asset Id&quot;);_newline    bcAsset.ActivateField(&quot;Product Part Number&quot;);_newline    bcAsset.ActivateField(&quot;Status&quot;);_newline    bcAsset.ActivateField(&quot;Payment Type&quot;);_newline    bcAsset.ActivateField(&quot;Type&quot;);//this stores Commit Plan, Service Plan etc_newline//for certain replenishment types [THRESHOLD, ANNIVERSARY] the product to be added will be different than the product received in EDR_newline//Freedom No Limit [peer] Freedom 4 -&gt; Freedom Replenishment 4: will be existing asset structure_newline//based on Freedom 4 using the related product BC derive the replenishment product, else return error_newline    Outputs.SetProperty(&quot;Error Code&quot;,    &quot;PLAN_usPROD_usNOT_usFOUND&quot;);_newline    Outputs.SetProperty(&quot;Error Message&quot;, &quot;Active asset and/or plan asset for product &quot; + strProdName + &quot; for EDR of type &quot; + strRecordType + &quot; not found.&quot;);_newline    bcAsset.ClearToQuery();_newline    bcAsset.SetSearchExpr(&quot;[Root Asset Id]=&apos;&quot; + strRootAssetId + &quot;&apos; AND [Status]=&apos;Active&apos;  AND [Type]=&apos;Commit Plan&apos;&quot;);//_newline    bcAsset.ExecuteQuery(ForwardOnly);_newline    if(bcAsset.FirstRecord())_newline    {_newline     strPlanAssetId   = bcAsset.GetFieldValue(&quot;Id&quot;);_newline     strParentAssetProdName = bcAsset.GetFieldValue(&quot;Product Name&quot;);_newline     Outputs.SetProperty(&quot;Parent Product Name&quot;, strParentAssetProdName);_newline     boProd1 = TheApplication().GetBusObject(&quot;Admin ISS Product Definition&quot;);_newline     bcProd1 = boProd1.GetBusComp(&quot;Internal Product - ISS Admin&quot;);_newline     bcProd1.SetViewMode(AllView);_newline     bcProd1.ClearToQuery();_newline     bcProd1.SetSearchExpr(&quot;[Name]=&apos;&quot; + strParentAssetProdName + &quot;&apos;&quot;);_newline     bcProd1.ExecuteQuery(ForwardOnly);_newline     if(bcProd1.FirstRecord())_newline     {_newline      bcProdRel1 = boProd1.GetBusComp(&quot;Component Product&quot;);_newline      bcProdRel1.SetViewMode(AllView);_newline      bcProdRel1.ClearToQuery();_newline      bcProdRel1.ExecuteQuery(ForwardOnly);_newline      Outputs.SetProperty(&quot;_usstatus&quot;,&quot;_usentering_uscomponent_ussearch&quot;);_newline      if(bcProdRel1.FirstRecord())_newline      {_newline       Outputs.SetProperty(&quot;Product Name&quot;, bcProdRel1.GetFieldValue(&quot;Name&quot;));//overwrite the //property_newline       Outputs.SetProperty(&quot;Error Code&quot;,    &quot;OK&quot;);_newline       Outputs.SetProperty(&quot;Error Message&quot;, &quot;&quot;);  _newline      }_newline     }_newline    }_newline   }_newlineelse if(&quot;BUCKET-ADD&quot; == strRecordType || &quot;BUCKET-EXPIRE&quot; == strRecordType || &quot;ADMIN-BAR&quot; == strRecordType)_newline{_newline if(&quot;ADMIN-BAR&quot; == strRecordType)_newline{_newline Outputs.SetProperty(&quot;Product Name&quot;,&quot;User Bar - Mobile Admin&quot;);_newline}_newlineelse_newline{_newlineOutputs.SetProperty(&quot;Product Name&quot;,strProdName);_newline}_newlineOutputs.SetProperty(&quot;Parent Product Name&quot;, &quot;Mobile Service Bundle&quot;);_newlineOutputs.SetProperty(&quot;Error Code&quot;,    &quot;OK&quot;);_newline       Outputs.SetProperty(&quot;Error Message&quot;, &quot;&quot;);  _newline}_newline  else_newline  {_newline   //Outputs.SetProperty(&quot;Error Code&quot;,    &quot;UNHANDLED_usEDR&quot;);_newline   //Outputs.SetProperty(&quot;Error Message&quot;, &quot;Type of edr [&quot; + strRecordType + &quot;] not supported and/or not valid for service type: &quot; + strAccType);_newline  }_newline }_newline bcProdRel1 = null;_newline bcProd1 = null;_newline boProd1=null;_newline bcAXA=null;_newline bcAsset=null;_newline boAsset=null;_newline boCIP=null;_newline bcCIP=null;_newline return CancelOperation;_newline}"
 Program_spcLanguage="JS"
 Name="func_usGetAssetForMSISDN"
 Sequence="20"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function func_usGetAssetForMSISDN_usTest(Inputs,Outputs)_newline{_newline var strMSISDN  = Inputs.GetProperty(&quot;MSISDN&quot;);_newline var strAccId = &quot;&quot;, prodFound=false;_newline var strRecordType  = Inputs.GetProperty(&quot;RecordType&quot;);_newline Outputs.SetProperty(&quot;Parent Product Name&quot;, &quot;&quot;);//EDRs like 1,2_newline Outputs.SetProperty(&quot;Error Code&quot;,    &quot;OK&quot;);_newline Outputs.SetProperty(&quot;Error Message&quot;, &quot;&quot;);_newline Outputs.SetProperty(&quot;Root Asset Id&quot;, &quot;&quot;);_newline Outputs.SetProperty(&quot;Root Product&quot;,  &quot;&quot;);_newline Outputs.SetProperty(&quot;Account Id&quot;,    &quot;&quot;);_newline Outputs.SetProperty(&quot;Service Account Id&quot;,   &quot;&quot;);_newline Outputs.SetProperty(&quot;Billing Account Id&quot;,   &quot;&quot;);_newline Outputs.SetProperty(&quot;Billing Profile Id&quot;,   &quot;&quot;);_newline Outputs.SetProperty(&quot;Asset Integration Id&quot;, &quot;&quot;);_newline var strProdPromInstId= &quot;&quot;;_newline var strRootAssetId   = &quot;&quot;;_newline var boAsset, bcAsset, bcAXA, boProd1, bcProd1, bcProdRel1,boCIP,bcCIP;_newline var strPlanAssetId    = &quot;&quot;, strParentAssetProdName  = &quot;&quot;, strCIPId=&quot;&quot;, strPayProId=&quot;&quot;,strPayProPayMeth=&quot;&quot;;_newline boAsset = TheApplication().GetBusObject(&quot;Asset Management&quot;);_newline bcAsset = boAsset.GetBusComp(&quot;Asset Mgmt - Asset&quot;);_newline bcAsset.ActivateField(&quot;Prod Prom Instance Id&quot;);_newline bcAsset.ActivateField(&quot;Product Name&quot;);_newline bcAsset.ActivateField(&quot;Integration Id&quot;);_newline bcAsset.ActivateField(&quot;Owner Account Id&quot;);_newline bcAsset.ActivateField(&quot;Service Account Id&quot;);_newline bcAsset.ActivateField(&quot;Billing Account Id&quot;);_newline bcAsset.ActivateField(&quot;Billing Profile Id&quot;);_newline bcAsset.ActivateField(&quot;Payment Type&quot;);_newline bcAsset.ActivateField(&quot;Type&quot;);//this stores Commit Plan, Service Plan etc_newline bcAsset.SetViewMode(AllView);_newline bcAsset.ClearToQuery();_newline bcAsset.SetSearchExpr(&quot;[Serial Number]=&apos;&quot; + strMSISDN + &quot;&apos; AND [Status]=&apos;Active&apos; AND [Parent Asset Id] IS NULL AND [Product Type]&lt;&gt;&apos;Promotion&apos;&quot;);_newline bcAsset.ExecuteQuery(ForwardOnly);_newline if(!bcAsset.FirstRecord())//asset not found, return error_newline {_newline  Outputs.SetProperty(&quot;Error Code&quot;,    &quot;ROOT_usASSET_usNOT_usFOUND&quot;)_newline  Outputs.SetProperty(&quot;Error Message&quot;, &quot;Asset with MSISDN &quot; + strMSISDN + &quot; not found in Active status.&quot;)_newline }_newline else_newline {_newline  strRootAssetId = bcAsset.GetFieldValue(&quot;Id&quot;);_newline  strProdPromInstId = bcAsset.GetFieldValue(&quot;Prod Prom Instance Id&quot;);//can be null_newline  Outputs.SetProperty(&quot;Root Asset Id&quot;,         strRootAssetId);_newline  Outputs.SetProperty(&quot;Prod Prom Instance Id&quot;, strProdPromInstId);_newline  Outputs.SetProperty(&quot;Root Product&quot;,          bcAsset.GetFieldValue(&quot;Product Name&quot;));_newline  Outputs.SetProperty(&quot;Account Id&quot;,            bcAsset.GetFieldValue(&quot;Owner Account Id&quot;));_newline  Outputs.SetProperty(&quot;Service Account Id&quot;,    bcAsset.GetFieldValue(&quot;Service Account Id&quot;));_newline  Outputs.SetProperty(&quot;Billing Account Id&quot;,    bcAsset.GetFieldValue(&quot;Billing Account Id&quot;));_newline  strCIPId = bcAsset.GetFieldValue(&quot;Billing Profile Id&quot;);_newline  Outputs.SetProperty(&quot;Billing Profile Id&quot;,    strCIPId);_newline  Outputs.SetProperty(&quot;Asset Integration Id&quot;,  bcAsset.GetFieldValue(&quot;Integration Id&quot;));_newline//get PayProfile id Stored at CIP_newline  if(&quot;&quot;!=strCIPId)_newline  {_newline   boCIP = TheApplication().GetBusObject(&quot;Com Invoice Profile&quot;);_newline   bcCIP = boCIP.GetBusComp(&quot;Com Invoice Profile&quot;);_newline   bcCIP.SetViewMode(AllView);_newline   bcCIP.ActivateField(&quot;Payment Profile&quot;);_newline   bcCIP.ActivateField(&quot;Payment Method&quot;);_newline   bcCIP.ClearToQuery();_newline   bcCIP.SetSearchExpr(&quot;[Id]=&apos;&quot; + strCIPId + &quot;&apos;&quot;);_newline   bcCIP.ExecuteQuery(ForwardOnly);_newline   if(bcCIP.FirstRecord())_newline   {_newline    strPayProId = bcCIP.GetFieldValue(&quot;Payment Profile&quot;);_newline    strPayProPayMeth = bcCIP.GetFieldValue(&quot;Payment Method&quot;);_newline    Outputs.SetProperty(&quot;Payment Profile Id&quot;, strPayProId);_newline    Outputs.SetProperty(&quot;Payment Method&quot;,     strPayProPayMeth);_newline   }_newline  }_newline//requery to find the prepaid postpaid_newline  var strAccType = &quot;&quot;;_newline  var strProdName = Inputs.GetProperty(&quot;Product Name&quot;);_newline  bcAsset.ClearToQuery();_newline  bcAsset.SetSearchExpr(&quot;[Root Asset Id]=&apos;&quot; + strRootAssetId + &quot;&apos; AND [Status]=&apos;Active&apos; AND [Product Name]=&apos;&quot; + strProdName + &quot;&apos;&quot;);_newline  bcAsset.ExecuteQuery(ForwardOnly);_newline  prodFound = bcAsset.FirstRecord();_newline  if(prodFound)_newline  {//find prepaid or postpaid based on given product_newline   strAccType = bcAsset.GetFieldValue(&quot;Payment Type&quot;);_newline   Outputs.SetProperty(&quot;PaymentType&quot;, strAccType);_newline//Find attribute &apos;Number Type&apos;_newline   bcAXA = boAsset.GetBusComp(&quot;Asset Mgmt - Asset XA&quot;);_newline   bcAXA.SetViewMode(AllView);_newline   bcAXA.ActivateField(&quot;Value&quot;);_newline   bcAXA.ClearToQuery();_newline   bcAXA.SetSearchExpr(&quot;[Name]=&apos;Number Type&apos;&quot;);_newline   bcAXA.ExecuteQuery(ForwardOnly);_newline   if(bcAXA.FirstRecord())_newline    Outputs.SetProperty(&quot;NumberType&quot;, bcAXA.GetFieldValue(&quot;Value&quot;));_newline  }_newline//requery to find the promotion asset id_newline  if(&quot;&quot;!=strProdPromInstId)_newline  {_newline   bcAsset.ClearToQuery();_newline   bcAsset.SetSearchExpr(&quot;[Integration Id]=&apos;&quot; + strProdPromInstId + &quot;&apos;&quot;);_newline   bcAsset.ExecuteQuery(ForwardOnly);_newline   if(bcAsset.FirstRecord())//asset not found, return error_newline   {_newline    Outputs.SetProperty(&quot;Promotion Asset Id&quot;, bcAsset.GetFieldValue(&quot;Id&quot;));_newline   }_newline  }_newline  bcAsset=null;_newline  boAsset=null;_newline  if(prodFound &amp;&amp; strAccType == &quot;Prepaid&quot; &amp;&amp; (&quot;PTP-EXPIRE&quot; == strRecordType || &quot;SUB-DELETED&quot;== strRecordType))//delete operation EDRs_newline  {_newline   Outputs.SetProperty(&quot;Product Name&quot;,strProdName);_newline   Outputs.SetProperty(&quot;Error Code&quot;,    &quot;OK&quot;);_newline   Outputs.SetProperty(&quot;Error Message&quot;, &quot;&quot;);_newline  }_newline  else if(strAccType == &quot;Prepaid&quot; &amp;&amp; (&quot;BUCKET-REPLENISHMENT&quot; == strRecordType ||_newline   &quot;ANNIVERSARY&quot; == strRecordType || _newline   &quot;BAL-EXPIRE&quot; == strRecordType || _newline   &quot;THRESHOLD&quot; == strRecordType || _newline   &quot;SUB-DEBT&quot; == strRecordType || _newline   &quot;INSUFFICIENT-BALANCE&quot; == strRecordType))_newline  {_newline  /* if(&quot;Automatic Debit&quot; != strPayProPayMeth &amp;&amp; &quot;Credit Card&quot; != strPayProPayMeth)_newline   {_newline    Outputs.SetProperty(&quot;Error Code&quot;,    &quot;PAYPROFILE_usINVALID&quot;);_newline    Outputs.SetProperty(&quot;Error Message&quot;, &quot;EDR type &quot; + strRecordType + &quot; not permitted with payment method = &quot; + strPayProPayMeth + &quot;, requires Credit Card or Automatic Debit.&quot;);_newline   }_newline   else_newline   {*/_newline//reopen BO and diff BC_newline    boAsset   = TheApplication().GetBusObject(&quot;Asset Management&quot;);_newline    bcAsset   = boAsset.GetBusComp(&quot;Asset Mgmt - Asset - Complex Header&quot;);//child assets_newline    bcAsset.SetViewMode(AllView);_newline    bcAsset.ActivateField(&quot;Product Name&quot;);_newline    bcAsset.ActivateField(&quot;Root Asset Id&quot;);_newline    bcAsset.ActivateField(&quot;Parent Asset Id&quot;);_newline    bcAsset.ActivateField(&quot;Product Part Number&quot;);_newline    bcAsset.ActivateField(&quot;Status&quot;);_newline    bcAsset.ActivateField(&quot;Payment Type&quot;);_newline    bcAsset.ActivateField(&quot;Type&quot;);//this stores Commit Plan, Service Plan etc_newline//for certain replenishment types [THRESHOLD, ANNIVERSARY] the product to be added will be different than the product received in EDR_newline//Freedom No Limit [peer] Freedom 4 -&gt; Freedom Replenishment 4: will be existing asset structure_newline//based on Freedom 4 using the related product BC derive the replenishment product, else return error_newline    Outputs.SetProperty(&quot;Error Code&quot;,    &quot;PLAN_usPROD_usNOT_usFOUND&quot;);_newline    Outputs.SetProperty(&quot;Error Message&quot;, &quot;Active asset and/or plan asset for product &quot; + strProdName + &quot; for EDR of type &quot; + strRecordType + &quot; not found.&quot;);_newline    bcAsset.ClearToQuery();_newline bcAsset.SetSearchExpr(&quot;[Root Asset Id]=&apos;&quot; + strRootAssetId + &quot;&apos; AND [Status]=&apos;Active&apos;  AND [Type]=&apos;Commit Plan&apos;&quot;);//_newline    bcAsset.ExecuteQuery(ForwardOnly);_newline    if(bcAsset.FirstRecord())_newline    {_newline    Outputs.SetProperty(&quot;status1&quot;,    &quot;qry1&quot;);_newline     strPlanAssetId   = bcAsset.GetFieldValue(&quot;Id&quot;);_newline     strParentAssetProdName = bcAsset.GetFieldValue(&quot;Product Name&quot;);_newline     Outputs.SetProperty(&quot;Parent Product Name&quot;, strParentAssetProdName);_newline     boProd1 = TheApplication().GetBusObject(&quot;Admin ISS Product Definition&quot;);_newline     bcProd1 = boProd1.GetBusComp(&quot;Internal Product - ISS Admin&quot;);_newline     bcProd1.SetViewMode(AllView);_newline     bcProd1.ClearToQuery();_newline     bcProd1.SetSearchExpr(&quot;[Name]=&apos;&quot; + strParentAssetProdName + &quot;&apos;&quot;);_newline     bcProd1.ExecuteQuery(ForwardOnly);_newline     if(bcProd1.FirstRecord())_newline     {_newline    Outputs.SetProperty(&quot;status2&quot;,    &quot;qry2&quot;);_newline      bcProdRel1 = boProd1.GetBusComp(&quot;Component Product&quot;);_newline      bcProdRel1.SetViewMode(AllView);_newline      bcProdRel1.ClearToQuery();_newline      bcProdRel1.ExecuteQuery(ForwardOnly);_newline      Outputs.SetProperty(&quot;_usstatus&quot;,&quot;_usentering_uscomponent_ussearch&quot;);_newline      if(bcProdRel1.FirstRecord())_newline      {_newline        Outputs.SetProperty(&quot;status3&quot;,    &quot;qry3&quot;);_newline   Outputs.SetProperty(&quot;Product Name&quot;, bcProdRel1.GetFieldValue(&quot;Name&quot;));//overwrite the //property_newline       Outputs.SetProperty(&quot;Error Code&quot;,    &quot;OK&quot;);_newline       Outputs.SetProperty(&quot;Error Message&quot;, &quot;&quot;);  _newline      }_newline     }_newline    }_newline   }_newlineelse if(&quot;BUCKET-ADD&quot; == strRecordType || &quot;BUCKET-EXPIRE&quot; == strRecordType || &quot;ADMIN-BAR&quot; == strRecordType)_newline{_newline if(&quot;ADMIN-BAR&quot; == strRecordType)_newline{_newline Outputs.SetProperty(&quot;Product Name&quot;,&quot;User Bar - Mobile Admin&quot;);_newline}_newlineelse_newline{_newlineOutputs.SetProperty(&quot;Product Name&quot;,strProdName);_newline}_newlineOutputs.SetProperty(&quot;Parent Product Name&quot;, &quot;Mobile Service Bundle&quot;);_newlineOutputs.SetProperty(&quot;Error Code&quot;,    &quot;OK&quot;);_newline       Outputs.SetProperty(&quot;Error Message&quot;, &quot;&quot;);  _newline}_newline  else_newline  {_newline   //Outputs.SetProperty(&quot;Error Code&quot;,    &quot;UNHANDLED_usEDR&quot;);_newline   //Outputs.SetProperty(&quot;Error Message&quot;, &quot;Type of edr [&quot; + strRecordType + &quot;] not supported and/or not valid for service type: &quot; + strAccType);_newline  }_newline }_newline bcProdRel1 = null;_newline bcProd1 = null;_newline boProd1=null;_newline bcAXA=null;_newline bcAsset=null;_newline boAsset=null;_newline boCIP=null;_newline bcCIP=null;_newline return CancelOperation;_newline}"
 Program_spcLanguage="JS"
 Name="func_usGetAssetForMSISDN_usTest"
 Sequence="21"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function func_usGetPortsOfProduct(Inputs, Outputs)  _newline{  _newline/*  _newlineThis function takes in product Id (or name?) and gets the ports of the product  _newlinethen for each port it recursively gets the ports and populates a propset of following format  _newline &lt;AllPorts id=&quot;prod_usroot&quot;&gt;  _newline &lt;GetAllPorts id=&quot;prod1&quot;&gt;  _newline &lt;Port Class_usspcId=&quot;.....&quot; .......&gt;&lt;/Port&gt;  _newline &lt;/GetAllPorts&gt;  _newline &lt;GetAllPorts id=&quot;prod2&quot;&gt;  _newline &lt;Port Class_usspcId=&quot;.....&quot; .......&gt;&lt;/Port&gt;  _newline &lt;/GetAllPorts&gt;  _newline &lt;/AllPorts&gt;  _newline*/  _newline//if prod id is not given then retrive it from Product Name  _newline var strRootProdId = Inputs.GetProperty(&quot;Product Id&quot;);  _newline var strRootProdName = Inputs.GetProperty(&quot;Product Name&quot;);  _newline if(&quot;&quot;==strRootProdName &amp;&amp; &quot;&quot;==strRootProdId)  _newline {  _newline  Outputs.SetProperty(&quot;Error Code&quot;,&quot;PROD_usID_usNAME_usREQD&quot;)  _newline  Outputs.SetProperty(&quot;Error Message&quot;,&quot;Either Product Id or Product Name must be provided as input.&quot;)  _newline }  _newline else  _newline { _newline  if(&quot;&quot;==strRootProdId)  _newline  {  _newline   var boProd:BusObject = TheApplication().GetBusObject(&quot;Internal Product&quot;);    _newline   var bcProd:BusComp = boProd.GetBusComp(&quot;Internal Product&quot;);    _newline   bcProd.SetViewMode(AllView);  _newline   bcProd.ActivateField(&quot;Id&quot;);  _newline   bcProd.ClearToQuery();  _newline   bcProd.SetSearchExpr(&quot;[Name]=&apos;&quot;+ strRootProdName +&quot;&apos;&quot;);  _newline   bcProd.ExecuteQuery(ForwardOnly);  _newline   if(bcProd.FirstRecord())  _newline   strRootProdId = bcProd.GetFieldValue(&quot;Id&quot;);  _newline   bcProd=null;  _newline   boProd=null;  _newline  }  _newline  if(&quot;&quot;==strRootProdId)  _newline  {  _newline   Outputs.SetProperty(&quot;Error Code&quot;,&quot;PROD_usNOT_usFOUND&quot;)  _newline   Outputs.SetProperty(&quot;Error Message&quot;,&quot;Product with given Name was not found.&quot;)  _newline  }  _newline  else  _newline  {  _newline   psOUT = TheApplication().NewPropertySet();  _newline   psOUT.SetType(&quot;AllPorts&quot;);  _newline   psOUT.SetProperty(&quot;id&quot;,strRootProdId);  _newline   func_usGetPortsOfProduct_ussub(strRootProdId);  _newline//now transform it using XSL into a flat structure  _newline//and load an array which can be used for processing  _newline   var bsXMLUtil:Service;  _newline   var psOp:PropertySet=TheApplication().NewPropertySet();  _newline   bsXMLUtil = TheApplication().GetService(&quot;XML Converter&quot;);  _newline   bsXMLUtil.InvokeMethod(&quot;PropSetToXML&quot;,psOUT,psOp);  _newline//crude way to chop off UTF-8 and set UTF-16  _newline   var strXML:String = psOp.GetValue();  _newline   strXML = &quot;&lt;?xml version=&apos;1.0&apos; encoding=\&quot;UTF-16\&quot;?&gt;&quot; + strXML.substr(80);//38+42  _newline   psOp.SetValue(strXML);  _newline/*   Outputs.AddChild(psOp);  _newline   bsXMLUtil = TheApplication().GetService(&quot;Transcode Service&quot;);  _newline   psOp.SetProperty(&quot;ConversionMode&quot;, &quot;EncodingToEncoding&quot;);  _newline   psOp.SetProperty(&quot;Source Encoding Name&quot;, &quot;UTF-8&quot;);  _newline   psOp.SetProperty(&quot;Target Encoding Name&quot;, &quot;UTF-16&quot;);  _newline   bsXMLUtil.InvokeMethod(&quot;Convert&quot;,psOp,psOp); _newline*/   _newline   var strXSL=&quot;&quot;;  _newline   strXSL = strXSL + &quot;&lt;?xml version=&apos;1.0&apos; encoding=\&quot;UTF-16\&quot;?&gt;&lt;xsl:stylesheet version=&apos;1.0&apos; xmlns:xsl=&apos;http://www.w3.org/1999/XSL/Transform&apos;&gt;&quot;;  _newline   strXSL = strXSL + &quot;&lt;xsl:template match=&apos;/&apos;&gt;&lt;GetAllPortsSimple&gt;&lt;xsl:for-each select=&apos;AllPorts/GetAllPorts&apos;&gt;&lt;xsl:for-each select=&apos;Port/PortObject&apos;&gt;&lt;Product&gt;&quot;;  _newline   strXSL = strXSL + &quot;&lt;xsl:attribute name=&apos;RootProductId&apos;&gt;&lt;xsl:value-of select=&apos;./parent::Port/parent::GetAllPorts/parent::AllPorts/@id&apos;/&gt;&lt;/xsl:attribute&gt;&quot;;  _newline   strXSL = strXSL + &quot;&lt;xsl:attribute name=&apos;ProductId&apos;&gt;&lt;xsl:value-of select=&apos;./parent::Port/parent::GetAllPorts/@id&apos;/&gt;&lt;/xsl:attribute&gt;&quot;;  _newline   strXSL = strXSL + &quot;&lt;xsl:attribute name=&apos;PortName&apos;&gt;&lt;xsl:value-of select=&apos;./parent::Port/@Name&apos;/&gt;&lt;/xsl:attribute&gt;&quot;;  _newline   strXSL = strXSL + &quot;&lt;xsl:attribute name=&apos;PortProductName&apos;&gt;&lt;xsl:value-of select=&apos;@Name&apos;/&gt;&lt;/xsl:attribute&gt;&quot;;  _newline   strXSL = strXSL + &quot;&lt;xsl:attribute name=&apos;PortProductId&apos;&gt;&lt;xsl:value-of select=&apos;@Product_usspcId&apos;/&gt;&lt;/xsl:attribute&gt;&quot;;  _newline   strXSL = strXSL + &quot;&lt;xsl:attribute name=&apos;AssemblyPortId&apos;&gt;&lt;xsl:value-of select=&apos;./parent::Port/@Port_usspcItem_usspcId&apos;/&gt;&lt;/xsl:attribute&gt;&quot;;  _newline   strXSL = strXSL + &quot;&lt;xsl:attribute name=&apos;PortValidProdId&apos;&gt;&lt;xsl:value-of select=&apos;@Prod_usspcItem_usspcId&apos;/&gt;&lt;/xsl:attribute&gt;&quot;;  _newline   strXSL = strXSL + &quot;&lt;xsl:attribute name=&apos;IsDefault&apos;&gt;&lt;xsl:value-of select=&apos;@Default&apos;/&gt;&lt;/xsl:attribute&gt;&quot;;  _newline   strXSL = strXSL + &quot;&lt;/Product&gt;&lt;/xsl:for-each&gt;&lt;/xsl:for-each&gt;&lt;/GetAllPortsSimple&gt;&lt;/xsl:template&gt;&lt;/xsl:stylesheet&gt;&quot;;  _newline _newline   Outputs.SetProperty(&quot;XSLTBuffer&quot;,strXSL);  _newline _newline   bsXMLUtil = TheApplication().GetService(&quot;EAI XSLT Service&quot;);  _newline   psOp.SetProperty(&quot;XSLTBuffer&quot;,strXSL);  _newline   bsXMLUtil.InvokeMethod(&quot;Transform&quot;,psOp,psOp);  _newline//convert back to propset  _newline   psProdMaster = TheApplication().NewPropertySet();  _newline   bsXMLUtil = TheApplication().GetService(&quot;XML Converter&quot;);  _newline   bsXMLUtil.InvokeMethod(&quot;XMLToPropSet&quot;,psOp,psProdMaster);  _newline//postprocess - retrive additional product fields  _newline   var strFieldList = Inputs.GetProperty(&quot;FieldList&quot;);  _newline   if(&quot;&quot;!=strFieldList)  _newline   {  _newline    var arrFieldList = strFieldList.split(&quot;;&quot;);  _newline    if(0!=arrFieldList.length)  _newline    {  _newline     var boProdMain:BusObject = TheApplication().GetBusObject(&quot;Admin ISS Product Definition&quot;);    _newline     var bcProdMain:BusComp = boProdMain.GetBusComp(&quot;Internal Product - ISS Admin&quot;);    _newline     bcProdMain.SetViewMode(AllView);  _newline     for(var iFld=0;iFld&lt;arrFieldList.length;iFld++)  _newline     {  _newline      var arrFldDet=(arrFieldList[iFld]).split(&quot;:&quot;);  _newline      bcProdMain.ActivateField(arrFldDet[0]);  _newline     }  _newline     bcProdMain.ClearToQuery();  _newline     var strCurrProdId=&quot;&quot;;  _newline     for(var iProdCnt=0;iProdCnt &lt; psProdMaster.GetChildCount();iProdCnt++)  _newline     {  _newline      strCurrProdId=psProdMaster.GetChild(iProdCnt).GetProperty(&quot;PortProductId&quot;);  _newline      bcProdMain.SetSearchExpr(&quot;[Id]=&apos;&quot;+ strCurrProdId +&quot;&apos;&quot;);  _newline      bcProdMain.ExecuteQuery(ForwardOnly);  _newline      if(bcProdMain.FirstRecord())  _newline      {  _newline       for(var iFld=0;iFld&lt;arrFieldList.length;iFld++)  _newline       {  _newline        var arrFldDet=(arrFieldList[iFld]).split(&quot;:&quot;);  _newline        if(1&lt;arrFldDet.length)  _newline         psProdMaster.GetChild(iProdCnt).SetProperty(arrFldDet[1],bcProdMain.GetFieldValue(arrFldDet[0]));  _newline        else  _newline         psProdMaster.GetChild(iProdCnt).SetProperty(arrFldDet[0],bcProdMain.GetFieldValue(arrFldDet[0]));  _newline       }  _newline      }  _newline     }  _newline     bcProdMain=null;  _newline     boProdMain=null;  _newline    }  _newline   }  _newline   var strPriceListId=Inputs.GetProperty(&quot;Price List Id&quot;);  _newline   if(&quot;&quot;!=strPriceListId)//if this is specified then the product will be set with the price in a standard tag Price  _newline   {  _newline    var boPriceMain:BusObject = TheApplication().GetBusObject(&quot;Price List&quot;);    _newline    var bcPriceMain:BusComp = boPriceMain.GetBusComp(&quot;Price List Item&quot;);   _newline    var strProdPrice=&quot;&quot;;  _newline    bcPriceMain.ActivateField(&quot;Original List Price&quot;);  _newline    bcPriceMain.ActivateField(&quot;Promotional Price&quot;);  _newline    bcPriceMain.SetViewMode(AllView);  _newline    for(var iProdCnt=0;iProdCnt &lt; psProdMaster.GetChildCount();iProdCnt++)  _newline    {  _newline     bcPriceMain.ClearToQuery();  _newline     bcPriceMain.SetSearchExpr(&quot;[Product Id]=&apos;&quot;+ psProdMaster.GetChild(iProdCnt).GetProperty(&quot;PortProductId&quot;) +&quot;&apos; AND [Price List Id]=&apos;&quot; + strPriceListId + &quot;&apos;&quot;);  _newline     bcPriceMain.ExecuteQuery(ForwardOnly);  _newline     if(bcPriceMain.FirstRecord())  _newline     {  _newline      strProdPrice = bcPriceMain.GetFieldValue(&quot;Promotional Price&quot;);  _newline      if(&quot;&quot;==strProdPrice)  _newline       strProdPrice = bcPriceMain.GetFieldValue(&quot;Original List Price&quot;);  _newline      if(&quot;&quot;!=strProdPrice)  _newline       psProdMaster.GetChild(iProdCnt).SetProperty(&quot;Price&quot;,strProdPrice);  _newline     }  _newline    }  _newline    bcProdMain=null;  _newline    boPriceMain=null;  _newline   }  _newline//write to file if requested     _newline   var strFileName = Inputs.GetProperty(&quot;FileName&quot;);  _newline   if(&quot;&quot;!=strFileName)  _newline   {  _newline    bsXMLUtil = TheApplication().GetService(&quot;EAI XML Write to File&quot;);  _newline    psProdMaster.SetProperty(&quot;FileName&quot;, strFileName);//normalize the name  _newline    bsXMLUtil.InvokeMethod(&quot;WritePropSet&quot;, psProdMaster, Outputs);  _newline    bsXMLUtil = null;  _newline   }  _newline   Outputs.AddChild(psProdMaster);  _newline  }  _newline }  _newline}"
 Program_spcLanguage="JS"
 Name="func_usGetPortsOfProduct"
 Sequence="22"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function func_usGetPortsOfProduct_ussub(prodId) _newline{ _newline var bsRCOIS:Service  = TheApplication().GetService(&quot;Remote Complex Object Instance Service&quot;); _newline var psIp:PropertySet = TheApplication().NewPropertySet(); _newline var psOp:PropertySet = TheApplication().NewPropertySet(); _newline psIp.SetProperty(&quot;Product Id&quot;,prodId); _newline psIp.SetProperty(&quot;GetPortDomain&quot;,&quot;Y&quot;); _newline bsRCOIS.InvokeMethod(&quot;GetAllPorts&quot;,psIp,psOp); _newline psOp.SetProperty(&quot;id&quot;,prodId); _newline if(0!=psOp.GetChildCount()) _newline { _newline  psOUT.AddChild(psOp); _newline//  psOp.SetProperty(&quot;ChldCnt_us&quot;+ prodId,psOp.GetChildCount()); _newline _newline  LogPropSet(psOp,&quot;getports_us&quot; + prodId); _newline  LogPropSet(psOUT,&quot;cumm_usgetports_us&quot; + prodId); _newline  _newline  for(var iPortCnt=0; iPortCnt &lt; psOp.GetChildCount();iPortCnt++) _newline  { _newline//   psOp.SetProperty(&quot;GChldCnt_us&quot;+ prodId + &quot;_us&quot; + iPortCnt, psOp.GetChild(iPortCnt).GetChildCount()); _newline   for(var iPortObjCnt=0; iPortObjCnt &lt; psOp.GetChild(iPortCnt).GetChildCount();iPortObjCnt++) _newline   { _newline    var strSubProdId = psOp.GetChild(iPortCnt).GetChild(iPortObjCnt).GetProperty(&quot;Product Id&quot;); _newline    func_usGetPortsOfProduct_ussub(strSubProdId); _newline   } _newline  } _newline } _newline return; _newline}"
 Program_spcLanguage="JS"
 Name="func_usGetPortsOfProduct_ussub"
 Sequence="23"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="/*-------+------+--------+----------------------------------------------_newlineYYYYMMDD | Ver  | By     | Description of Change_newline---------+------+--------+----------------------------------------------_newline20131217 | 1.00 | PPB    | First version_newline---------+------+--------+--------------------------------------------*/_newlinefunction func_usLoadBPRecordsfromFile(Inputs, Outputs) _newline{ _newline var strFilePath     = Inputs.GetProperty(&quot;DirectoryPath&quot;); _newline var strFileName     = Inputs.GetProperty(&quot;FileName&quot;); _newline var strBatchType    = Inputs.GetProperty(&quot;BatchType&quot;); _newline var iSkipHdrLineCnt = Inputs.GetProperty(&quot;Header Lines to Skip&quot;); _newline var iSkipFtrLineCnt = Inputs.GetProperty(&quot;Footer Lines to Skip&quot;); _newline var strDelimChar    = Inputs.GetProperty(&quot;Delimiter&quot;); _newline if(&quot;&quot;==iSkipHdrLineCnt) iSkipHdrLineCnt=1;//BP will have header :-)_newline if(&quot;&quot;==iSkipFtrLineCnt) iSkipFtrLineCnt=0; _newline if(&quot;&quot;==strDelimChar)    strDelimChar=&quot;,&quot;; _newline_newline Outputs.SetProperty(&quot;Delim Char&quot;,strDelimChar); _newline//gets a file name and reads the line to create records in batch  _newline var bsFile:Service    = TheApplication().GetService(&quot;EAI File Transport&quot;); _newline var psInp:PropertySet = TheApplication().NewPropertySet(); _newline var psOp:PropertySet  = TheApplication().NewPropertySet(); _newline psInp.SetProperty(&quot;FileName&quot;,            strFilePath + strFileName); _newline psInp.SetProperty(&quot;IsReceivingTextData&quot;, &quot;true&quot;); _newline bsFile.InvokeMethod(&quot;Receive&quot;,psInp, psOp); _newline_newline psInp  = psOp.Copy(); _newline bsFile = TheApplication().GetService(&quot;Transcode Service&quot;); _newline psInp.SetProperty(&quot;SourceEncoding&quot;,&quot;UTF-8&quot;); _newline psInp.SetProperty(&quot;ConversionMode&quot;,&quot;EncodingToString&quot;); _newline bsFile.InvokeMethod(&quot;Convert&quot;,psInp, psOp); _newline_newline var strFileText = psOp.GetValue(); _newline var iCnt            = 0; _newline var iCntLoadFailed  = 0; _newline var arrFileLines    = strFileText.split(&quot;\n&quot;); _newline var strFileLineText = &quot;&quot;; _newline Outputs.SetProperty(&quot;Number Of Lines&quot;, arrFileLines.length); _newline bsFile = TheApplication().GetService(&quot;Workflow Process Manager&quot;); _newline for(var i = iSkipHdrLineCnt; i &lt; arrFileLines.length; i++)_newline { _newline  strFileLineText = arrFileLines[i]; _newline_newline//  Outputs.SetProperty(&quot;Line&quot; + i,strFileLineText); _newline  Outputs.SetProperty(&quot;LineLength&quot; + i,strFileLineText.length); _newline  if(&quot;&quot; != strFileLineText) _newline  { _newline   iCnt++; _newline   strFileLineText = strFileLineText.substring(0,strFileLineText.length-1); _newline   var arrFileLine = strFileLineText.split(&quot;,&quot;); _newline//now setup the inidividual columns in the input properties of loader workflow _newline   psInp  = TheApplication().NewPropertySet(); _newline   psOp   = TheApplication().NewPropertySet(); _newline   var strRecordType = &quot;BP&quot;; _newline   psInp.SetProperty(&quot;BatchType&quot;,    strBatchType); _newline   psInp.SetProperty(&quot;BatchId&quot;,      strFileName); _newline   psInp.SetProperty(&quot;Attrib02&quot;,     arrFileLine[0]);//SIM_newline   psInp.SetProperty(&quot;RecordId&quot;,     arrFileLine[1]);//MSISDN _newline   psInp.SetProperty(&quot;Attrib01&quot;,     arrFileLine[2]);//token _newline   psInp.SetProperty(&quot;Attrib03&quot;,     &quot;Default_usPreactivationOrder&quot;);//plan or favorite name must come from file_newline   psInp.SetProperty(&quot;ProcessName&quot;,  &quot;TMBatchRecordCreator&quot;); _newline   bsFile.InvokeMethod(&quot;RunProcess&quot;, psInp, psOp); _newline   if(&quot;&quot; != psOp.GetProperty(&quot;Error Code&quot;)) _newline   { _newline    iCntLoadFailed++; _newline   } _newline  }_newline }_newline Outputs.SetProperty(&quot;Number Of Lines Read&quot;,   iCnt); _newline Outputs.SetProperty(&quot;Number Of Lines Loaded&quot;, iCnt - iCntLoadFailed); _newline Outputs.SetProperty(&quot;Error Code&quot;,    &quot;OK&quot;); _newline Outputs.SetProperty(&quot;Error Message&quot;, &quot;Number Of Lines Read: &quot; + iCnt + &quot;, Number Of Lines Loaded: &quot; + (iCnt - iCntLoadFailed)); _newline bsFile = null; _newline psInp  = null; _newline psOp   = null; _newline return CancelOperation; _newline}"
 Program_spcLanguage="JS"
 Name="func_usLoadBPRecordsfromFile"
 Sequence="25"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function func_usLoadBRMBatch(Inputs,Outputs)_newline{_newline//an EBC is used to fetch the records from ext db (BRM) in batches_newline var isBatchRec     = false;_newline var iCntLoadFailed = 0;_newline var iCnt           = 0;_newline var strErrCode     = &quot;OK&quot;;_newline var strErrMesg     = &quot;&quot;;_newline var strBatchType   = &quot;&quot;;_newline var strBatchNum    = Inputs.GetProperty(&quot;BatchNumber&quot;);_newline var strElecProfile = &quot;&quot;;_newline if(&quot;&quot;==strBatchNum)_newline {_newline  strErrCode = &quot;BATCH_usNUM_usMISSING&quot;;_newline  strErrMesg = &quot;Batch Number must be specified as input.&quot;;_newline }_newline else_newline {_newline  var boBatchSrc:BusObject = TheApplication().GetBusObject(&quot;TM BRM Batches BO&quot;);_newline  var bcBatchSrc:BusComp   = boBatchSrc.GetBusComp(&quot;TM BRM Batches BC&quot;);_newline  bcBatchSrc.SetViewMode(AllView);_newline  bcBatchSrc.ActivateField(&quot;Batch Type&quot;);_newline  bcBatchSrc.ActivateField(&quot;Attrib01&quot;);_newline  bcBatchSrc.ActivateField(&quot;Attrib02&quot;);_newline  bcBatchSrc.ActivateField(&quot;Attrib03&quot;);_newline  bcBatchSrc.ActivateField(&quot;Attrib04&quot;);_newline  bcBatchSrc.ActivateField(&quot;Attrib11&quot;);_newline  bcBatchSrc.ActivateField(&quot;MSISDN&quot;);_newline  bcBatchSrc.ClearToQuery();_newline  bcBatchSrc.SetSearchExpr(&quot;[Batch Number]=&apos;&quot; + strBatchNum + &quot;&apos;&quot;);_newline  bcBatchSrc.ExecuteQuery(ForwardOnly);_newline  isBatchRec = bcBatchSrc.FirstRecord();_newline  var psInp:PropertySet  = TheApplication().NewPropertySet();_newline  var psOp:PropertySet   = TheApplication().NewPropertySet();_newline  var bsFile:Service     = TheApplication().GetService(&quot;Workflow Process Manager&quot;);_newline  psInp.SetProperty(&quot;ProcessName&quot;,  &quot;TMBatchRecordCreator&quot;);_newline  psInp.SetProperty(&quot;BatchId&quot;,      strBatchNum);_newline  while(isBatchRec)_newline  {_newline//now load_newline   iCnt++;_newline   strBatchType   = bcBatchSrc.GetFieldValue(&quot;Batch Type&quot;);_newline   strElecProfile = bcBatchSrc.GetFieldValue(&quot;Attrib03&quot;);_newline   if(&quot;BP&quot;==strBatchType)_newline   {_newline    psInp.SetProperty(&quot;BatchType&quot;,    strBatchType);_newline    psInp.SetProperty(&quot;RecordId&quot;,     bcBatchSrc.GetFieldValue(&quot;MSISDN&quot;));  //MSISDN_newline    psInp.SetProperty(&quot;Attrib01&quot;,     bcBatchSrc.GetFieldValue(&quot;Attrib01&quot;));//Reservation Token_newline    psInp.SetProperty(&quot;Attrib02&quot;,     bcBatchSrc.GetFieldValue(&quot;Attrib02&quot;));//SIM Number_newline    if(&quot;4.0&quot; == strElecProfile || &quot;5.0&quot; == strElecProfile)//VMT Type based on SIM Electrical Profile_newline     psInp.SetProperty(&quot;Attrib03&quot;,     &quot;VMT&quot;);_newline    else_newline     psInp.SetProperty(&quot;Attrib03&quot;,     &quot;&quot;);_newline_newline    psInp.SetProperty(&quot;Attrib04&quot;,     &quot;Default_usPreactivationOrder&quot;);//plan name, hardcoded for now, can come in later_newline    psInp.SetProperty(&quot;Attrib05&quot;,     &quot;E:&quot; + bcBatchSrc.GetFieldValue(&quot;Attrib03&quot;) + &quot;;G:&quot; + bcBatchSrc.GetFieldValue(&quot;Attrib04&quot;));//SIM Electrical &amp; Graphical Profile concatenated - not used_newline    psInp.SetProperty(&quot;Attrib11&quot;,     bcBatchSrc.GetFieldValue(&quot;Attrib11&quot;));//Reservation expiry date, not used_newline    bsFile.InvokeMethod(&quot;RunProcess&quot;, psInp, psOp);_newline    if(&quot;&quot; != psOp.GetProperty(&quot;Error Code&quot;))_newline    {_newline     iCntLoadFailed++;_newline    }_newline   }_newline   isBatchRec = bcBatchSrc.NextRecord();_newline  }_newline  bcBatchSrc = null;_newline  boBatchSrc = null;_newline  bsFile     = null;_newline  psInp      = null;_newline  psOp       = null;_newline  strErrCode = &quot;OK&quot;;_newline  strErrMesg = &quot;Batch Numvber &quot; + strBatchNum + &quot; processed. Total records &quot; + iCnt + &quot;, failed &quot; + iCntLoadFailed;_newline }_newline Outputs.SetProperty(&quot;Error Code&quot;,    strErrCode);_newline Outputs.SetProperty(&quot;Error Message&quot;, strErrMesg);_newline return CancelOperation;_newline}"
 Program_spcLanguage="JS"
 Name="func_usLoadBRMBatch"
 Sequence="26"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments="[JUHIV][08.05.2012][Load BestMate record in CRM from files sent by BRM]"
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function func_usLoadBestmateRecords(Inputs, Outputs)_newline{_newline var strFilePath     = Inputs.GetProperty(&quot;DirectoryPath&quot;);_newline var strFileName     = Inputs.GetProperty(&quot;FileName&quot;);_newline var strBatchType    = Inputs.GetProperty(&quot;BatchType&quot;);_newline var iSkipHdrLineCnt = Inputs.GetProperty(&quot;Header Lines to Skip&quot;);_newline var iSkipFtrLineCnt = Inputs.GetProperty(&quot;Footer Lines to Skip&quot;);_newline var strDelimChar    = Inputs.GetProperty(&quot;Delimiter&quot;);_newline if(&quot;&quot;==iSkipHdrLineCnt)_newline  iSkipHdrLineCnt=0;_newline if(&quot;&quot;==iSkipFtrLineCnt)_newline  iSkipFtrLineCnt=0;_newline if(&quot;&quot;==strDelimChar)_newline  strDelimChar=&quot;,&quot;;_newline_newlineOutputs.SetProperty(&quot;Delim Char&quot;,strDelimChar);_newline//gets a file name and reads the line to create records in batch _newline var bsFile:Service    = TheApplication().GetService(&quot;EAI File Transport&quot;);_newline var psInp:PropertySet = TheApplication().NewPropertySet();_newline var psOp:PropertySet  = TheApplication().NewPropertySet();_newline psInp.SetProperty(&quot;FileName&quot;,            strFilePath + strFileName);_newline psInp.SetProperty(&quot;IsReceivingTextData&quot;, &quot;true&quot;);_newline bsFile.InvokeMethod(&quot;Receive&quot;,psInp, psOp);_newline_newline psInp  = psOp.Copy();_newline bsFile = TheApplication().GetService(&quot;Transcode Service&quot;);_newline psInp.SetProperty(&quot;SourceEncoding&quot;,&quot;UTF-8&quot;);_newline psInp.SetProperty(&quot;ConversionMode&quot;,&quot;EncodingToString&quot;);_newline bsFile.InvokeMethod(&quot;Convert&quot;,psInp, psOp);_newline var strFileText = psOp.GetValue();_newline_newline var iCnt            = 0;_newline var iCntLoadFailed  = 0;_newline var arrFileLines    = strFileText.split(&quot;\n&quot;);_newline// var arrFileLine;//represents one each line in the file_newline var strFileLineText = &quot;&quot;;_newline Outputs.SetProperty(&quot;Number Of Lines&quot;,           arrFileLines.length);_newline bsFile = TheApplication().GetService(&quot;Workflow Process Manager&quot;);_newline// for(var i = 0; i &lt; 10; i++)//extra -1 is to ignore last carriage return_newline// var i=0;_newline// for(i = -1 + iSkipHdrLineCnt; i &lt; arrFileLines.length - iSkipFtrLineCnt -1; i++)//extra -1 is to ignore last carriage return_newline for(var i = 0; i &lt; arrFileLines.length; i++)//extra -1 is to ignore last carriage return_newline {_newline   strFileLineText = arrFileLines[i];_newline_newline Outputs.SetProperty(&quot;LineLength&quot; + i,strFileLineText.length);_newline if(&quot;&quot; != strFileLineText)_newline {_newline     iCnt++;_newline     strFileLineText = strFileLineText.substring(0,strFileLineText.length);_newline     var arrFileLine = strFileLineText.split(&quot;,&quot;);_newline  _newline   //now setup the inidividual columns in the input properties of loader workflow_newline     psInp  = TheApplication().NewPropertySet();_newline     psOp   = TheApplication().NewPropertySet();_newline     var strRecordType = arrFileLine[0];_newline     var strActionType = arrFileLine[1];_newline        var strBestMateNum = arrFileLine[2];_newline        var strPortOutNum = arrFileLine[3];_newline_newline     psInp.SetProperty(&quot;BatchType&quot;,    strBatchType);_newline     psInp.SetProperty(&quot;BatchId&quot;,      strFileName);_newline     psInp.SetProperty(&quot;RecordId&quot;,     i);_newline     psInp.SetProperty(&quot;Attrib01&quot;,     strRecordType);_newline     psInp.SetProperty(&quot;Attrib02&quot;,     strActionType);_newline     psInp.SetProperty(&quot;Attrib03&quot;,     strBestMateNum);_newline        psInp.SetProperty(&quot;Attrib04&quot;,     strPortOutNum);_newline        _newline     psInp.SetProperty(&quot;ProcessName&quot;,  &quot;TMBatchRecordCreator&quot;);_newline     bsFile.InvokeMethod(&quot;RunProcess&quot;, psInp, psOp);_newline     if(&quot;&quot; != psOp.GetProperty(&quot;Error Code&quot;))_newline     {_newline       iCntLoadFailed++;_newline     }_newline   }_newline }_newline Outputs.SetProperty(&quot;Number Of Lines Read&quot;,      iCnt);_newline Outputs.SetProperty(&quot;Number Of Lines Loaded&quot;, iCnt - iCntLoadFailed);_newline Outputs.SetProperty(&quot;Error Code&quot;,    &quot;OK&quot;);_newline Outputs.SetProperty(&quot;Error Message&quot;, &quot;Number Of Lines Read: &quot; + iCnt + &quot;, Number Of Lines Loaded: &quot; + (iCnt - iCntLoadFailed));_newline bsFile = null;_newline psInp  = null;_newline psOp   = null;_newline return CancelOperation;_newline}"
 Program_spcLanguage="JS"
 Name="func_usLoadBestmateRecords"
 Sequence="24"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function func_usLoadRecordsfromFile(Inputs, Outputs) _newline{ _newline//            Included Loading of EDR records for R-6 EDR Types _newline//            Handled Loading ANNIVERSARY Edrs with no unique Record Id. These EDRs are coming with &apos;e&apos; in several fields. _newline var strFilePath     = Inputs.GetProperty(&quot;DirectoryPath&quot;); _newline var strFileName     = Inputs.GetProperty(&quot;FileName&quot;); _newline var strBatchType    = Inputs.GetProperty(&quot;BatchType&quot;); _newline var iSkipHdrLineCnt = Inputs.GetProperty(&quot;Header Lines to Skip&quot;); _newline var iSkipFtrLineCnt = Inputs.GetProperty(&quot;Footer Lines to Skip&quot;); _newline var strDelimChar    = Inputs.GetProperty(&quot;Delimiter&quot;); _newline if(&quot;&quot;==iSkipHdrLineCnt) _newline  iSkipHdrLineCnt=0; _newline if(&quot;&quot;==iSkipFtrLineCnt) _newline  iSkipFtrLineCnt=0; _newline if(&quot;&quot;==strDelimChar) _newline  strDelimChar=&quot;,&quot;; _newline _newlineOutputs.SetProperty(&quot;Delim Char&quot;,strDelimChar); _newline//gets a file name and reads the line to create records in batch  _newline var bsFile:Service    = TheApplication().GetService(&quot;EAI File Transport&quot;); _newline var psInp:PropertySet = TheApplication().NewPropertySet(); _newline var psOp:PropertySet  = TheApplication().NewPropertySet(); _newline psInp.SetProperty(&quot;FileName&quot;,            strFilePath + strFileName); _newline psInp.SetProperty(&quot;IsReceivingTextData&quot;, &quot;true&quot;); _newline bsFile.InvokeMethod(&quot;Receive&quot;,psInp, psOp); _newline _newline psInp  = psOp.Copy(); _newline bsFile = TheApplication().GetService(&quot;Transcode Service&quot;); _newline psInp.SetProperty(&quot;SourceEncoding&quot;,&quot;UTF-8&quot;); _newline psInp.SetProperty(&quot;ConversionMode&quot;,&quot;EncodingToString&quot;); _newline bsFile.InvokeMethod(&quot;Convert&quot;,psInp, psOp); _newline var strFileText = psOp.GetValue(); _newline// Outputs.SetValue(strFileText); _newline _newline var iCnt            = 0; _newline var iCntLoadFailed  = 0; _newline var arrFileLines    = strFileText.split(&quot;\n&quot;); _newline// var arrFileLine;//represents one each line in the file _newline var strFileLineText = &quot;&quot;; _newline Outputs.SetProperty(&quot;Number Of Lines&quot;,           arrFileLines.length); _newline bsFile = TheApplication().GetService(&quot;Workflow Process Manager&quot;); _newline// for(var i = 0; i &lt; 10; i++)//extra -1 is to ignore last carriage return _newline// var i=0; _newline// for(i = -1 + iSkipHdrLineCnt; i &lt; arrFileLines.length - iSkipFtrLineCnt -1; i++)//extra -1 is to ignore last carriage return _newline for(var i = 0; i &lt; arrFileLines.length; i++)//extra -1 is to ignore last carriage return _newline { _newline  strFileLineText = arrFileLines[i]; _newline _newline//  Outputs.SetProperty(&quot;Line&quot; + i,strFileLineText); _newline  Outputs.SetProperty(&quot;LineLength&quot; + i,strFileLineText.length); _newline  if(&quot;&quot; != strFileLineText) _newline  { _newline   iCnt++; _newline   strFileLineText = strFileLineText.substring(0,strFileLineText.length-1); _newline   var arrFileLine = strFileLineText.split(&quot;,&quot;); _newline//   for(var ii=0; ii&lt;arrFileLine.length; ii++) _newline//    Outputs.SetProperty(&quot;EDR&quot;+i+&quot; Field&quot;+ii,arrFileLine[ii]); _newline     _newline/* _newlineEDR TYPE         DISCONNECT                    ADMIN-BAR                      REPLENISHMENT                     _newline------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- _newline 0 COL1          EDR                           EDR                                                           EDR                          EDR                           EDR                           EDR                           EDR                           EDR                                               _newline 1 EVENT_usCODE    DISCONNECT/SUB-DELETED        ADMIN-BAR                      2         ANNIVERSARY                  ANNIVERSARY                   BAL-EXPIRE                    BUCKET-ADD                    BUCKET-EXPIRE                 BUCKET-REPLENISHMENT                              _newline 2 EVENT_usID      20110902000005001001966860    20110722195320001001926906     20110711054717005077173366  20110923011147008006891321   e                             20110923005153008001235265    20110923200345001118918684    20110923000312002111254123    20110924034455008118290490                        _newline 3 COL4          00021966860                   02011926906                             09056891321                  e                             00091235265                   02018918684                   00031254123                   09058290490                                       _newline 4 MSISDN        97477067784                   97477027615                    97477777105      97470079000                  97477788839                   97470012110                   97477055034                   97477307806                   97470121631                                       _newline 5 TIME_usSTAMP    20110902000005                20110722195320                 20110711054717     20110923011147               20110923080501                20110923005153                20110923200345                20110923000312                20110924034455                                    _newline 6 BUNDLE1                                                                    103                                     e                                                                                                                                                                         _newline 7 AMOUNT                                                                     110.0                                     e                                                                                                                                                                         _newline 8 COL9                                                               e                                                                                                                                                                         _newline 9 COL10         11                            11                13                           COSP2                         13                            11                            11                            18                                                _newline10 COL11         Red                           Red                Freedom No Limit             e                             Freedom No Limit              Red                           Red                           Mobile Broadband for Business No Limit            _newline11 BUNDLE2                                                                103                                     e                                                           656                           656                           155                                               _newline12 COL13                                                       e                                                        Free Mobile Internet          Free Mobile Internet          Free Mobile Internet                              _newline13 COL14                                                       e                                                                                                                                                                         _newline14 COL15                                                       e                                                                                                                                                                         _newline15 COL16                                                       e                             70                                                                                                                                          _newline16 COL17                                                       e                                                                                                                                                                         _newline17 COL18                                                       enewlinePossible Replenishments for Freedom No Limit _newlineFreedom Replenishment 3      _newlineFreedom Replenishment 4      _newlineFreedom Replenishment 5      _newlineFreedom Replenishment 6      _newlineFreedom Replenishment 7      _newlineFreedom Replenishment 8      _newlineFreedom Replenishment 9      _newlineFreedom Replenishment 10  _newline*/ _newline _newline//now setup the inidividual columns in the input properties of loader workflow _newline   psInp  = TheApplication().NewPropertySet(); _newline   psOp   = TheApplication().NewPropertySet(); _newline   var strRecordType = arrFileLine[1]; _newline   var isBRMAnniv = false; _newline   if(&quot;e&quot; == arrFileLine[2]) _newline    isBRMAnniv=true; _newline//   Outputs.SetProperty(&quot;BRMAnniv_us&quot;+i, isBRMAnniv); _newline   var BalExp = 0; _newline   BalExp = ToNumber(arrFileLine[15]); _newline   Outputs.SetProperty(&quot;BalExp_us&quot;+i, BalExp); _newline _newline   psInp.SetProperty(&quot;BatchType&quot;,    strBatchType); _newline   psInp.SetProperty(&quot;BatchId&quot;,      strFileName); _newline   psInp.SetProperty(&quot;Attrib02&quot;,     strRecordType);//is the record type or edr type _newline   psInp.SetProperty(&quot;Attrib03&quot;,     arrFileLine[4]); _newline   psInp.SetProperty(&quot;Attrib23&quot;,     BalExp); _newline   if(isBRMAnniv) _newline    psInp.SetProperty(&quot;RecordId&quot;,   arrFileLine[4] + arrFileLine[5]); _newline   else _newline    psInp.SetProperty(&quot;RecordId&quot;,     arrFileLine[2]); _newline _newline   if(&quot;ANNIVERSARY&quot; == strRecordType &amp;&amp; isBRMAnniv) _newline    psInp.SetProperty(&quot;Attrib01&quot;,     &quot;Freedom Monthly Limit&quot;);//productcode  needs to be passed here _newline   else _newline   if(&quot;ANNIVERSARY&quot; == strRecordType || &quot;BAL-EXPIRE&quot; == strRecordType || &quot;THRESHOLD&quot; == strRecordType || &quot;SUB-DEBT&quot; == strRecordType || &quot;INSUFFICIENT-BALANCE&quot; == strRecordType) _newline   { _newline    psInp.SetProperty(&quot;Attrib01&quot;,     arrFileLine[10]);//product name needs to be passed here _newline//    if(&quot;BAL-EXPIRE&quot; == strRecordType )//price field _newline//     psInp.SetProperty(&quot;Attrib23&quot;, 100); _newline   } _newline _newline   else _newline    if( &quot;BUCKET-ADD&quot; == strRecordType || &quot;BUCKET-EXPIRE&quot; == strRecordType || &quot;BUCKET-REPLENISHMENT&quot; == strRecordType) _newline     psInp.SetProperty(&quot;Attrib01&quot;,     arrFileLine[11]); _newline    else _newline     psInp.SetProperty(&quot;Attrib01&quot;,     arrFileLine[6]);//product code needs to be passed here _newline _newline //else if(&quot;ANNIVERSARY&quot; == strRecordType || &quot;e&quot; == strAnniversary) _newline //psInp.SetProperty(&quot;Attrib01&quot;,     arrFileLine[6]);//product needs to be passed here _newline _newline   if(&quot;&quot;!=arrFileLine[7] )//price field _newline    psInp.SetProperty(&quot;Attrib21&quot;, arrFileLine[7]); _newline  if (&quot;CREDIT-LIMIT-REACHED&quot; == strRecordType) _newline    { _newline     psInp.SetProperty(&quot;BatchType&quot;,    &quot;EDR_usDunn_usWarning&quot;); _newline     psInp.SetProperty(&quot;BatchId&quot;,      &quot;EDR_usDunning_usBatch&quot;); _newline     psInp.SetProperty(&quot;Attrib01&quot;,      strFileName); _newline     psInp.SetProperty(&quot;Attrib21&quot;,     arrFileLine[18]); _newline     psInp.SetProperty(&quot;Attrib05&quot;,     arrFileLine[19]); _newline     psInp.SetProperty(&quot;Attrib04&quot;,     arrFileLine[20]); _newline    } _newline   psInp.SetProperty(&quot;ProcessName&quot;,  &quot;TMBatchRecordCreator&quot;); _newline   bsFile.InvokeMethod(&quot;RunProcess&quot;, psInp, psOp); _newline   if(&quot;&quot; != psOp.GetProperty(&quot;Error Code&quot;)) _newline   { _newline    iCntLoadFailed++; _newline   } _newline  } _newline } _newline Outputs.SetProperty(&quot;Number Of Lines Read&quot;,      iCnt); _newline Outputs.SetProperty(&quot;Number Of Lines Loaded&quot;, iCnt - iCntLoadFailed); _newline Outputs.SetProperty(&quot;Error Code&quot;,    &quot;OK&quot;); _newline Outputs.SetProperty(&quot;Error Message&quot;, &quot;Number Of Lines Read: &quot; + iCnt + &quot;, Number Of Lines Loaded: &quot; + (iCnt - iCntLoadFailed)); _newline bsFile = null; _newline psInp  = null; _newline psOp   = null; _newline return CancelOperation; _newline}"
 Program_spcLanguage="JS"
 Name="func_usLoadRecordsfromFile"
 Sequence="27"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function func_usMultiFields(bcName)_newline{//to be used with - ActivateMultipleFields_newline var psFldList = TheApplication().NewPropertySet();_newline if(&quot;Account&quot; == bcName)_newline {_newline  psFldList.SetProperty(&quot;Status&quot;, &quot;&quot;);_newline }_newline else if(&quot;Order Entry - Orders&quot; == bcName)_newline {_newline  psFldList.SetProperty(&quot;Status&quot;,&quot;&quot;);_newline  psFldList.SetProperty(&quot;Back Office Order Number&quot;,&quot;&quot;);_newline  psFldList.SetProperty(&quot;Id&quot;,&quot;&quot;);_newline  psFldList.SetProperty(&quot;Status&quot;,&quot;&quot;);_newline  psFldList.SetProperty(&quot;Billing Profile Id&quot;,&quot;&quot;);_newline  psFldList.SetProperty(&quot;Back Office Order Number&quot;,&quot;&quot;);_newline  psFldList.SetProperty(&quot;Sub Type&quot;,&quot;&quot;);_newline  psFldList.SetProperty(&quot;Status&quot;,&quot;&quot;);_newline  psFldList.SetProperty(&quot;Order Total&quot;,&quot;&quot;);_newline }_newline else if(&quot;Order Entry - Line Items&quot; == bcName)_newline {_newline  psFldList.SetProperty(&quot;Id&quot;,&quot;&quot;);_newline  psFldList.SetProperty(&quot;Product&quot;, &quot;&quot;);_newline  psFldList.SetProperty(&quot;Parent Order Item Id&quot;,&quot;&quot;);_newline  psFldList.SetProperty(&quot;Root Order Item Id&quot;,&quot;&quot;);_newline  psFldList.SetProperty(&quot;Prod Item Id&quot;,&quot;&quot;);_newline  psFldList.SetProperty(&quot;Integration Id&quot;,&quot;&quot;);_newline  psFldList.SetProperty(&quot;Product Port Id&quot;,&quot;&quot;);_newline  psFldList.SetProperty(&quot;Unit Price - Display&quot;,&quot;&quot;);_newline  psFldList.SetProperty(&quot;Service Id&quot;,&quot;&quot;);_newline  psFldList.SetProperty(&quot;Discount Amount&quot;,&quot;&quot;);_newline  psFldList.SetProperty(&quot;Adjusted List Price - Display&quot;,&quot;&quot;);_newline  psFldList.SetProperty(&quot;Product w/ ST constraint&quot;,&quot;&quot;);_newline  psFldList.SetProperty(&quot;Change Reason&quot;,&quot;&quot;);_newline  psFldList.SetProperty(&quot;Cancel Reason&quot;,&quot;&quot;);_newline  psFldList.SetProperty(&quot;Asset Status&quot;,&quot;&quot;);_newline }_newline else if(&quot;Order Entry - Line Items (Simple)&quot; == bcName)_newline {_newline  psFldList.SetProperty(&quot;Product&quot;, &quot;&quot;);_newline }_newline else if(&quot;Payments&quot; == bcName)_newline {_newline  psFldList.SetProperty(&quot;Payment Profile Name&quot;,&quot;&quot;);_newline  psFldList.SetProperty(&quot;Bill Profile Name&quot;,&quot;&quot;);_newline }_newline else if(&quot;Com Invoice Profile&quot; == bcName)_newline {_newline  psFldList.SetProperty(&quot;Payment Profile&quot;,           &quot;&quot;);_newline  psFldList.SetProperty(&quot;VFQA Payment Profile Name&quot;, &quot;&quot;);_newline  psFldList.SetProperty(&quot;Payment Method&quot;,            &quot;&quot;);_newline }_newline else if(&quot;Asset Mgmt - Asset (Order Mgmt)&quot; == bcName)_newline {_newline  psFldList.SetProperty(&quot;Product&quot;,           &quot;&quot;);_newline  psFldList.SetProperty(&quot;Product Id&quot;,        &quot;&quot;);_newline  psFldList.SetProperty(&quot;Parent Asset Id&quot;,   &quot;&quot;);_newline  psFldList.SetProperty(&quot;Root Asset Id&quot;,     &quot;&quot;);_newline  psFldList.SetProperty(&quot;Operating Status&quot;,  &quot;&quot;);_newline  psFldList.SetProperty(&quot;Status&quot;,            &quot;&quot;);_newline_newline  psFldList.SetProperty(&quot;Parent Account Id&quot;,       &quot;&quot;);_newline  psFldList.SetProperty(&quot;Root Account Id&quot;,         &quot;&quot;);_newline  psFldList.SetProperty(&quot;Compound Product Number&quot;, &quot;&quot;);_newline  psFldList.SetProperty(&quot;Integration Id&quot;,          &quot;&quot;);_newline  psFldList.SetProperty(&quot;Root Integration Id&quot;,     &quot;&quot;);_newline  psFldList.SetProperty(&quot;Billing Type&quot;,            &quot;&quot;);_newline  psFldList.SetProperty(&quot;Service Instance&quot;,        &quot;&quot;);_newline  psFldList.SetProperty(&quot;Product Type&quot;,            &quot;&quot;);_newline  psFldList.SetProperty(&quot;Prod Type&quot;,               &quot;&quot;);_newline  psFldList.SetProperty(&quot;Parent Billing Type&quot;,     &quot;&quot;);_newline  psFldList.SetProperty(&quot;Parent Service Instance&quot;, &quot;&quot;);_newline  psFldList.SetProperty(&quot;Cut Off Indicator Flag&quot;,  &quot;&quot;);_newline  psFldList.SetProperty(&quot;Owner Account Id&quot;,        &quot;&quot;);_newline  psFldList.SetProperty(&quot;Owner Contact Id&quot;,        &quot;&quot;);_newline  psFldList.SetProperty(&quot;Billing Profile Id&quot;,      &quot;&quot;);_newline }_newline else if(&quot;Asset Mgmt - Asset&quot; == bcName)_newline {_newline  psFldList.SetProperty(&quot;Product&quot;,           &quot;&quot;);_newline  psFldList.SetProperty(&quot;Product Id&quot;,        &quot;&quot;);_newline  psFldList.SetProperty(&quot;Parent Asset Id&quot;,   &quot;&quot;);_newline  psFldList.SetProperty(&quot;Root Asset Id&quot;,     &quot;&quot;);_newline  psFldList.SetProperty(&quot;Operating Status&quot;,  &quot;&quot;);_newline  psFldList.SetProperty(&quot;Status&quot;,            &quot;&quot;);_newline  psFldList.SetProperty(&quot;Root Account Id&quot;,         &quot;&quot;);_newline  psFldList.SetProperty(&quot;Compound Product Number&quot;, &quot;&quot;);_newline  psFldList.SetProperty(&quot;Integration Id&quot;,          &quot;&quot;);_newline  psFldList.SetProperty(&quot;Root Integration Id&quot;,     &quot;&quot;);_newline  psFldList.SetProperty(&quot;Billing Type&quot;,            &quot;&quot;);_newline  psFldList.SetProperty(&quot;Service Instance&quot;,        &quot;&quot;);_newline  psFldList.SetProperty(&quot;Product Type&quot;,            &quot;&quot;);_newline  psFldList.SetProperty(&quot;Prod Type&quot;,               &quot;&quot;);_newline  psFldList.SetProperty(&quot;Cut Off Indicator Flag&quot;,  &quot;&quot;);_newline  psFldList.SetProperty(&quot;Owner Account Id&quot;,        &quot;&quot;);_newline  psFldList.SetProperty(&quot;Owner Contact Id&quot;,        &quot;&quot;);_newline  psFldList.SetProperty(&quot;Billing Profile Id&quot;,      &quot;&quot;);_newline }_newline else if(&quot;Service Request&quot; == bcName)_newline {_newline  psFldList.SetProperty(&quot;INS Product&quot;,           &quot;&quot;); _newline  psFldList.SetProperty(&quot;INS Area&quot;,              &quot;&quot;); _newline  psFldList.SetProperty(&quot;INS Sub-Area&quot;,          &quot;&quot;); _newline  psFldList.SetProperty(&quot;Abstract&quot;,              &quot;&quot;); _newline  psFldList.SetProperty(&quot;Account Id&quot;,            &quot;&quot;); _newline  psFldList.SetProperty(&quot;Product Id&quot;,            &quot;&quot;); _newline  psFldList.SetProperty(&quot;Asset Id&quot;,              &quot;&quot;); _newline  psFldList.SetProperty(&quot;Area&quot;,                  &quot;&quot;); _newline  psFldList.SetProperty(&quot;Description&quot;,           &quot;&quot;); _newline  psFldList.SetProperty(&quot;Integration Id&quot;,        &quot;&quot;); _newline  psFldList.SetProperty(&quot;Owner&quot;,                 &quot;&quot;); _newline  psFldList.SetProperty(&quot;Priority&quot;,              &quot;&quot;); _newline  psFldList.SetProperty(&quot;Serial Number&quot;,         &quot;&quot;); _newline  psFldList.SetProperty(&quot;Severity&quot;,              &quot;&quot;); _newline  psFldList.SetProperty(&quot;Source&quot;,                &quot;&quot;); _newline  psFldList.SetProperty(&quot;Status&quot;,                &quot;&quot;); _newline  psFldList.SetProperty(&quot;Sub-Area No Constrain&quot;, &quot;&quot;); _newline  psFldList.SetProperty(&quot;Sub-Status&quot;,            &quot;&quot;); _newline  psFldList.SetProperty(&quot;Ticket Type&quot;,           &quot;&quot;); _newline  psFldList.SetProperty(&quot;CEM Planned Start Date&quot;,&quot;&quot;); _newline  psFldList.SetProperty(&quot;CEM Planned Completion Date&quot;,&quot;&quot;); _newline }_newline return psFldList;_newline}"
 Program_spcLanguage="JS"
 Name="func_usMultiFields"
 Sequence="28"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function func_usPositionNewLineItemInOLITree(strOrderId,strTBDOLIId,strParentProductId,strProdItemId,strProductPortId)_newline{_newline var strRetVal         = &quot;OK&quot;;_newline var boOrder:BusObject = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);_newline var bcOLI:BusComp     = boOrder.GetBusComp(&quot;Order Entry - Line Items (Simple)&quot;);_newline var strParentOLIId    = &quot;&quot;;_newline var strRootOLIId      = &quot;&quot;;_newline bcOLI.SetViewMode(AllView);_newline bcOLI.ClearToQuery();_newline bcOLI.ActivateField(&quot;Parent Order Item Id&quot;);_newline bcOLI.ActivateField(&quot;Root Order Item Id&quot;);_newline bcOLI.ActivateField(&quot;Prod Item Id&quot;);_newline bcOLI.ActivateField(&quot;Product Port Id&quot;);_newline//TheApplication().RaiseErrorText(&quot;parent:&quot; + strOrderId + &quot;,&quot; + strParentProductId + &quot;,&quot; + strTBDOLIId);_newline bcOLI.SetSearchExpr(&quot;[Order Header Id]=&apos;&quot; + strOrderId + &quot;&apos; AND [Product Id]=&apos;&quot; + strParentProductId + &quot;&apos;&quot;);_newline bcOLI.ExecuteQuery(ForwardOnly);_newline if(bcOLI.FirstRecord())_newline {_newline  strParentOLIId = bcOLI.GetFieldValue(&quot;Id&quot;);_newline  strRootOLIId   = bcOLI.GetFieldValue(&quot;Root Order Item Id&quot;);_newline  bcOLI.ClearToQuery();_newline  bcOLI.SetSearchExpr(&quot;[Order Header Id]=&apos;&quot; + strOrderId + &quot;&apos; AND [Id]=&apos;&quot; + strTBDOLIId + &quot;&apos;&quot;);_newline  bcOLI.ExecuteQuery(ForwardOnly);_newline  if(bcOLI.FirstRecord())_newline  {_newline   bcOLI.SetFieldValue(&quot;Parent Order Item Id&quot;, strParentOLIId);_newline   bcOLI.SetFieldValue(&quot;Root Order Item Id&quot;,   strRootOLIId);_newline   bcOLI.SetFieldValue(&quot;Prod Item Id&quot;,         strProdItemId);_newline   bcOLI.SetFieldValue(&quot;Product Port Id&quot;,      strProductPortId);_newline   bcOLI.WriteRecord();_newline  }_newline }_newline else_newline {_newline  strRetVal = &quot;HIE_usPOSITION_usERR&quot;;_newline }_newline bcOLI = null;_newline                boOrder=null;_newline return strRetVal;_newline}"
 Program_spcLanguage="JS"
 Name="func_usPositionNewLineItemInOLITree"
 Sequence="29"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function func_usPositionNewLineItemInOLITree_usNITESH(strOrderId,strTBDOLIId,strParentProductId,strProdItemId,strProductPortId)_newline{_newline var strRetVal         = &quot;OK&quot;;_newline var boOrder:BusObject = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);_newline var bcOLI:BusComp     = boOrder.GetBusComp(&quot;Order Entry - Line Items (Simple)&quot;);_newline var strParentOLIId    = &quot;&quot;;_newline var strRootOLIId      = &quot;&quot;;_newline bcOLI.SetViewMode(AllView);_newline bcOLI.ClearToQuery();_newline bcOLI.ActivateField(&quot;Parent Order Item Id&quot;);_newline bcOLI.ActivateField(&quot;Root Order Item Id&quot;);_newline bcOLI.ActivateField(&quot;Prod Item Id&quot;);_newline bcOLI.ActivateField(&quot;Product Port Id&quot;);_newlinebcOLI.ActivateField(&quot;Product Type&quot;);_newline//TheApplication().RaiseErrorText(&quot;parent:&quot; + strOrderId + &quot;,&quot; + strParentProductId + &quot;,&quot; + strTBDOLIId);_newline bcOLI.SetSearchExpr(&quot;[Order Header Id]=&apos;&quot; + strOrderId + &quot;&apos; AND [Product Type]=&apos;Commit Plan&apos;&quot;);_newline bcOLI.ExecuteQuery(ForwardOnly);_newline if(bcOLI.FirstRecord())_newline {_newline  strParentOLIId = bcOLI.GetFieldValue(&quot;Id&quot;);_newline  strRootOLIId   = bcOLI.GetFieldValue(&quot;Root Order Item Id&quot;);_newline  bcOLI.ClearToQuery();_newline  //bcOLI.SetSearchExpr(&quot;[Order Header Id]=&apos;&quot; + strOrderId + &quot;&apos; AND [Id]=&apos;&quot; + strTBDOLIId + &quot;&apos;&quot;);_newlinebcOLI.SetSearchExpr(&quot;[Order Header Id]=&apos;&quot; + strOrderId + &quot;&apos; AND [Id]=&apos;&quot; + strTBDOLIId + &quot;&apos;&quot;);_newline  bcOLI.ExecuteQuery(ForwardOnly);_newline  if(bcOLI.FirstRecord())_newline  {_newline   bcOLI.SetFieldValue(&quot;Parent Order Item Id&quot;, strParentOLIId);_newline   bcOLI.SetFieldValue(&quot;Root Order Item Id&quot;,   strRootOLIId);_newline   bcOLI.SetFieldValue(&quot;Prod Item Id&quot;,         strProdItemId);_newline   bcOLI.SetFieldValue(&quot;Product Port Id&quot;,      strProductPortId);_newline   bcOLI.WriteRecord();_newline  }_newline }_newline else_newline {_newline  strRetVal = &quot;HIE_usPOSITION_usERR&quot;;_newline }_newline bcOLI = null;_newline                boOrder=null;_newline return strRetVal;_newline}"
 Program_spcLanguage="JS"
 Name="func_usPositionNewLineItemInOLITree_usNITESH"
 Sequence="30"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="/*-------------+------+--------+----------------------------------------------  _newlineDate(YYYYMMDD) | Ver  | By     | Description of Change  _newline---------------+------+--------+----------------------------------------------  _newline20140205       | 1.00 | exist| existing _newline20140221       | 1.1  | ARPAN  | Incorporated System Outgoing Bar/Exit Collections Resume  _newlineand System Bar removal _newline20140325       | 1.2  | ARPAN | Defect: 8722/8791 Incorporated Promise To Pay and Asset Don&apos;t bar flag issue. _newline-------------+------+--------+------------------------------------------------*/ _newline _newlinefunction func_usProcessCollectionsForBillProfile(Inputs, Outputs) _newline{ _newline var strErrCode=&quot;&quot;, strErrMesg=&quot;&quot;; _newline var boMain,bcAsset,boEDR,bcEDR,bcAttr; _newline var strServiceId,isRec; _newline var strContactId=&quot;&quot;,strAccntId=&quot;&quot;,strAssetStatus=&quot;&quot;,strAssetId=&quot;&quot;; _newline var strRequestType = Inputs.GetProperty(&quot;Request Type&quot;); _newline var strExtRefIdMain = Inputs.GetProperty(&quot;Ext Ref Id&quot;); _newline var strEDRBatchId = Inputs.GetProperty(&quot;EDRBatchId&quot;); _newline var strEDRChildId = Inputs.GetProperty(&quot;EDRChildId&quot;); _newline var strCIPId = Inputs.GetProperty(&quot;Bill Profile Id&quot;); _newline var strExtRefIdChld,strChildInfo,strAssetIntegId; _newline var strChildInfo1; _newline var strChildInfoFinal; _newline var strProdType; _newline var strProdName; _newline var vLOVBO; _newline var vLOVBC; _newline var strActionCode; _newline var strParProdName; _newline var vSearchExpr; _newline var vDonotBar = &quot;&quot;; _newline var strOrderValid = &quot;Y&quot; _newline//take the bill profle from inputs _newline//check that it is postpaid (generally should be so) _newline//for all assets with the given bill profile process the record _newline//either create child EDRs for processing OR Use the grandchild name value records to store the processing details _newline//Query parent using Ext Ref Id _newline boEDR = TheApplication().GetBusObject(&quot;TM BO Bulk Job Details&quot;); _newline bcEDR= boEDR.GetBusComp(&quot;TM Bulk Job Batch Details&quot;); _newline bcEDR.SetViewMode(AllView); _newline bcEDR.ClearToQuery(); _newline bcEDR.SetSearchExpr(&quot;[Id]=&apos;&quot; + strEDRChildId + &quot;&apos;&quot;); _newline bcEDR.ExecuteQuery(ForwardOnly); _newline var isRecord = bcEDR.FirstRecord(); _newline if(isRecord) _newline { _newline  bcAttr = boEDR.GetBusComp(&quot;TM Bulk Job Batch Details Attrib&quot;); _newline  bcAttr.SetViewMode(AllView); _newline  bcAttr.ActivateField(&quot;Name&quot;); _newline  bcAttr.ActivateField(&quot;Comments&quot;); _newline  bcAttr.ActivateField(&quot;Data Type&quot;); _newline  bcAttr.ActivateField(&quot;Text Value&quot;); _newline//query all assets with matching bill profile _newline  boMain = TheApplication().GetBusObject(&quot;Account&quot;);//Asset Management _newline  bcAsset= boMain.GetBusComp(&quot;Asset Mgmt - Asset (Order Mgmt)&quot;);//Asset Mgmt - Asset _newline  bcAsset.ActivateMultipleFields(func_usMultiFields(&quot;Asset Mgmt - Asset (Order Mgmt)&quot;)); _newline  bcAsset.ActivateField(&quot;Cut Off Indicator Flag&quot;); _newline  bcAsset.SetViewMode(AllView); _newline  bcAsset.ClearToQuery(); _newline  bcAsset.SetSearchExpr(&quot;[Billing Profile Id]=&apos;&quot; + strCIPId + &quot;&apos; AND [Parent Asset Id] IS NULL AND [Prod Type]&lt;&gt;&apos;Promotion&apos; AND [Status] &lt;&gt; &apos;Inactive&apos;&quot;); _newline  //bcAsset.SetSearchExpr(&quot;[Billing Profile Id]=&apos;&quot; + strCIPId + &quot;&apos; AND [Parent Asset Id] IS NULL&quot;); _newline//fetch all promotions and other Root Assets which are not associated with any promotion _newline   //bcAsset.SetSearchExpr(&quot;[Billing Profile Id]=&apos;&quot; + strCIPId + &quot;&apos; AND [Parent Asset Id] IS NULL AND ([Prod Type]=&apos;Promotion&apos; OR ([Prod Type]&lt;&gt;&apos;Promotion&apos; AND [Prod Prom Instance Id] IS NULL))&quot;); _newline  bcAsset.ExecuteQuery(ForwardOnly); _newline  isRec = bcAsset.FirstRecord(); _newline  while(isRec) _newline  { _newline   strServiceId = bcAsset.GetFieldValue(&quot;Serial Number&quot;); _newline   strContactId = bcAsset.GetFieldValue(&quot;Owner Contact Id&quot;); _newline   strAccntId = bcAsset.GetFieldValue(&quot;Owner Account Id&quot;); _newline   strAssetStatus = bcAsset.GetFieldValue(&quot;Status&quot;); _newline   strAssetId = bcAsset.GetFieldValue(&quot;Id&quot;); _newline   strProdType = bcAsset.GetFieldValue(&quot;Prod Type&quot;); _newline   strProdName = bcAsset.GetFieldValue(&quot;Product Name&quot;); _newline   vDonotBar = bcAsset.GetFieldValue(&quot;Cut Off Indicator Flag&quot;); _newline   var strComments = strAssetId +&quot;;&quot;+ strProdName; _newline   if((&quot;&quot;!=strServiceId)) _newline   { _newline    if((&quot;Y&quot;==vDonotBar &amp;&amp; (&quot;Credit:Exit Collection&quot; ==strRequestType || &quot;Credit:Promise To Pay&quot; ==strRequestType)) || (&quot;Y&quot;!=vDonotBar &amp;&amp; (&quot;Credit:Outgoing Bar&quot; ==strRequestType || &quot;Credit:Incoming Bar&quot; ==strRequestType || &quot;Credit:Exit Collection&quot; ==strRequestType || &quot;Credit:Promise To Pay&quot; ==strRequestType))) _newline { _newline    try _newline    { _newline     bcAttr.NewRecord(NewBefore); _newline     bcAttr.SetFieldValue(&quot;Data Type&quot;, &quot;Text&quot;); _newline     bcAttr.SetFieldValue(&quot;Text Value&quot;, strServiceId); _newline     bcAttr.SetFieldValue(&quot;Comments&quot;,  strComments); _newline     bcAttr.SetFieldValue(&quot;Name&quot;,     bcAsset.GetFieldValue(&quot;Integration Id&quot;)); _newline     bcAttr.WriteRecord(); _newline    } _newline    catch(e) _newline    { _newline     strErrCode=&quot;REC_usCREATION_usERR&quot;; _newline     strErrCode=e.errCode + &quot;:&quot; + e.errText; _newline    } _newline   } _newline   else _newline   { _newline    strErrCode= &quot;Asset Do Not Bar flag is Active&quot;; _newline   }  _newline   isRec = bcAsset.NextRecord(); _newline   } _newline  } _newline } _newline//now process each child record _newline bcAttr.ClearToQuery(); _newline bcAttr.ExecuteQuery(ForwardOnly); _newline isRec = bcAttr.FirstRecord(); _newline while(isRec) _newline { _newline  strAssetIntegId = bcAttr.GetFieldValue(&quot;Name&quot;); _newline  strServiceId = bcAttr.GetFieldValue(&quot;Text Value&quot;); _newline  strComments = bcAttr.GetFieldValue(&quot;Comments&quot;); _newline  strComments = strComments.split(&quot;;&quot;); _newline  strAssetId = strComments[0]; _newline  strProdName = strComments[1]; _newline  var Length = strExtRefIdMain.length; _newline  strExtRefIdMain = strExtRefIdMain.substring(Length - 9); _newline  strExtRefIdChld = strExtRefIdMain+&quot;:&quot;+strServiceId; _newline  Inputs.SetProperty(&quot;Ext Ref Id&quot;, strExtRefIdChld); _newline  Inputs.SetProperty(&quot;Integration Id&quot;, strAssetIntegId); _newline  Inputs.SetProperty(&quot;Account Id&quot;, strAccntId); _newline  Inputs.SetProperty(&quot;Contact Id&quot;, strContactId); _newline  Inputs.SetProperty(&quot;Billing Profile Id&quot;, strCIPId); _newline  TheApplication().SetProfileAttr(&quot;CurrentOrderId&quot;, &quot;&quot;); _newline// 1.1 Below: Check for Exsiting Future Dated Order if any Cancel it _newline      func_usCancelFDO(Inputs, Outputs); _newline// 1.1 Above:  _newline  if(&quot;Credit:Outgoing Bar&quot; == strRequestType) _newline  { _newline/* 1.1 Below: Look up for Barring products and there parent bundles,If any new product comes it should be added in below  _newlineLOV with pattern like Product Name :A;B;C ,in similar way Parent Products and Action code should get added,Number of records should be same for  _newlineProduct Name,Action Code and Parent product name with ; seperated values*/ _newline _newline    vLOVBO = TheApplication().GetBusObject(&quot;List Of Values&quot;); _newline          vLOVBC = vLOVBO.GetBusComp(&quot;List Of Values&quot;); _newline       vLOVBC.ActivateField(&quot;Type&quot;); _newline          vLOVBC.ActivateField(&quot;Name&quot;); _newline          vLOVBC.ActivateField(&quot;Value&quot;); _newline          vLOVBC.ActivateField(&quot;High&quot;); _newline    vLOVBC.ActivateField(&quot;Low&quot;); _newline          vLOVBC.ClearToQuery(); _newline          vLOVBC.SetViewMode(AllView); _newline          vSearchExpr = &quot;[Type] = &apos;VFQA_usBAR_usPRODUCT&apos; AND [Name] = &apos;&quot;+strProdName+&quot;&apos; &quot;;  _newline          vLOVBC.SetSearchExpr(vSearchExpr); _newline          vLOVBC.ExecuteQuery(ForwardOnly); _newline          if(vLOVBC.FirstRecord() ) _newline            { _newline    strProdName = vLOVBC.GetFieldValue(&quot;High&quot;); _newline    strActionCode = vLOVBC.GetFieldValue(&quot;Value&quot;); _newline    strParProdName = vLOVBC.GetFieldValue(&quot;Low&quot;); _newline// 1.1 Below:For Credit Outgoing Bar Create Modify Order _newline       Inputs.SetProperty(&quot;Product Names&quot;, strProdName); _newline             Inputs.SetProperty(&quot;Action Codes&quot;, strActionCode); _newline             Inputs.SetProperty(&quot;Parent Product Names&quot;, strParProdName); _newline             Inputs.SetProperty(&quot;Asset Integration Id&quot;, strAssetIntegId); _newline    Inputs.SetProperty(&quot;Order Validation&quot;, strOrderValid); _newline    Inputs.SetProperty(&quot;ByPass Validation&quot;, &quot;Y&quot;);//NandeeshS: Added to bypass Validation_newline             func_usCreateModifyOrderGeneric(Inputs, Outputs); _newline             strChildInfo = Outputs.GetProperty(&quot;Order Id&quot;)+&quot;:&quot;+Outputs.GetProperty(&quot;Error Code&quot;)+&quot;:&quot;+Outputs.GetProperty(&quot;Error Message&quot;); _newline             bcAttr.SetFieldValue(&quot;Comments&quot;,  strChildInfo.substring(0,255)); _newline      } _newline   else _newline   { _newline    bcAttr.SetFieldValue(&quot;Comments&quot;, &quot;Outgoing Bar not required for Promotions&quot;); _newline   } _newline  } _newline// 1.1 Above _newline  else if(&quot;Credit:Incoming Bar&quot; == strRequestType)//this is Suspend _newline  { _newline//Nandesh:27052014:Added Script Modify order to delete System Bar product then Suspend the order _newlineTheApplication().SetProfileAttr(&quot;CurrentOrderId&quot;, &quot;&quot;); _newline   Inputs.SetProperty(&quot;Asset Id&quot;, strAssetId);  _newline   Inputs.SetProperty(&quot;Parent Product Names&quot;, strProdName); _newline  //Inputs.SetProperty(&quot;StrAssetStatus&quot;, strAssetStatus);//NandeeshS Added to differntiate Asset _newline func_usCheckandRemoveBar(Inputs, Outputs); _newline strChildInfo = Outputs.GetProperty(&quot;Comment_usStatus&quot;);  _newline bcAttr.SetFieldValue(&quot;Comments&quot;, strChildInfo.substring(0,255)); _newline//Nandeesh ended _newline //TheApplication().SetProfileAttr(&quot;CurrentOrderId&quot;, &quot;&quot;);  _newline  _newline   Inputs.SetProperty(&quot;Request Type&quot;,   &quot;Suspend&quot;); _newline   Inputs.SetProperty(&quot;Request Source&quot;, &quot;System&quot;); _newline   func_usProcessSuspendResumeSub(Inputs, Outputs); _newline   strChildInfo = Outputs.GetProperty(&quot;OrderId&quot;)+&quot;:&quot;+Outputs.GetProperty(&quot;Error Code&quot;)+&quot;:&quot;+Outputs.GetProperty(&quot;Error Message&quot;); _newline   bcAttr.SetFieldValue(&quot;Comments&quot;,  strChildInfo.substring(0,255)); _newline  } _newline  else if(&quot;Credit:Exit Collection&quot; == strRequestType || &quot;Credit:Promise To Pay&quot; == strRequestType)//this is Resume _newline  { _newline//this is tricky, if asset is suspended by system resume it _newline//if asset is active (OR suspended by user) and barred by some specific system bar product, remove that bar product _newline// 1.1 Below:If Asset status is suspended create resumeorder _newline   if(&quot;Suspended&quot; == strAssetStatus) _newline   { _newline _newline// 1.1 Below:For Exit collection Accounts check if there is any System Bar if present remove it _newline// [MAYANK]CHANGING THE SEQUENCE  OF SUSPEND AND MODIFY , NOW MODIFY WILL BE RAISED FIRST AND THEN RESUME _newline   TheApplication().SetProfileAttr(&quot;CurrentOrderId&quot;, &quot;&quot;);  _newline   Inputs.SetProperty(&quot;Asset Id&quot;, strAssetId); _newline   Inputs.SetProperty(&quot;Parent Product Names&quot;, strProdName); _newline   func_usCheckandRemoveBar(Inputs, Outputs); _newline   strChildInfo = Outputs.GetProperty(&quot;Comment_usStatus&quot;); _newline   bcAttr.SetFieldValue(&quot;Comments&quot;, strChildInfo.substring(0,255)); _newline _newline   TheApplication().SetProfileAttr(&quot;CurrentOrderId&quot;, &quot;&quot;); _newline _newline// 1.1 Below:For Exit collection Accounts First Create a Full Resume  _newline _newline _newline   Inputs.SetProperty(&quot;Request Type&quot;,   &quot;Resume&quot;); _newline   Inputs.SetProperty(&quot;Request Source&quot;, &quot;System&quot;); _newline  func_usProcessSuspendResumeSub(Inputs, Outputs); _newline   strChildInfo = Outputs.GetProperty(&quot;OrderId&quot;)+&quot;:&quot;+Outputs.GetProperty(&quot;Error Code&quot;)+&quot;:&quot;+Outputs.GetProperty(&quot;Error Message&quot;); _newline   //func_usCheckandRemoveBar(Inputs, Outputs); _newline _newline   } _newline   else _newline   { _newline// 1.1 Below:If Asset is not in Suspended status craete Modify order to remove System Bar products if any present _newline   TheApplication().SetProfileAttr(&quot;CurrentOrderId&quot;, &quot;&quot;); _newline   Inputs.SetProperty(&quot;Asset Id&quot;, strAssetId); _newline   Inputs.SetProperty(&quot;Parent Product Names&quot;, strProdName); _newline   Inputs.SetProperty(&quot;NotAssertise&quot;, &quot;Y&quot;);//NandeeshS Added to differntiate Asset _newline   func_usCheckandRemoveBar(Inputs, Outputs); _newline   strChildInfo = Outputs.GetProperty(&quot;Comment_usStatus&quot;); _newline   bcAttr.SetFieldValue(&quot;Comments&quot;, strChildInfo.substring(0,255)); _newline   } _newline _newline  } _newline// 1.1 Above _newline  else if(&quot;Credit:Account Termination&quot; == strRequestType) _newline  { _newline//   Inputs.SetProperty(&quot;Reason&quot;,&quot;Payment Failure&quot;); _newline//   func_usDisconnectOrder(Inputs, Outputs); _newline//   strChildInfo = Outputs.GetProperty(&quot;OrderId&quot;)+&quot;:&quot;+Outputs.GetProperty(&quot;Error Code&quot;)+&quot;:&quot;+Outputs.GetProperty(&quot;Error Message&quot;); _newline   bcAttr.SetFieldValue(&quot;Comments&quot;,  &quot;TO_usBE_usPROCESSED_usMANUALLY&quot;); _newline  } _newline  isRec = bcAttr.NextRecord(); _newline } _newline Outputs.SetProperty(&quot;Error Code&quot;,    strErrCode); _newline Outputs.SetProperty(&quot;Error Message&quot;, strErrMesg); _newline  _newline strComments = null; _newline vLOVBC=null; _newline vLOVBO=null; _newline bcAsset=null; _newline boMain=null; _newline bcEDR=null; _newline boEDR=null; _newline return CancelOperation; _newline}"
 Program_spcLanguage="JS"
 Name="func_usProcessCollectionsForBillProfile"
 Sequence="31"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="/*-------+------+--------+----------------------------------------------_newlineYYYYMMDD | Ver  | By     | Description of Change_newline---------+------+--------+----------------------------------------------_newline20140213 | 1.00 | PPB    | Function to create an EDR record for portedout number - best mate cleanup_newline20140214 | 1.1  | PPB    | Set a dummy default bestmate when removing_newline20140217 | 1.2  | PPB    | Remove the OLI if all the remaining bestmate numbers are dummy_newline---------+------+--------+--------------------------------------------*/_newlinefunction func_usProcessEDR_usBestMateCleanup(Inputs, Outputs)_newline{_newline//take the portedout number from RecordId and check if it is stored as best mate on any asset as attribute, process modify orders_newline//must add index on S_usASSET_usXA.CHAR_usVAL_newline var strErrCode=&quot;OK&quot;, strErrMesg=&quot;&quot;,strErrInfo=&quot;&quot;;_newline var strTemp,arrTemp,strOrderId,strAccntId,strCIPId,strConId;_newline var bsUtil,psOp,psIp,isRec;_newline var boEDR,bcEDR,bcEDRAttr;_newline var boOrder,bcOrder,bcOLI,bcOXA;_newline var boMain,bcAsset,bcAttr;_newline var strXAId,strAssetId,strRootAssetId,strAssetIntegId,strRootAssetIntegId,recCnt=0;_newline var strEDRBatchId = Inputs.GetProperty(&quot;EDRBatchId&quot;);_newline var strEDRChildId = Inputs.GetProperty(&quot;EDRChildId&quot;);_newline var strNumber     = Inputs.GetProperty(&quot;Ext Ref Id&quot;);_newline var strToBeRefId  = &quot;NPBM&quot;+strNumber;_newline var strDummyNumber= &quot;97499999999&quot;;_newline_newline boEDR = TheApplication().GetBusObject(&quot;TM BO Bulk Job Details&quot;);_newline bcEDR= boEDR.GetBusComp(&quot;TM Bulk Job Batch Details&quot;);_newline bcEDR.SetViewMode(AllView);_newline bcEDR.ClearToQuery();_newline bcEDR.SetSearchExpr(&quot;[Id]=&apos;&quot; + strEDRChildId + &quot;&apos;&quot;);_newline bcEDR.ExecuteQuery(ForwardOnly);_newline if(bcEDR.FirstRecord())_newline {_newline  bcEDRAttr = boEDR.GetBusComp(&quot;TM Bulk Job Batch Details Attrib&quot;);_newline  bcEDRAttr.SetViewMode(AllView);_newline  bcEDRAttr.ActivateField(&quot;Name&quot;);_newline  bcEDRAttr.ActivateField(&quot;Comments&quot;);_newline  bcEDRAttr.ActivateField(&quot;Data Type&quot;);_newline  bcEDRAttr.ActivateField(&quot;Text Value&quot;);_newline  bcEDRAttr.ActivateField(&quot;Comments&quot;);_newline_newline  boMain=TheApplication().GetBusObject(&quot;Account&quot;);_newline  bcAttr=boMain.GetBusComp(&quot;Asset Mgmt - Asset XA&quot;);_newline  bcAttr.SetViewMode(AllView);_newline  bcAttr.ActivateField(&quot;Root Object Id&quot;);_newline  bcAttr.ActivateField(&quot;Object Id&quot;);_newline  bcAttr.ActivateField(&quot;Text Value&quot;);_newline  bcAttr.ActivateField(&quot;Name&quot;);_newline  bcAttr.ClearToQuery();_newline  bcAttr.SetSearchExpr(&quot;[Name] LIKE &apos;My Favourite Friend*&apos; AND [Text Value]=&apos;&quot; + strNumber + &quot;&apos;&quot;);_newline  bcAttr.ExecuteQuery(ForwardOnly);_newline  isRec=bcAttr.FirstRecord();_newline  while(isRec)_newline  {_newline//check asset to be active_newline   strXAId =   bcAttr.GetFieldValue(&quot;Id&quot;);_newline   strAssetId=   bcAttr.GetFieldValue(&quot;Object Id&quot;);_newline   strRootAssetId=   bcAttr.GetFieldValue(&quot;Root Object Id&quot;);_newline_newline   bcAsset=boMain.GetBusComp(&quot;Asset Mgmt - Asset (Order Mgmt)&quot;);_newline   bcAsset.ActivateField(&quot;Integration Id&quot;);_newline   bcAsset.ActivateField(&quot;Root Integration Id&quot;);_newline   bcAsset.ActivateField(&quot;Owner Account Id&quot;);_newline   bcAsset.ActivateField(&quot;Billing Profile Id&quot;);_newline   bcAsset.ActivateField(&quot;Owner Contact Id&quot;);_newline_newline   bcAsset.SetViewMode(AllView);_newline   bcAsset.ClearToQuery();_newline   bcAsset.SetSearchExpr(&quot;[Id]=&apos;&quot; + strAssetId + &quot;&apos; AND [Status]&lt;&gt;&apos;Inactive&apos;&quot;);//can be suspended_newline   bcAsset.ExecuteQuery(ForwardOnly);_newline   if(bcAsset.FirstRecord())_newline   {//create a EDR GChild record_newline    recCnt++;_newline    strRootAssetIntegId=bcAsset.GetFieldValue(&quot;Root Integration Id&quot;);_newline    strAssetIntegId=bcAsset.GetFieldValue(&quot;Integration Id&quot;);_newline    strAccntId=bcAsset.GetFieldValue(&quot;Owner Account Id&quot;);_newline    strCIPId=bcAsset.GetFieldValue(&quot;Billing Profile Id&quot;);_newline    strConId=bcAsset.GetFieldValue(&quot;Owner Contact Id&quot;);_newline    try_newline    {_newline     bcEDRAttr.NewRecord(NewBefore);_newline     bcEDRAttr.SetFieldValue(&quot;Data Type&quot;, &quot;Text&quot;);_newline     bcEDRAttr.SetFieldValue(&quot;Comments&quot;,  &quot;&quot;);_newline     bcEDRAttr.SetFieldValue(&quot;Name&quot;,     strRootAssetIntegId);_newline     bcEDRAttr.SetFieldValue(&quot;Text Value&quot;,&quot;AccntId;&quot;+strAccntId + &quot;;RootIntId;&quot;+strRootAssetIntegId + &quot;;IntegId;&quot; + strAssetIntegId);_newline     bcEDRAttr.WriteRecord();_newline    }_newline    catch(e)_newline    {//may have been already created_newline     strErrInfo=e.errCode + &quot;:&quot; + e.errText;_newline    }_newline   }_newline   isRec=bcAttr.NextRecord();_newline  }_newline  if(0==recCnt)_newline  {_newline   strErrMesg=&quot;Ported out number &quot; + strNumber + &quot; was not found on any best mate attribute.&quot;;_newline   strErrCode=&quot;OK&quot;;_newline   Outputs.SetProperty(&quot;DeleteEDRRecord&quot;,&quot;N&quot;);_newline  }_newline  else_newline  {//process the child records created in previous block of code_newline   psIp=TheApplication().NewPropertySet();_newline   bsUtil=TheApplication().GetService(&quot;Workflow Process Manager&quot;);_newline_newline   bcEDRAttr.ClearToQuery();_newline   bcEDRAttr.ExecuteQuery(ForwardOnly);_newline   isRec=bcEDRAttr.FirstRecord();_newline   while(isRec)_newline   {_newline//0       1       2         3       4       5        6       7_newline//AccntId;1-2FXQI;RootIntId;1-2GS8J;IntegId;1-A2Z1XB;OrderId;1-B46O7V_newline    strTemp=bcEDRAttr.GetFieldValue(&quot;Text Value&quot;);_newline    arrTemp=strTemp.split(&quot;;&quot;);_newline    psIp.SetProperty(&quot;AccountId&quot;,arrTemp[1]);_newline    psIp.SetProperty(&quot;AssetIntegrationId&quot;, arrTemp[3]);_newline    psOp=TheApplication().NewPropertySet();_newline//check order_newline    boOrder=TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);_newline    bcOrder=boOrder.GetBusComp(&quot;Order Entry - Orders&quot;);_newline    bcOLI=boOrder.GetBusComp(&quot;Order Entry - Line Items&quot;);//My Favourite Friend – Best Mate*_newline    bcOXA=boOrder.GetBusComp(&quot;Order Item XA&quot;);_newline_newline    bcOrder.SetViewMode(AllView);_newline    bcOrder.ActivateField(&quot;Back Office Order Number&quot;);_newline    bcOrder.ActivateField(&quot;Billing Profile Id&quot;);_newline    bcOrder.ActivateField(&quot;Contact Id&quot;);_newline// bcOrder.ActivateField(&quot;Charged Flag&quot;); //Commented by AMITB for Paid Flag removal_newline    bcOLI.SetViewMode(AllView);_newline    bcOLI.ActivateField(&quot;Action Code&quot;);_newline    bcOXA.SetViewMode(AllView);_newline    bcOXA.ActivateField(&quot;Text Value&quot;);_newline    bcOXA.ActivateField(&quot;Previous Text Value&quot;);_newline    bcOXA.ActivateField(&quot;Action Code&quot;);_newline    bcOXA.ActivateField(&quot;Name&quot;);_newline_newline    bcOrder.ClearToQuery();_newline    bcOrder.SetSearchExpr(&quot;[Back Office Order Number]=&apos;&quot;+ strToBeRefId + arrTemp[3] + &quot;&apos;&quot;);_newline    bcOrder.ExecuteQuery(ForwardOnly);_newline_newline    if(bcOrder.FirstRecord())_newline     bcEDRAttr.SetFieldValue(&quot;Comments&quot;,&quot;ORDER_usALREADY_usCREATED:&quot; + bcOrder.GetFieldValue(&quot;Id&quot;));//already processed_newline    else_newline    {_newline     psIp.SetProperty(&quot;ProcessName&quot;, &quot;SISOMModifyWebService-Order&quot;);_newline     bsUtil.InvokeMethod(&quot;RunProcess&quot;, psIp, psOp);_newline     strOrderId=psOp.GetProperty(&quot;ActiveDocumentId&quot;);_newline     bcOrder.ClearToQuery();_newline     bcOrder.SetSearchExpr(&quot;[Id]=&apos;&quot;+ strOrderId + &quot;&apos;&quot;);_newline     bcOrder.ExecuteQuery(ForwardOnly);_newline_newline     if(bcOrder.FirstRecord())_newline     {_newline//manage the OLI_newline      bcOLI.ClearToQuery();_newline      bcOLI.SetSearchExpr(&quot;[Asset Integration Id]=&apos;&quot;+arrTemp[5]+&quot;&apos;&quot;);//get the OLI using asset integ id, else product names can be various_newline      bcOLI.ExecuteQuery(ForwardOnly);_newline      if(bcOLI.FirstRecord())_newline      {_newline       bcOXA.ClearToQuery();_newline       bcOXA.SetSearchExpr(&quot;[Text Value] IS NOT NULL AND [Text Value]&lt;&gt;&apos;&quot; + strNumber + &quot;&apos; AND [Text Value]&lt;&gt;&apos;&quot; + strDummyNumber + &quot;&apos;&quot;);_newline       bcOXA.ExecuteQuery(ForwardOnly);_newline       if(bcOXA.FirstRecord())_newline       {//multiple non-dummy best mate other than current port-out number, set dummy to correct oli XA_newline        bcOXA.ClearToQuery();_newline        bcOXA.SetSearchExpr(&quot;[Text Value]=&apos;&quot; + strNumber + &quot;&apos;&quot;);_newline        bcOXA.ExecuteQuery(ForwardOnly);_newline        if(bcOXA.FirstRecord())_newline        {_newline         bcOXA.SetFieldValue(&quot;Previous Text Value&quot;,strNumber);_newline         bcOXA.SetFieldValue(&quot;Text Value&quot;, strDummyNumber);_newline         bcOXA.SetFieldValue(&quot;Action Code&quot;,&quot;Update&quot;);_newline         bcOXA.WriteRecord();_newline         bcOLI.SetFieldValue(&quot;Action Code&quot;,&quot;Update&quot;);_newline         bcOLI.WriteRecord();_newline        }_newline       }_newline       else_newline       {//no non-dummy best mate other than current port-out number, set delete on OLI_newline        bcOLI.SetFieldValue(&quot;Action Code&quot;,&quot;Delete&quot;);_newline        bcOLI.WriteRecord();_newline       }_newline      }_newline//submit the order and ignore error_newline      bcEDRAttr.SetFieldValue(&quot;Text Value&quot;,strTemp + &quot;;OrderId;&quot; + strOrderId);_newline      bcOrder.SetFieldValue(&quot;Billing Profile Id&quot;,strCIPId);_newline      bcOrder.SetFieldValue(&quot;Contact Id&quot;,strConId);_newline      bcOrder.SetFieldValue(&quot;Back Office Order Number&quot;,strToBeRefId + arrTemp[3]);_newline     // bcOrder.SetFieldValue(&quot;Charged Flag&quot;,&quot;Y&quot;); //Commented by AMITB for Paid Flag removal_newline      bcOrder.WriteRecord();_newline      psIp.SetProperty(&quot;Fulfillment Mode&quot;,&quot;Deliver&quot;);_newline      psIp.SetProperty(&quot;RowId&quot;, strOrderId);_newline      psIp.SetProperty(&quot;ProcessName&quot;, &quot;SISOMBillingSubmitOrderWebService&quot;);_newline      try_newline      {_newline       bsUtil.InvokeMethod(&quot;RunProcess&quot;, psIp, psOp);_newline       bcEDRAttr.SetFieldValue(&quot;Comments&quot;,&quot;ORDER_usSUBMITTED&quot;);_newline      }_newline      catch(e)_newline      {_newline       strErrInfo=e.errCode + &quot;:&quot;  + e.errText;_newline       bcEDRAttr.SetFieldValue(&quot;Comments&quot;,&quot;ORDER_usSUBMIT_usERROR:&quot;+strErrInfo.substring(0,230));_newline      }_newline     }_newline     else_newline      bcEDRAttr.SetFieldValue(&quot;Comments&quot;,&quot;MODIFY_usORDER_usERROR&quot;);_newline    }_newline    bcEDRAttr.WriteRecord();_newline    isRec=bcEDRAttr.NextRecord();_newline   }_newline   strErrMesg=&quot;Ported out number &quot; + strNumber + &quot; found on &quot; + recCnt + &quot; other numbers as best mate, the association was removed.&quot;;_newline   strErrCode=&quot;OK&quot;;_newline   Outputs.SetProperty(&quot;DeleteEDRRecord&quot;,&quot;N&quot;);_newline  }_newline }_newline bsUtil = null;_newline psOp = null;_newline psIp = null;_newline bcAttr = null;_newline bcAsset = null;_newline boMain = null;_newline bcEDRAttr=null;_newline bcEDR=null;_newline boEDR=null;_newline arrTemp=null;_newline bcOXA=null;_newline bcOLI=null;_newline bcOrder=null;_newline boOrder=null;_newline Outputs.SetProperty(&quot;Error Code&quot;,strErrCode);_newline Outputs.SetProperty(&quot;Error Message&quot;,strErrMesg);_newline return CancelOperation;_newline}"
 Program_spcLanguage="JS"
 Name="func_usProcessEDR_usBestMateCleanup"
 Sequence="32"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="/*-------+------+--------+----------------------------------------------_newlineYYYYMMDD | Ver  | By     | Description of Change_newline---------+------+--------+----------------------------------------------_newline20131112 | 1.00 | Nitesh | First version - Brought from Old stack based on decision to use AS IS design _newline20131217 | 1.01 | PPB    | Seperate file loader function for BP configured_newline---------+------+--------+--------------------------------------------*/_newlinefunction func_usProcessFiles(Inputs,Outputs)_newline{_newline//the command to print the file names will be, name sorted_newline//for dos _newline//dir [directory]\[pattern] /ON /B &gt; [directory]\filelist.txt_newline//for unix??_newline//ls [directory]/[pattern] | sort &gt; [directory]/filelist.txt_newline//populate the filenames in a propertyset, simple to call _newline var strBatchType    = Inputs.GetProperty(&quot;BatchType&quot;);_newline var strPattern      = Inputs.GetProperty(&quot;FilePattern&quot;);_newline var strPath         = Inputs.GetProperty(&quot;DirectoryPath&quot;);_newline var strPathResult   = Inputs.GetProperty(&quot;DirectoryPathResult&quot;);_newline var strPathTarget   = Inputs.GetProperty(&quot;DirectoryPathTarget&quot;);_newline var strDeleteSource = Inputs.GetProperty(&quot;DeleteSource&quot;);_newline strDeleteSource     = strDeleteSource.toLowerCase();_newline var bDeleteSource   = false;_newline if(&quot;true&quot;==strDeleteSource || &quot;y&quot;==strDeleteSource) bDeleteSource = true;_newline var strFNameForList = strPath + &quot;file_uslist_usto_usprocess.lst&quot;;//use some file name which is not obvious_newline var iCutLen         = 1 + strPath.length;_newline//must get syspref EECC_usSIEBEL_usSERVER_usOS_newline var strCMD          = &quot;&quot;;//command string to execute list directory function on the OS_newline//TheApplication().GetSysPref(&quot;TM_usSIEBEL_usSERVER_usOS&quot;);//name of the OS, can be WIN, win, Win (Windows) or Unix, UNIX, unix (all flavours of UNIX) flavours of UNIX)_newline var strOS           = &quot;unix&quot;;_newline Outputs.SetProperty(&quot;OSName&quot;,strOS);_newline var isUnixOS        = true; _newline if(&quot;unix&quot; != strOS.toLowerCase() &amp;&amp; &quot;linux&quot; != strOS.toLowerCase())_newline isUnixOS = false;_newline if(isUnixOS)//unix_newline {_newline//  strCMD = &quot;ls &quot; + strPath + strPattern + &quot; | cut -c &quot; + iCutLen + &quot;- | sort &gt; &quot; + strFNameForList;_newline//sort is seen to cause problems, so dropped that_newline  strCMD = &quot;ls &quot; + strPath + strPattern + &quot; | cut -c &quot; + iCutLen + &quot;- &gt; &quot; + strFNameForList;_newline }_newline else_newline {_newline  strCMD = &quot;dir &quot; + strPath + strPattern + &quot; /ON /B &gt; &quot; + strFNameForList;_newline }_newline Outputs.SetProperty(&quot;Command&quot;,strCMD);_newline//now execute the command on OS, can be risky  _newline Clib.system(strCMD);_newline//now a file got generated and that must be read to get the filenames_newline var bsFile:Service    = TheApplication().GetService(&quot;EAI File Transport&quot;);_newline var psInp:PropertySet = TheApplication().NewPropertySet();_newline var psOp:PropertySet  = TheApplication().NewPropertySet();_newline psInp.SetProperty(&quot;FileName&quot;,            strFNameForList);_newline psInp.SetProperty(&quot;IsReceivingTextData&quot;, &quot;true&quot;);_newline bsFile.InvokeMethod(&quot;Receive&quot;,psInp, psOp);_newline_newline psInp=psOp.Copy();_newline bsFile = TheApplication().GetService(&quot;Transcode Service&quot;);_newline psInp.SetProperty(&quot;SourceEncoding&quot;,&quot;UTF-8&quot;);_newline psInp.SetProperty(&quot;ConversionMode&quot;,&quot;EncodingToString&quot;);_newline bsFile.InvokeMethod(&quot;Convert&quot;,psInp, psOp);_newline_newline var strFileNameList = psOp.GetValue();//contains multiple lines with actual filenames in the directory_newline var arrFileNameList = strFileNameList.split(&quot;\n&quot;);_newline_newline psInp  = null;_newline psOp   = null;_newline bsFile = null;_newline_newline // Outputs.SetProperty(&quot;FileNames&quot;,strFileNameList);_newline var iCnt=0;_newline for(var i=0;i&lt;arrFileNameList.length;i++)_newline {_newline  if(&quot;&quot;!=arrFileNameList[i])_newline  {_newline   Outputs.SetProperty(&quot;file&quot; + iCnt,arrFileNameList[i]);_newline   if(&quot;&quot;!=strPathTarget)//copy / move files from current location to target location_newline   {_newline    strCMD  = &quot;&quot;;_newline    if(bDeleteSource &amp;&amp; isUnixOS) strCMD = &quot;mv &apos;&quot; + strPath + arrFileNameList[i] + &quot;&apos; &apos;&quot; + strPathTarget + arrFileNameList[i] + &quot;&apos;&quot;;_newline    else if(!bDeleteSource &amp;&amp; isUnixOS) strCMD = &quot;cp &apos;&quot; + strPath + arrFileNameList[i] + &quot;&apos; &apos;&quot; + strPathTarget + arrFileNameList[i] + &quot;&apos;&quot;;_newline    else if(bDeleteSource &amp;&amp; !isUnixOS) strCMD = &quot;move &quot; + strPath + arrFileNameList[i] + &quot; &quot; + strPathTarget + arrFileNameList[i];_newline    else if(!bDeleteSource &amp;&amp; !isUnixOS) strCMD = &quot;copy &quot; + strPath + arrFileNameList[i] + &quot; &quot; + strPathTarget + arrFileNameList[i];_newline_newline    Clib.system(strCMD);_newline//load records from the file_newline    var psFInp:PropertySet = TheApplication().NewPropertySet();_newline    var psFOp:PropertySet  = TheApplication().NewPropertySet();_newline    psFInp.SetProperty(&quot;DirectoryPath&quot;,        strPathTarget);_newline    psFInp.SetProperty(&quot;BatchType&quot;,            strBatchType);_newline    psFInp.SetProperty(&quot;FileName&quot;,             arrFileNameList[i]);_newline    psFInp.SetProperty(&quot;Header Lines to Skip&quot;, 1);_newline    psFInp.SetProperty(&quot;Footer Lines to Skip&quot;, 0);_newline    psFInp.SetProperty(&quot;Delimiter&quot;,&quot;,&quot;);_newline_newline//[JUHIV][08.05.2012][Added for BestMate Update functionality]_newline    if(&quot;Bestmate&quot;== strBatchType)_newline    {_newline     func_usLoadBestmateRecords(psFInp, psFOp);_newline    }_newline    else if(&quot;BP&quot;== strBatchType)_newline    {_newline     func_usLoadBPRecordsfromFile(psFInp, psFOp);_newline    }_newline    else_newline    {_newline     func_usLoadRecordsfromFile(psFInp, psFOp);_newline    }_newline//now move the file to output folder_newline    if(&quot;&quot;!=strPathResult)_newline    {_newline     strCMD  = &quot;&quot;;_newline     if(bDeleteSource &amp;&amp; isUnixOS)_newline      strCMD = &quot;mv &apos;&quot; + strPathTarget + arrFileNameList[i] + &quot;&apos; &apos;&quot; + strPathResult + arrFileNameList[i] + &quot;&apos;&quot;;_newline     else if(!bDeleteSource &amp;&amp; isUnixOS)_newline      strCMD = &quot;cp &apos;&quot; + strPathTarget + arrFileNameList[i] + &quot;&apos; &apos;&quot; + strPathResult + arrFileNameList[i] + &quot;&apos;&quot;;_newline     else if(bDeleteSource &amp;&amp; !isUnixOS)_newline      strCMD = &quot;move &quot; + strPathTarget + arrFileNameList[i] + &quot; &quot; + strPathResult + arrFileNameList[i];_newline     else if(!bDeleteSource &amp;&amp; !isUnixOS)_newline      strCMD = &quot;copy &quot; + strPathTarget + arrFileNameList[i] + &quot; &quot; + strPathResult + arrFileNameList[i];_newline     Clib.system(strCMD);_newline    }_newline   }_newline   iCnt++;_newline  }_newline }_newline Outputs.SetProperty(&quot;CountOfFiles&quot;,iCnt);_newline return CancelOperation;_newline}"
 Program_spcLanguage="JS"
 Name="func_usProcessFiles"
 Sequence="33"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function func_usProcessPrepaidOrder(Inputs, Outputs)_newline{_newline Outputs.SetProperty(&quot;Account Id&quot;,         &quot;&quot;);_newline Outputs.SetProperty(&quot;Contact Id&quot;,         &quot;&quot;);_newline Outputs.SetProperty(&quot;Address Id&quot;,         &quot;&quot;);_newline Outputs.SetProperty(&quot;Invoice Profile Id&quot;, &quot;&quot;);_newline Outputs.SetProperty(&quot;Order Id&quot;,           &quot;&quot;);_newline_newline var strErrMesg = &quot;&quot;;_newline var strErrCode = &quot;&quot;;_newline var strErrMesgBase = &quot;&quot;;_newline var strBundleId = &quot;&quot;;_newline var isRecord;_newline var bSubmit    = true;_newline var strSubmit  = Inputs.GetProperty(&quot;Submit Order&quot;);_newlineTheApplication().SetProfileAttr(&quot;ConVal&quot;, &quot;N&quot;);_newline if(&quot;N&quot; == strSubmit || &quot;No&quot; == strSubmit)_newline bSubmit = false;_newline var strMSISDN  = Inputs.GetProperty(&quot;MSISDN&quot;);_newline//20110801:PPB SIM will come in as SIMNUM:SIMTYPE, later part can be null_newline var strSIMType = &quot;&quot;;_newline var strSIM     = &quot;&quot;;_newline strSIMType = Inputs.GetProperty(&quot;SIM Type&quot;);_newline strSIM     = Inputs.GetProperty(&quot;SIM&quot;);_newline var strPlan    = Inputs.GetProperty(&quot;Plan Name&quot;);_newline var strResToken= Inputs.GetProperty(&quot;Reservation Token&quot;);_newline if(&quot;&quot; == strSIM || &quot;&quot; == strMSISDN || &quot;&quot; == strPlan || &quot;&quot; == strResToken)_newline {_newline  strErrCode = &quot;INADEQUATE_usINPUTS&quot;;_newline  strErrMesg = &quot;Input arguments missing: SIM, MSISDN, Plan Name, Reservation Token&quot;;_newline }_newline else_newline {_newline  var strAccntId          = &quot;&quot;;_newline  var strConId            = &quot;&quot;;_newline  var strAddrId           = &quot;&quot;;_newline  var strInvProfId        = &quot;&quot;;_newline  var strOrderId          = &quot;&quot;;_newline  var strToBeAccntName    = &quot;Prepaid: &quot; + strMSISDN + &quot; &quot; + strSIM;_newline  var strToBeContactFN    = strSIM;_newline  var strToBeContactLN    = strMSISDN;_newline  var strToBeConDocId     = strMSISDN;_newline  var strToBeOrdIntId     = strMSISDN;//20110909: Set the MSISDN itself_newline  var strToBeStrAddr      = strMSISDN;_newline  var strToBeCIPName      = strSIM;_newline  var boAsset:BusObject   = TheApplication().GetBusObject(&quot;Asset Management&quot;);_newline  var bcAsset:BusComp     = boAsset.GetBusComp(&quot;Asset Mgmt - Asset&quot;);_newline  var boAccount:BusObject = TheApplication().GetBusObject(&quot;Account&quot;);_newline  var bcAccount:BusComp   = boAccount.GetBusComp(&quot;Account&quot;);_newline  var bcInvProf:BusComp   = boAccount.GetBusComp(&quot;Com Invoice Profile&quot;);_newline  var bcOrder:BusComp     = boAccount.GetBusComp(&quot;Order Entry - Orders&quot;);_newline  var bcPick:BusComp;_newline  bcAccount.SetViewMode(AllView);_newline  bcInvProf.SetViewMode(AllView);_newline  bcOrder.SetViewMode(AllView);_newline  bcAccount.ActivateField(&quot;Name&quot;);_newline  bcAccount.ActivateField(&quot;Type&quot;);_newline  bcAccount.ActivateField(&quot;Primary Contact Id&quot;);_newline  bcAccount.ActivateField(&quot;VFQA Notification Contact Id&quot;);//Manasi V : Added for Order Validation_newline  bcAccount.ActivateField(&quot;Primary Address Id&quot;);_newline  bcAccount.ActivateField(&quot;Market Class&quot;);_newline  bcAccount.ActivateField(&quot;Payment Type&quot;);_newline  bcAccount.ActivateField(&quot;Payment Method&quot;);_newline  bcInvProf.ActivateField(&quot;Contact Id&quot;);_newline  bcInvProf.ActivateField(&quot;Address Id&quot;);_newline  bcOrder.ActivateField(&quot;Order Number&quot;);_newline  bcOrder.ActivateField(&quot;Order Type&quot;);_newline  bcOrder.ActivateField(&quot;Status&quot;);_newline  bcOrder.ActivateField(&quot;Back Office Order Number&quot;);_newline  bcOrder.ActivateField(&quot;Integration Id&quot;);_newline  bcOrder.ActivateField(&quot;Account Id&quot;);_newline  bcOrder.ActivateField(&quot;Billing Account Id&quot;);_newline  bcOrder.ActivateField(&quot;Billing Profile Id&quot;);_newline  bcOrder.ActivateField(&quot;Service Account Id&quot;);_newline  //  bcOrder.ActivateField(&quot;Sub Type&quot;);_newline  var bsProdData:Service = TheApplication().GetService(&quot;PDS Product Data Service&quot;);_newline  var psInp:PropertySet  = TheApplication().NewPropertySet();_newline  var psOp:PropertySet   = TheApplication().NewPropertySet();_newline  bcAsset.SetViewMode(AllView);_newline  bcAsset.ActivateField(&quot;Status&quot;);_newline  bcAsset.ClearToQuery();_newline  //20111024:PPB check for root active asset only_newline  bcAsset.SetSearchExpr(&quot;[Parent Asset Id] IS NULL AND [Serial Number]=&apos;&quot; + strMSISDN + &quot;&apos; AND [Status]=&apos;Active&apos;&quot;);//check that an active asset does not exist._newline  bcAsset.ExecuteQuery(ForwardOnly);_newline  if(!bcAsset.FirstRecord())_newline  {_newline  //search account, if it exists then no need to query_newline  bcAccount.ClearToQuery();_newline  bcAccount.SetSearchExpr(&quot;[Name]=&apos;&quot; + strToBeAccntName + &quot;&apos;&quot;);_newline  bcAccount.ExecuteQuery(ForwardOnly);_newline  if(!bcAccount.FirstRecord())//create account record_newline  {_newline  bcAccount.NewRecord(NewAfter);//NAME: Prepaid: 97470399466 8942702109120946152, LOC: null_newline  bcAccount.SetFieldValue(&quot;Name&quot;,           strToBeAccntName);_newline  bcAccount.SetFieldValue(&quot;Type&quot;,           &quot;Residential&quot;);_newline  bcAccount.SetFieldValue(&quot;Market Class&quot;,           &quot;Not Set&quot;);_newline // bcAccount.SetFieldValue(&quot;Payment Type&quot;, &quot;Prepaid&quot;);_newline//bcAccount.SetFieldValue(&quot;Payment Method&quot;, &quot;Prepaid&quot;);_newline  bcAccount.WriteRecord();_newline  }_newline  strAccntId = bcAccount.GetFieldValue(&quot;Id&quot;);_newline  Outputs.SetProperty(&quot;Account Id&quot;,         strAccntId);_newline  //this actually needs to be created in MVBC_newline  //check and associate contact record_newline  var bcContactMVG:BusComp = bcAccount.GetMVGBusComp(&quot;Primary Contact First Name&quot;);_newline  bcContactMVG.ClearToQuery();_newline  bcContactMVG.SetViewMode(AllView);_newline  bcContactMVG.SetSearchExpr(&quot;[ID Information]=&apos;&quot;+ strToBeConDocId + &quot;&apos;&quot;);_newline  bcContactMVG.ExecuteQuery(ForwardOnly);_newline  if(!bcContactMVG.FirstRecord())_newline  {_newline   var bcContact:BusComp = bcContactMVG.GetAssocBusComp();_newline   bcContact.ActivateField(&quot;Id&quot;);_newline   bcContact.ActivateField(&quot;First Name&quot;);_newline   bcContact.ActivateField(&quot;Last Name&quot;);_newline   bcContact.ActivateField(&quot;M/F&quot;);_newline//   bcContact.ActivateField(&quot;Date of Birth&quot;);_newline   bcContact.ActivateField(&quot;Birth Date&quot;);_newline   bcContact.SetUserProperty(&quot;AllowIdTypeDummy&quot;,&quot;Y&quot;);_newline   bcContact.ActivateField(&quot;ID Type&quot;);_newline   bcContact.ActivateField(&quot;ID Information&quot;);_newline   bcContact.ActivateField(&quot;ID Expiration Date&quot;);_newline   bcContact.ActivateField(&quot;Email Address&quot;);_newline   bcContact.ActivateField(&quot;Cellular Phone #&quot;);_newline   bcContact.ActivateField(&quot;HLS Citizenship&quot;); _newline   bcContact.ActivateField(&quot;Preferred Language Code&quot;);_newline   bcContact.ActivateField(&quot;Preferred Communications&quot;);_newline   bcContact.ActivateField(&quot;M/F&quot;);_newline   bcContact.SetViewMode(AllView);_newline   bcContact.ClearToQuery();_newline   bcContact.SetSearchExpr(&quot;[ID Information]=&apos;&quot;+ strToBeConDocId + &quot;&apos;&quot;);_newline   bcContact.ExecuteQuery(ForwardOnly);_newline   if(!bcContact.FirstRecord())_newline   {_newline    bcContact.NewRecord(NewAfter);_newline    bcContact.SetFieldValue(&quot;First Name&quot;,     strToBeContactFN);_newline    bcContact.SetFieldValue(&quot;Last Name&quot;,      strToBeContactLN);_newline    bcContact.SetFieldValue(&quot;M/F&quot;,            &quot;M&quot;);_newline//    bcContact.SetFieldValue(&quot;Date of Birth&quot;,  &quot;1/1/1970&quot;);_newline    bcContact.SetFieldValue(&quot;Birth Date&quot;,  &quot;1/1/1970&quot;);_newline    bcContact.SetFieldValue(&quot;ID Type&quot;,        &quot;Passport&quot;);//new type introduced for special permissions only : Qatari ID_newline    bcContact.SetFieldValue(&quot;ID Information&quot;, strToBeConDocId);_newline    bcContact.SetFieldValue(&quot;ID Expiration Date&quot;, &quot;1/1/2022&quot;);_newline    bcContact.SetFieldValue(&quot;Email Address&quot;,           &quot;a@b.com&quot;);_newline    bcContact.SetFieldValue(&quot;Cellular Phone #&quot;,       strMSISDN);_newline    bcContact.SetFieldValue(&quot;HLS Citizenship&quot;,         &quot;Not Set&quot;);_newline    bcContact.SetFieldValue(&quot;Preferred Language Code&quot;, &quot;English&quot;);_newline    bcContact.SetFieldValue(&quot;Preferred Communications&quot;, &quot;Phone&quot;);//Manasi V : Added for DVM_newline    bcContact.SetFieldValue(&quot;M/F&quot;,                     &quot;M&quot;);_newline    bcContact.WriteRecord();_newline   }_newline   bcContact.Associate(NewBefore);_newline   strConId = bcContact.GetFieldValue(&quot;Id&quot;);_newline   Outputs.SetProperty(&quot;Contact Id&quot;,strConId);_newline   bcContact = null;_newline  }_newlineelse_newline  {_newline  strConId = bcContactMVG.GetFieldValue(&quot;Id&quot;);_newline  Outputs.SetProperty(&quot;Contact Id&quot;,strConId);_newline  }_newline  bcContactMVG = null;_newline//check and create address record_newline  var bcAddrMVG:BusComp = bcAccount.GetMVGBusComp(&quot;Street Address&quot;);_newline  bcAddrMVG.ClearToQuery();_newline  bcAddrMVG.SetViewMode(AllView);_newline  bcAddrMVG.SetSearchExpr(&quot;[Street Address]=&apos;&quot;+ strToBeStrAddr + &quot;&apos;&quot;);_newline  bcAddrMVG.ExecuteQuery(ForwardOnly);_newline  if(!bcAddrMVG.FirstRecord())_newline  {_newline   var bcAddress:BusComp = bcAddrMVG.GetAssocBusComp();_newline   bcAddress.ActivateField(&quot;Id&quot;);_newline   bcAddress.ActivateField(&quot;Street Address&quot;);_newline   bcAddress.ActivateField(&quot;VFQA PO Box&quot;);_newline   bcAddress.ActivateField(&quot;Postal Code&quot;);_newline   bcAddress.ActivateField(&quot;Country&quot;);_newline   bcAddress.ActivateField(&quot;City&quot;);_newline   bcAddress.ActivateField(&quot;State&quot;);_newline   bcAddress.SetViewMode(AllView);_newline   bcAddress.ClearToQuery();_newline   bcAddress.SetSearchExpr(&quot;[Street Address]=&apos;&quot;+ strToBeStrAddr + &quot;&apos;&quot;);_newline   bcAddress.ExecuteQuery(ForwardOnly);_newline   if(!bcAddress.FirstRecord())_newline   {_newline    bcAddress.NewRecord(NewAfter);_newline    bcAddress.SetFieldValue(&quot;Street Address&quot;,     strToBeStrAddr);_newline    bcAddress.SetFieldValue(&quot;VFQA PO Box&quot;,         strMSISDN.substring(5));//Prepaid: 97450000002 8943333222211110000_newline    bcAddress.SetFieldValue(&quot;Postal Code&quot;,   &quot;111&quot;);_newline    bcAddress.SetFieldValue(&quot;City&quot;,         &quot;Doha&quot;);_newline    bcAddress.SetFieldValue(&quot;State&quot;,         &quot;AK&quot;);_newline    bcAddress.SetFieldValue(&quot;Country&quot;,       &quot;Qatar&quot;);_newline    bcAddress.WriteRecord();_newline   }_newline   bcAddress.Associate(NewBefore);_newline   strAddrId = bcAddress.GetFieldValue(&quot;Id&quot;);_newline   Outputs.SetProperty(&quot;Address Id&quot;,strAddrId);_newline   bcAddress = null;_newline  }_newline  else_newline  {_newline  strAddrId = bcAddrMVG.GetFieldValue(&quot;Id&quot;);_newline  Outputs.SetProperty(&quot;Address Id&quot;,strAddrId);_newline  }_newline  bcAddrMVG=null;_newline//check create invoice profile record_newline  bcInvProf.ActivateField(&quot;VFQA Notification Con Id&quot;);_newline  bcInvProf.ClearToQuery();_newline  bcInvProf.SetSearchExpr(&quot;[Name]=&apos;&quot; + strToBeCIPName + &quot;&apos;&quot;);_newline  bcInvProf.ExecuteQuery(ForwardOnly);_newline  if(!bcInvProf.FirstRecord())////create CIP record_newline  {_newline   bcInvProf.NewRecord(NewAfter);_newline   bcInvProf.SetFieldValue(&quot;Name&quot;,               strToBeCIPName);_newline   bcInvProf.SetFieldValue(&quot;Payment Type&quot;,     &quot;Prepaid&quot;);_newline   bcInvProf.SetFieldValue(&quot;Payment Method&quot;,     &quot;Prepaid&quot;);_newline   bcInvProf.SetFieldValue(&quot;VFQA Notification Con Id&quot;, strConId);_newline   bcInvProf.SetFieldValue(&quot;Contact Id&quot;,               strConId);_newline   bcInvProf.SetFieldValue(&quot;Address Id&quot;,               strAddrId);_newline   bcInvProf.WriteRecord();_newline  }_newline  strInvProfId = bcInvProf.GetFieldValue(&quot;Id&quot;);_newline  Outputs.SetProperty(&quot;Invoice Profile Id&quot;,strInvProfId);_newline//set Id of all these child entities on the account as primary_newline  bcAccount.SetFieldValue(&quot;Primary Contact Id&quot;,          strConId);_newline  bcAccount.SetFieldValue(&quot;VFQA Notification Contact Id&quot;,          strConId);_newline  bcAccount.SetFieldValue(&quot;Primary Address Id&quot;,          strAddrId);_newline  bcAccount.SetFieldValue(&quot;Primary Billing Profile Id&quot;,  strInvProfId);_newline  bcAccount.WriteRecord();_newline//check create order record_newline bcOrder.ClearToQuery();_newline//check for any kind of order, even if one order exists means the account has been operational_newline bcOrder.ExecuteQuery(ForwardOnly);_newline if(!bcOrder.FirstRecord())//create order_newline {_newline  bcOrder.NewRecord(NewAfter);_newline  bcOrder.SetFieldValue(&quot;Status&quot;,&quot;Paid&quot;);_newline  bcOrder.SetFieldValue(&quot;Back Office Order Number&quot;, strToBeOrdIntId);_newline  bcPick = bcOrder.GetPicklistBusComp(&quot;Order Type&quot;);_newline  bcPick.ClearToQuery();_newline  bcPick.SetSearchExpr(&quot;[Order Type]=&apos;Sales Order&apos;&quot;);_newline  bcPick.ExecuteQuery(ForwardOnly);_newline  if(bcPick.FirstRecord())_newline   bcPick.Pick();_newline  bcOrder.SetFieldValue(&quot;Account Id&quot;, strAccntId);_newline  bcOrder.SetFieldValue(&quot;Billing Account Id&quot;, strAccntId);_newline  bcOrder.SetFieldValue(&quot;Service Account Id&quot;, strAccntId);_newline  bcOrder.SetFieldValue(&quot;Billing Profile Id&quot;, strInvProfId);_newline  bcOrder.WriteRecord();_newline  strOrderId = bcOrder.GetFieldValue(&quot;Id&quot;);_newline  Outputs.SetProperty(&quot;Order Number&quot;, bcOrder.GetFieldValue(&quot;Order Number&quot;));_newline  bcOrder.InvokeMethod(&quot;RefreshRecord&quot;);_newline  var boOrder:BusObject = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);_newline  bcOrder = boOrder.GetBusComp(&quot;Order Entry - Orders&quot;);_newline  bcOrder.SetViewMode(AllView);_newline  bcOrder.ClearToQuery();_newline  bcOrder.SetSearchExpr(&quot;[Id]=&apos;&quot; + strOrderId + &quot;&apos;&quot;);_newline  bcOrder.ExecuteQuery(ForwardOnly);_newline  if(bcOrder.FirstRecord())_newline  {_newline   var bcOLI:BusComp       = boOrder.GetBusComp(&quot;Order Entry - Line Items (Simple)&quot;);_newline   bcOLI.SetViewMode(AllView);_newline   bcOLI.ActivateField(&quot;Service Id&quot;);_newline   bcOLI.ActivateField(&quot;Service Account Id&quot;);_newline   bcOLI.ActivateField(&quot;Previous Billing Account Id&quot;);_newline   bcOLI.ActivateField(&quot;Previous Billing Profile Id&quot;);_newline   bcOLI.ActivateField(&quot;Previous Service Account Id&quot;);_newline   bcOLI.ActivateField(&quot;Billing Account Id&quot;);_newline   bcOLI.ActivateField(&quot;Billing Profile Id&quot;);_newline   bcOLI.ActivateField(&quot;Service Account Id&quot;);_newline   bcOLI.ActivateField(&quot;Owner Accnt Id&quot;);_newline   bcOLI.ClearToQuery();_newline   bcOLI.SetSearchExpr(&quot;[Order Header Id]=&apos;&quot; + strOrderId + &quot;&apos; AND [Parent Order Item Id] IS NULL&quot;);_newline   bcOLI.ExecuteQuery(ForwardOnly);_newline   if(!bcOLI.FirstRecord())_newline   {_newline    psInp.SetProperty(&quot;Doc Id&quot;, strOrderId);_newline    psInp.SetProperty(&quot;Template Search Spec&quot;,&quot;[Name]=&apos;&quot; + strPlan + &quot;&apos;&quot;);_newline    try_newline    {//this BS gives strange error where actually it adds the OLI correctly._newline     bsProdData.InvokeMethod(&quot;AddFavoriteToOrder&quot;,psInp, psOp);_newline    }_newline    catch (e)_newline    {_newline    }_newline   }_newline    bcOLI.ActivateField(&quot;Product Type&quot;);_newline    bcOLI.SetViewMode(AllView);_newline    bcOLI.InvokeMethod(&quot;SetAdminMode&quot;,&quot;TRUE&quot;);_newline   bcOLI.ClearToQuery();_newline   bcOLI.SetSearchExpr(&quot;[Order Header Id]=&apos;&quot; + strOrderId + &quot;&apos;&quot;);_newline   bcOLI.ExecuteQuery();_newline   var isRecord = bcOLI.FirstRecord();_newline   while(isRecord)_newline   {_newline   if(bcOLI.GetFieldValue(&quot;Product Type&quot;) != &quot;Promotion&quot;)_newline    bcOLI.SetFieldValue(&quot;Service Id&quot;,strMSISDN);_newline    bcOLI.SetFieldValue(&quot;Service Account Id&quot;,  strAccntId);_newline    bcOLI.SetFieldValue(&quot;Previous Billing Account Id&quot;, strAccntId);_newline    bcOLI.SetFieldValue(&quot;Previous Service Account Id&quot;, strAccntId);_newline    bcOLI.SetFieldValue(&quot;Previous Billing Profile Id&quot;, strInvProfId);_newline    bcOLI.SetFieldValue(&quot;Billing Account Id&quot;, strAccntId);_newline    bcOLI.SetFieldValue(&quot;Service Account Id&quot;, strAccntId);_newline    bcOLI.SetFieldValue(&quot;Billing Profile Id&quot;, strInvProfId);_newline    bcOLI.SetFieldValue(&quot;Owner Accnt Id&quot;, strAccntId);_newline    bcOLI.WriteRecord();_newline isRecord = bcOLI.NextRecord();_newline   }_newline   bcOLI.ClearToQuery();_newline   bcOLI.SetSearchExpr(&quot;[Product]=&apos;Mobile Service Bundle&apos;&quot;);_newline   bcOLI.ExecuteQuery();_newline   var isRecord = bcOLI.FirstRecord();_newline   if(isRecord)_newline   {_newline    strBundleId = bcOLI.GetFieldValue(&quot;Id&quot;);_newline    var bcXA=boOrder.GetBusComp(&quot;Order Item XA (Simple)&quot;);_newline    bcXA.SetViewMode(AllView);_newline    bcXA.InvokeMethod(&quot;SetAdminMode&quot;,&quot;TRUE&quot;);_newline    bcXA.ClearToQuery();_newline    bcXA.ActivateField(&quot;Text Value&quot;);_newline    bcXA.SetSearchExpr(&quot;[Name]=&apos;Number Reservation Token&apos; AND [Object Id] = &apos;&quot; + strBundleId + &quot;&apos;&quot;);_newline    bcXA.ExecuteQuery(ForwardOnly);_newline    if(bcXA.FirstRecord())_newline    {_newline     bcXA.SetFieldValue(&quot;Text Value&quot;,strResToken);_newline  bcXA.SetFieldValue(&quot;Numeric Value&quot;,strResToken);_newline     bcXA.WriteRecord();_newline    }_newline   }_newline   bcOLI.ClearToQuery();_newline   bcOLI.SetSearchExpr(&quot;[Product]=&apos;SIM Card&apos;&quot;);_newline   bcOLI.ExecuteQuery();_newline   if(bcOLI.FirstRecord())_newline   {_newline    bcOLI.SetFieldValue(&quot;Service Id&quot;, strSIM);_newline    bcOLI.WriteRecord();_newline   }_newline   if(bSubmit)_newline   {_newline    bcOrder.ClearToQuery();_newline    bcOrder.SetSearchExpr(&quot;[Id]=&apos;&quot; + strOrderId + &quot;&apos;&quot;);_newline    bcOrder.ExecuteQuery(ForwardOnly);_newline    if(bcOrder.FirstRecord())_newline    {_newline     bcOrder.SetFieldValue(&quot;Status&quot;, &quot;Pending&quot;);_newline     bcOrder.WriteRecord();_newline     bsProdData = TheApplication().GetService(&quot;Workflow Process Manager&quot;);_newline     psInp.SetProperty(&quot;RowId&quot;, strOrderId);  psInp.SetProperty(&quot;Fulfillment Mode&quot;, &quot;Deliver&quot;);_newline  psInp.SetProperty(&quot;RenewLock&quot;, &quot;N&quot;);_newline     psInp.SetProperty(&quot;ProcessName&quot;, &quot;SISOMBillingSubmitOrderWebService&quot;);_newline     bsProdData.InvokeMethod(&quot;RunProcess&quot;, psInp, psOp);_newline     strErrCode = &quot;OK&quot;;_newline     strErrMesg = &quot;Order submitted.&quot;;_newline    }_newline    else_newline    {_newline     strErrCode = &quot;ORDER_usNOT_usFOUND&quot;;_newline     strErrMesg = &quot;Order was created/queried but was not found.&quot;;_newline    }_newline   }_newline  }_newline }_newline else_newline {_newline  strOrderId = bcOrder.GetFieldValue(&quot;Id&quot;);_newline  strErrCode = &quot;ORDER_usEXISTS&quot;;_newline  strErrMesg = &quot;Order exists, nothing processed, may require resubmission.&quot;;_newline }_newline }_newline else_newline {_newline  strErrCode = &quot;ASSET_usEXISTS&quot;;_newline  strErrMesg = &quot;An Active asset exists for the MSISDN.&quot;;_newline }_newline bsProdData = null;_newline psInp      = null;_newline psOp       = null;_newline bcInvProf = null;_newline bcPick    = null;_newline bcOLI     = null;_newline bcOrder   = null;_newline bcAccount = null;_newline boAccount = null;_newline bcAsset  = null;_newline boAsset  = null;_newlineTheApplication().SetProfileAttr(&quot;ConVal&quot;, &quot;&quot;);_newline strErrMesgBase = &quot;Account:&quot; + strAccntId + &quot;;Contact:&quot; + strConId + &quot;;Address:&quot; + strAddrId + &quot;;InvProfile:&quot; + strInvProfId + &quot;;Order:&quot; + strOrderId + &quot;;&quot;;_newline }_newline Outputs.SetProperty(&quot;Order Id&quot;,      strOrderId);_newline Outputs.SetProperty(&quot;Error Code&quot;,    strErrCode);_newline Outputs.SetProperty(&quot;Error Message&quot;, strErrMesgBase + strErrMesg);_newline return CancelOperation;_newline}"
 Program_spcLanguage="JS"
 Name="func_usProcessPrepaidOrder"
 Sequence="34"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="/*----------+--------------+------------+-------------------------------------------------------------------------------------------------------------------------------- _newline| Date      +  By          | Version    | Comments            _newline|-----------+--------------+------------+--------------------------------------------------------------------------------------------------------------------------------- _newline| 20110726  + PPB TECHM    +   1.0      + First release, this function takes in SIM/MSISDN and Reservation Token and prepares a prepaid starter pack order and submits it _newline| 20110730  + PPB TECHM    +   1.1      + Explicit setting of Contact Id and Address Id on invoice profile BC  _newline| 20110801  + PPB TECHM    +   1.2      + Setting of SIM type (based on the SIM profile in BRM) in the SIM Card line item _newline|-----------+--------------+------------+-------------------------------------------------------------------------------------------------------------------------------- _newline*/ _newlinefunction func_usProcessPrepaidOrder_uspreAvatar(Inputs, Outputs) _newline{ _newline Outputs.SetProperty(&quot;Account Id&quot;,         &quot;&quot;); _newline Outputs.SetProperty(&quot;Contact Id&quot;,         &quot;&quot;); _newline Outputs.SetProperty(&quot;Address Id&quot;,         &quot;&quot;); _newline Outputs.SetProperty(&quot;Invoice Profile Id&quot;, &quot;&quot;); _newline Outputs.SetProperty(&quot;Order Id&quot;,           &quot;&quot;); _newline _newline var strErrMesg = &quot;&quot;; _newline var strErrCode = &quot;&quot;; _newline var strErrMesgBase = &quot;&quot;; _newline var isRecord; _newline var bSubmit    = true; _newline var strSubmit  = Inputs.GetProperty(&quot;Submit Order&quot;); _newline if(&quot;N&quot; == strSubmit || &quot;No&quot; == strSubmit) _newline  bSubmit = false; _newline var strMSISDN  = Inputs.GetProperty(&quot;MSISDN&quot;); _newline//20110801:PPB SIM will come in as SIMNUM:SIMTYPE, later part can be null _newline _newline var strSIMType = &quot;&quot;; _newline var strSIM     = &quot;&quot;; _newline//if concat values in the style of EAI Queue _newline/* _newline var strSIMTEXT = Inputs.GetProperty(&quot;SIM&quot;); _newline var arrSIMTEXT = strSIMTEXT.split(&quot;:&quot;);//must have at least some not-null text _newline _newline strSIM     = arrSIMTEXT[0]; _newline if(1 &lt; arrSIMTEXT.length)//has 2 parts _newline  strSIMType = arrSIMTEXT[1]; _newline if(&quot;Vodafone Money Transfer&quot; == strSIMType || &quot;VMT&quot; == strSIMType)//multiple options for VMT sim _newline  strSIMType = &quot;VMT&quot;; _newline else _newline  strSIMType = &quot;&quot;; _newline*/ _newline//if directly fed as values of SIM and SIM Type input properties separately _newline strSIMType = Inputs.GetProperty(&quot;SIM Type&quot;); _newline strSIM     = Inputs.GetProperty(&quot;SIM&quot;); _newline _newline var strPlan    = Inputs.GetProperty(&quot;Plan Name&quot;); _newline var strResToken= Inputs.GetProperty(&quot;Reservation Token&quot;); _newline _newline if(&quot;&quot; == strSIM || &quot;&quot; == strMSISDN || &quot;&quot; == strPlan || &quot;&quot; == strResToken) _newline { _newline  strErrCode = &quot;INADEQUATE_usINPUTS&quot;; _newline  strErrMesg = &quot;Input arguments must be provided: SIM, MSISDN, Plan Name, Reservation Token&quot;; _newline } _newline else _newline { _newline  var strAccntId          = &quot;&quot;; _newline  var strConId            = &quot;&quot;; _newline  var strAddrId           = &quot;&quot;; _newline  var strInvProfId        = &quot;&quot;; _newline  var strOrderId          = &quot;&quot;; _newline _newline  var strToBeAccntName    = &quot;Prepaid: &quot; + strMSISDN + &quot; &quot; + strSIM; _newline  var strToBeContactFN    = strSIM; _newline  var strToBeContactLN    = strMSISDN; _newline  var strToBeConDocId     = strMSISDN; _newline  var strToBeOrdIntId     = strMSISDN;//20110909: Set the MSISDN itself _newline  var strToBeStrAddr      = strMSISDN; _newline  var strToBeCIPName      = strSIM; _newline _newline  var boAsset:BusObject   = TheApplication().GetBusObject(&quot;Asset Management&quot;); _newline  var bcAsset:BusComp     = boAsset.GetBusComp(&quot;Asset Mgmt - Asset&quot;); _newline _newline  var boAccount:BusObject = TheApplication().GetBusObject(&quot;Account&quot;); _newline  var bcAccount:BusComp   = boAccount.GetBusComp(&quot;Account&quot;); _newline  var bcInvProf:BusComp   = boAccount.GetBusComp(&quot;Com Invoice Profile&quot;); _newline  var bcOrder:BusComp     = boAccount.GetBusComp(&quot;Order Entry - Orders&quot;); _newline  var bcOLI:BusComp       = boAccount.GetBusComp(&quot;Order Entry - Line Items&quot;); _newline  var bcPick:BusComp; _newline _newline  bcAccount.SetViewMode(AllView); _newline  bcInvProf.SetViewMode(AllView); _newline  bcOrder.SetViewMode(AllView); _newline  bcOLI.SetViewMode(AllView); _newline _newline  bcAccount.ActivateField(&quot;Name&quot;); _newline  bcAccount.ActivateField(&quot;Type&quot;); _newline  bcAccount.ActivateField(&quot;Primary Contact Id&quot;); _newline  bcAccount.ActivateField(&quot;Primary Address Id&quot;); _newline _newline  bcInvProf.ActivateField(&quot;VFQ Validated Flag&quot;); _newline  bcInvProf.ActivateField(&quot;Contact Id&quot;); _newline  bcInvProf.ActivateField(&quot;Address Id&quot;); _newline _newline  bcOrder.ActivateField(&quot;Order Number&quot;); _newline  bcOrder.ActivateField(&quot;Order Type&quot;); _newline  bcOrder.ActivateField(&quot;Status&quot;); _newline  bcOrder.ActivateField(&quot;Back Office Order Number&quot;); _newline  bcOrder.ActivateField(&quot;Integration Id&quot;); _newline  bcOrder.ActivateField(&quot;Account Id&quot;); _newline  bcOrder.ActivateField(&quot;Billing Account Id&quot;); _newline  bcOrder.ActivateField(&quot;Billing Profile Id&quot;); _newline  bcOrder.ActivateField(&quot;Service Account Id&quot;); _newline  bcOrder.ActivateField(&quot;Sub Type&quot;); _newline _newline  bcOLI.ActivateField(&quot;Service Id&quot;); _newline  bcOLI.ActivateField(&quot;VFQ Product SubType&quot;); _newline  bcOLI.ActivateField(&quot;Service Account Id&quot;); _newline _newline  bcOLI.ActivateField(&quot;Previous Billing Account Id&quot;); _newline  bcOLI.ActivateField(&quot;Previous Billing Profile Id&quot;); _newline  bcOLI.ActivateField(&quot;Previous Service Account Id&quot;); _newline _newline _newline  bcOLI.ActivateField(&quot;Billing Account Id&quot;); _newline  bcOLI.ActivateField(&quot;Billing Profile Id&quot;); _newline  bcOLI.ActivateField(&quot;Service Account Id&quot;); _newline _newline  var bsProdData:Service = TheApplication().GetService(&quot;PDS Product Data Service&quot;); _newline  var psInp:PropertySet  = TheApplication().NewPropertySet(); _newline  var psOp:PropertySet   = TheApplication().NewPropertySet(); _newline _newline  bcAsset.SetViewMode(AllView); _newline  bcAsset.ActivateField(&quot;Status&quot;); _newline  bcAsset.ClearToQuery(); _newline//20111024:PPB check for root active asset only _newline  bcAsset.SetSearchExpr(&quot;[Parent Asset Id] IS NULL AND [Serial Number]=&apos;&quot; + strMSISDN + &quot;&apos; AND [Status]=&apos;Active&apos;&quot;);//check that an active asset does not exist. _newline  bcAsset.ExecuteQuery(ForwardOnly); _newline  if(!bcAsset.FirstRecord()) _newline  { _newline//search account, if it exists then no need to query _newline   bcAccount.ClearToQuery(); _newline   bcAccount.SetSearchExpr(&quot;[Name]=&apos;&quot; + strToBeAccntName + &quot;&apos;&quot;); _newline   bcAccount.ExecuteQuery(ForwardOnly); _newline   if(!bcAccount.FirstRecord())//create account record _newline   { _newline    bcAccount.NewRecord(NewAfter);//NAME: Prepaid: 97470399466 8942702109120946152, LOC: null _newline    bcAccount.SetFieldValue(&quot;Name&quot;,           strToBeAccntName); _newline    bcAccount.SetFieldValue(&quot;Type&quot;,           &quot;Residential&quot;); _newline    bcAccount.WriteRecord(); _newline   } _newline   strAccntId = bcAccount.GetFieldValue(&quot;Id&quot;); _newline   Outputs.SetProperty(&quot;Account Id&quot;,         strAccntId); _newline//this actually needs to be created in MVBC _newline//check and associate contact record _newline   var bcContactMVG:BusComp = bcAccount.GetMVGBusComp(&quot;Primary Contact First Name&quot;); _newline   bcContactMVG.ClearToQuery(); _newline   bcContactMVG.SetViewMode(AllView); _newline   bcContactMVG.SetSearchExpr(&quot;[ID Information]=&apos;&quot;+ strToBeConDocId + &quot;&apos;&quot;); _newline   bcContactMVG.ExecuteQuery(ForwardOnly); _newline   if(!bcContactMVG.FirstRecord()) _newline   { _newline    var bcContact:BusComp = bcContactMVG.GetAssocBusComp(); _newline    bcContact.ActivateField(&quot;Id&quot;); _newline    bcContact.ActivateField(&quot;First Name&quot;); _newline    bcContact.ActivateField(&quot;Last Name&quot;); _newline    bcContact.ActivateField(&quot;M/F&quot;); _newline    bcContact.ActivateField(&quot;Date of Birth&quot;); _newline    bcContact.ActivateField(&quot;ID Type&quot;); _newline    bcContact.ActivateField(&quot;ID Information&quot;); _newline    bcContact.SetViewMode(AllView); _newline    bcContact.ClearToQuery(); _newline    bcContact.SetSearchExpr(&quot;[ID Information]=&apos;&quot;+ strToBeConDocId + &quot;&apos;&quot;); _newline    bcContact.ExecuteQuery(ForwardOnly); _newline    if(!bcContact.FirstRecord()) _newline    { _newline     bcContact.NewRecord(NewAfter); _newline     bcContact.SetFieldValue(&quot;First Name&quot;,     strToBeContactFN); _newline     bcContact.SetFieldValue(&quot;Last Name&quot;,      strToBeContactLN); _newline     bcContact.SetFieldValue(&quot;M/F&quot;,            &quot;M&quot;); _newline     bcContact.SetFieldValue(&quot;Date of Birth&quot;,  &quot;1/1/2000&quot;); _newline     bcContact.SetFieldValue(&quot;ID Type&quot;,        &quot;Qatari ID&quot;); _newline     bcContact.SetFieldValue(&quot;ID Information&quot;, strToBeConDocId); _newline     bcContact.WriteRecord(); _newline    } _newline    strConId = bcContact.GetFieldValue(&quot;Id&quot;); _newline    Outputs.SetProperty(&quot;Contact Id&quot;,strConId); _newline    bcContact = null; _newline   } _newline   bcContactMVG = null; _newline//check and create address record _newline   var bcAddrMVG:BusComp = bcAccount.GetMVGBusComp(&quot;Street Address&quot;); _newline   bcAddrMVG.ClearToQuery(); _newline   bcAddrMVG.SetViewMode(AllView); _newline   bcAddrMVG.SetSearchExpr(&quot;[Street Address]=&apos;&quot;+ strToBeStrAddr + &quot;&apos;&quot;); _newline   bcAddrMVG.ExecuteQuery(ForwardOnly); _newline   if(!bcAddrMVG.FirstRecord()) _newline   { _newline    var bcAddress:BusComp = bcAddrMVG.GetAssocBusComp(); _newline    bcAddress.ActivateField(&quot;Id&quot;); _newline    bcAddress.ActivateField(&quot;Street Address&quot;); _newline    bcAddress.SetViewMode(AllView); _newline    bcAddress.ClearToQuery(); _newline    bcAddress.SetSearchExpr(&quot;[Street Address]=&apos;&quot;+ strToBeStrAddr + &quot;&apos;&quot;); _newline    bcAddress.ExecuteQuery(ForwardOnly); _newline    if(!bcAddress.FirstRecord()) _newline    { _newline     bcAddress.NewRecord(NewAfter); _newline     bcAddress.SetFieldValue(&quot;Street Address&quot;,     strToBeStrAddr); _newline     bcAddress.WriteRecord(); _newline    } _newline    bcAddress.Associate(NewBefore); _newline    strAddrId = bcAddress.GetFieldValue(&quot;Id&quot;); _newline    Outputs.SetProperty(&quot;Address Id&quot;,strAddrId); _newline    bcAddress = null; _newline   } _newline   bcAddrMVG=null; _newline//check create invoice profile record _newline   bcInvProf.ClearToQuery(); _newline   bcInvProf.SetSearchExpr(&quot;[Name]=&apos;&quot; + strToBeCIPName + &quot;&apos;&quot;); _newline   bcInvProf.ExecuteQuery(ForwardOnly); _newline   if(!bcInvProf.FirstRecord())////create CIP record _newline   { _newline    bcInvProf.NewRecord(NewAfter); _newline    bcInvProf.SetFieldValue(&quot;Name&quot;,               strToBeCIPName); _newline    bcInvProf.SetFieldValue(&quot;Payment Method&quot;,     &quot;Prepaid&quot;); _newline    bcInvProf.SetFieldValue(&quot;VFQ Validated Flag&quot;, &quot;Y&quot;); _newline    bcInvProf.SetFieldValue(&quot;Contact Id&quot;,               strConId); _newline    bcInvProf.SetFieldValue(&quot;Address Id&quot;,               strAddrId); _newline    bcInvProf.WriteRecord(); _newline   } _newline   strInvProfId = bcInvProf.GetFieldValue(&quot;Id&quot;); _newline   Outputs.SetProperty(&quot;Invoice Profile Id&quot;,strInvProfId); _newline//set Id of all these child entities on the account as primary _newline   bcAccount.SetFieldValue(&quot;Primary Contact Id&quot;,          strConId); _newline   bcAccount.SetFieldValue(&quot;Primary Address Id&quot;,          strAddrId); _newline   bcAccount.SetFieldValue(&quot;Primary Billing Profile Id&quot;,  strInvProfId); _newline   bcAccount.WriteRecord(); _newline//check create order record _newline   bcOrder.ClearToQuery(); _newline//check for any kind of order, even if one order exists means the account has been operational _newline   bcOrder.ExecuteQuery(ForwardOnly); _newline   if(!bcOrder.FirstRecord())//create order _newline   { _newline    bcOrder.NewRecord(NewAfter); _newline    bcOrder.SetFieldValue(&quot;Status&quot;,&quot;Paid&quot;); _newline    bcOrder.SetFieldValue(&quot;Back Office Order Number&quot;, strToBeOrdIntId); _newline    bcOrder.SetFieldValue(&quot;Sub Type&quot;, &quot;Bulk Preactivation&quot;); _newline _newline    bcPick = bcOrder.GetPicklistBusComp(&quot;Order Type&quot;); _newline    bcPick.ClearToQuery(); _newline    bcPick.SetSearchExpr(&quot;[Order Type]=&apos;Sales Order&apos;&quot;); _newline    bcPick.ExecuteQuery(ForwardOnly); _newline    if(bcPick.FirstRecord()) _newline     bcPick.Pick(); _newline _newline    bcOrder.SetFieldValue(&quot;Account Id&quot;, strAccntId); _newline    bcOrder.SetFieldValue(&quot;Billing Account Id&quot;, strAccntId); _newline    bcOrder.SetFieldValue(&quot;Service Account Id&quot;, strAccntId); _newline    bcOrder.SetFieldValue(&quot;Billing Profile Id&quot;, strInvProfId); _newline _newline    bcOrder.WriteRecord();//becos there is a state model must abide by the same _newline    strOrderId = bcOrder.GetFieldValue(&quot;Id&quot;); _newline    Outputs.SetProperty(&quot;Order Number&quot;, bcOrder.GetFieldValue(&quot;Order Number&quot;)); _newline//check if any root OLI exists _newline    bcOLI.ClearToQuery(); _newline    bcOLI.SetSearchExpr(&quot;[Order Header Id]=&apos;&quot; + strOrderId + &quot;&apos; AND [Parent Order Item Id] IS NULL&quot;); _newline    bcOLI.ExecuteQuery(ForwardOnly); _newline    if(!bcOLI.FirstRecord())//create order _newline    { _newline//create OLI using favourite _newline     psInp.SetProperty(&quot;Doc Id&quot;, strOrderId); _newline     psInp.SetProperty(&quot;Template Search Spec&quot;,&quot;[Name]=&apos;&quot; + strPlan + &quot;&apos;&quot;); _newline     bsProdData.InvokeMethod(&quot;AddFavoriteToOrder&quot;,psInp, psOp); _newline    } _newline//set values of SIM, MSISDN and Reservation Token on respective OLI records _newline//MSISDN _newline    bcOLI.ClearToQuery(); _newline//    bcOLI.SetSearchExpr(&quot;[Parent Order Item Id] IS NULL&quot;); _newline    bcOLI.SetSearchExpr(&quot;[Order Header Id]=&apos;&quot; + strOrderId + &quot;&apos;&quot;); _newline    bcOLI.ExecuteQuery(); _newline    var isRecord = bcOLI.FirstRecord(); _newline    while(isRecord) _newline    { _newline     bcOLI.SetFieldValue(&quot;Service Id&quot;,          strMSISDN); _newline     bcOLI.SetFieldValue(&quot;Service Account Id&quot;,  strAccntId); _newline     bcOLI.SetFieldValue(&quot;Previous Billing Account Id&quot;, strAccntId); _newline     bcOLI.SetFieldValue(&quot;Previous Service Account Id&quot;, strAccntId); _newline     bcOLI.SetFieldValue(&quot;Previous Billing Profile Id&quot;, strInvProfId); _newline _newline     bcOLI.SetFieldValue(&quot;Billing Account Id&quot;, strAccntId); _newline     bcOLI.SetFieldValue(&quot;Service Account Id&quot;, strAccntId); _newline     bcOLI.SetFieldValue(&quot;Billing Profile Id&quot;, strInvProfId); _newline _newline     bcOLI.WriteRecord(); _newline     isRecord = bcOLI.NextRecord(); _newline    } _newline//SIM _newline    bcOLI.ClearToQuery(); _newline    bcOLI.SetSearchExpr(&quot;[Order Header Id]=&apos;&quot; + strOrderId + &quot;&apos; AND [Product]=&apos;SIM Card&apos;&quot;); _newline    bcOLI.ExecuteQuery(); _newline    if(bcOLI.FirstRecord()) _newline    { _newline     bcOLI.SetFieldValue(&quot;Service Id&quot;, strSIM); _newline//20110801:PPB SIM Type is to be set on SIM card product _newline     if(&quot;&quot;!=strSIMType) _newline      bcOLI.SetFieldValue(&quot;VFQ Product SubType&quot;,strSIMType); _newline     bcOLI.WriteRecord(); _newline    } _newline//Reservation Token _newline    bcOLI.ClearToQuery(); _newline    bcOLI.SetSearchExpr(&quot;[Order Header Id]=&apos;&quot; + strOrderId + &quot;&apos; AND [Product]=&apos;Number Reservation Token&apos;&quot;); _newline    bcOLI.ExecuteQuery(); _newline    if(bcOLI.FirstRecord()) _newline    { _newline     bcOLI.SetFieldValue(&quot;Service Id&quot;,strResToken); _newline     bcOLI.WriteRecord(); _newline    } _newline    if(bSubmit) _newline    { _newline//requery order _newline     bcOrder.ClearToQuery(); _newline     bcOrder.SetSearchExpr(&quot;[Id]=&apos;&quot; + strOrderId + &quot;&apos;&quot;); _newline     bcOrder.ExecuteQuery(ForwardOnly); _newline     if(bcOrder.FirstRecord()) _newline     { _newline//submit _newline      bcOrder.SetFieldValue(&quot;Status&quot;, &quot;Submitted&quot;); _newline      bcOrder.WriteRecord(); _newline      bsProdData = TheApplication().GetService(&quot;Workflow Process Manager&quot;); _newline      psInp.SetProperty(&quot;RowId&quot;, strOrderId); _newline      psInp.SetProperty(&quot;ProcessName&quot;, &quot;SISOMBillingSubmitOrderWebService&quot;); _newline      bsProdData.InvokeMethod(&quot;RunProcess&quot;, psInp, psOp); _newline      strErrCode = &quot;OK&quot;; _newline      strErrMesg = &quot;Order submitted.&quot;; _newline     } _newline     else _newline     { _newline      strErrCode = &quot;ORDER_usNOT_usFOUND&quot;; _newline      strErrMesg = &quot;Order was created/queried but was not found for submission.&quot;; _newline     } _newline    } _newline   } _newline   else _newline   { _newline    strOrderId = bcOrder.GetFieldValue(&quot;Id&quot;); _newline    strErrCode = &quot;ORDER_usEXISTS&quot;; _newline    strErrMesg = &quot;Order exists, nothing processed, may require resubmission.&quot;; _newline   } _newline  } _newline  else _newline  { _newline   strErrCode = &quot;ASSET_usEXISTS&quot;; _newline   strErrMesg = &quot;An Active asset exists for the MSISDN.&quot;; _newline  } _newline//cleanup _newline  bsProdData = null; _newline  psInp      = null; _newline  psOp       = null; _newline _newline  bcInvProf = null; _newline  bcPick    = null; _newline  bcOLI     = null; _newline  bcOrder   = null; _newline  bcAccount = null; _newline  boAccount = null; _newline _newline  bcAsset  = null; _newline  boAsset  = null; _newline  strErrMesgBase = &quot;Account:&quot; + strAccntId + &quot;;Contact:&quot; + strConId + &quot;;Address:&quot; + strAddrId + &quot;;InvProfile:&quot; + strInvProfId + &quot;;Order:&quot; + strOrderId + &quot;;&quot;; _newline } _newline Outputs.SetProperty(&quot;Order Id&quot;,      strOrderId); _newline Outputs.SetProperty(&quot;Error Code&quot;,    strErrCode); _newline Outputs.SetProperty(&quot;Error Message&quot;, strErrMesgBase + strErrMesg); _newline return CancelOperation; _newline}"
 Program_spcLanguage="JS"
 Name="func_usProcessPrepaidOrder_uspreAvatar"
 Sequence="35"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function func_usProcessSuspendResume(Inputs, Outputs)_newline{//this is typically for invocation from the UI planned to be previously by a Ticket scenario but NOT IN USE_newline var strAssetId      = Inputs.GetProperty(&quot;Asset Id&quot;);_newline var strAssetIntegId = Inputs.GetProperty(&quot;Integration Id&quot;);_newline var strAccntId      = Inputs.GetProperty(&quot;Account Id&quot;);//fetched from Service Account Id on asset_newline var strProdId       = Inputs.GetProperty(&quot;Product Id&quot;);//product Id for the asset_newline var strReqSrc       = Inputs.GetProperty(&quot;Request Source&quot;);//User, System_newline var strReqType      = Inputs.GetProperty(&quot;Request Type&quot;);//suspend, resume_newline var strSRId, boMain, bcSR, bcAsset;_newline var strErrCode=&quot;OK&quot;, strErrMesg, strConId, strCIPId, strOpStatus, strStatus, strProdType,strProdName;_newline//for user initiated suspend - resume create a SR and take the user to the SR where he can set the suspend and resume dates and then submit SR_newline if(&quot;user&quot;==strReqSrc || &quot;User&quot;==strReqSrc)_newline {_newline  boMain = TheApplication().GetBusObject(&quot;Asset Management&quot;);_newline  bcAsset = boMain.GetBusComp(&quot;Asset Mgmt - Asset&quot;);_newline  bcAsset.ActivateMultipleFields(func_usMultiFields(&quot;Asset Mgmt - Asset&quot;));_newline  bcAsset.SetViewMode(AllView);_newline  bcAsset.ClearToQuery();_newline//we consider non-Inactive, non-promotion root assets _newline  bcAsset.SetSearchExpr(&quot;[Id]=&apos;&quot; + strAssetId + &quot;&apos;&quot;);_newline  bcAsset.ExecuteQuery();_newline  if(!bcAsset.FirstRecord())_newline  {_newline   strErrCode = &quot;ASSET_usNOT_usFOUND&quot;;_newline   strErrMesg = &quot;Asset with id &quot; + strAssetId + &quot; not found.&quot;;_newline  }_newline  else_newline  {_newline   strProdName    = bcAsset.GetFieldValue(&quot;Product Name&quot;);_newline   strProdType    = bcAsset.GetFieldValue(&quot;Product Type&quot;);//PROD_usCD: promotion or not_newline   strOpStatus    = bcAsset.GetFieldValue(&quot;Operating Status&quot;);_newline   strStatus      = bcAsset.GetFieldValue(&quot;Status&quot;);_newline   strConId       = bcAsset.GetFieldValue(&quot;Owner Contact Id&quot;);_newline   strCIPId       = bcAsset.GetFieldValue(&quot;Billing Profile Id&quot;);_newline//this is system barring being requested, not allowed if already applied_newline   if(&quot;Inactive&quot;==strStatus || &quot;Promotion&quot;==strProdType || &quot;&quot;!=bcAsset.GetFieldValue(&quot;Parent Asset Id&quot;))_newline   {_newline    strErrCode = &quot;CANNOT_usEXECUTE&quot;;_newline    strErrMesg = &quot;Request to &quot; + strReqType + &quot; not allowed for selected asset because it is eiether a Promotion asset or already terminated or is not a root bundle asset.&quot;;_newline   }_newline   else if(&quot;Suspend&quot; == strReqType &amp;&amp; &quot;Suspended&quot;==strStatus &amp;&amp; (&quot;User&quot;==strOpStatus || &quot;User+System&quot;==strOpStatus))_newline   {_newline    strErrCode = &quot;ALREADY_usSUSP_usBY_usUSER&quot;;_newline    strErrMesg = &quot;Asset is already suspended upon user request.&quot;;_newline   }_newline   else if(&quot;Resume&quot; == strReqType &amp;&amp; (&quot;Active&quot;==strStatus || &quot;System&quot;==strOpStatus))_newline   {_newline    strErrCode = &quot;RESUME_usNOT_usPERMITTED&quot;;_newline    strErrMesg = &quot;Asset is either Active already or not suspended by user.&quot;;_newline   }_newline  }_newline  if(&quot;OK&quot;==strErrCode)_newline  {_newline//create ticket and navigate to the view  _newline   Inputs.SetProperty(&quot;TicketScenario&quot;, &quot;SUSPEND_usRESUME&quot;);_newline   func_usCreateTicket(Inputs, Outputs);_newline   strSRId = Outputs.GetProperty(&quot;SR Id&quot;);_newline   if(&quot;&quot;!=strSRId)_newline   {//gotoview_newline    boMain = TheApplication().GetBusObject(&quot;Service Request&quot;);_newline    bcSR = boMain.GetBusComp(&quot;Service Request&quot;);_newline    bcSR.SetViewMode(AllView);_newline    bcSR.ClearToQuery();_newline    bcSR.SetSearchExpr(&quot;[Id]=&apos;&quot; + strSRId + &quot;&apos;&quot;);_newline    bcSR.ExecuteQuery(ForwardOnly);_newline    if(bcSR.FirstRecord())_newline    {_newline     TheApplication().GotoView(&quot;TM SR More Info View&quot;, boMain);_newline//would have been nice to show a message to user after navigating to the SR, but that seems to not work._newline//     strErrCode = &quot;NEXT_usSTEPS&quot;;_newline//     strErrMesg = &quot;Request has been created, please capture the relevant details and submit the request.&quot;;_newline    }_newline   }_newline   else_newline   {_newline    strErrCode = &quot;ERR_usTT_usCREATION&quot;;_newline    strErrMesg = &quot;Ticket record for requested operation could not be created.&quot;;_newline   }_newline  }_newline  if(&quot;OK&quot;!=strErrCode)_newline  {_newline   TheApplication().RaiseErrorText(strErrCode + &quot;:&quot; + strErrMesg);_newline  }_newline }_newline return CancelOperation;_newline}"
 Program_spcLanguage="JS"
 Name="func_usProcessSuspendResume"
 Sequence="36"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="/*-------------+------+--------+----------------------------------------------  _newlineDate(YYYYMMDD) | Ver  | By     | Description of Change  _newline---------------+------+--------+----------------------------------------------  _newline20131212       | 1.00 | Prasad | Creation  _newline20140224       | 1.10 | Arpan  | Missed out nextrecord in while loop added _newline20140225       | 1.20 | Prasad | Set the paid flag and fullfillment mode before submission _newline---------------+------+--------+--------------------------------------------*/  _newlinefunction func_usProcessSuspendResumeSub(Inputs, Outputs) _newline{ _newline var strAssetIntegId = Inputs.GetProperty(&quot;Integration Id&quot;); _newline var strRequestType  = Inputs.GetProperty(&quot;Request Type&quot;); _newline var strRequestSrc   = Inputs.GetProperty(&quot;Request Source&quot;); _newline var OrderExtRef     = Inputs.GetProperty(&quot;Ext Ref Id&quot;); _newline _newline var boMain,bcAsset; _newline var strOpStatus, strStatus, strAccntId, strRootAccId, strRootAssetId, strConId, strCIPId, strParAssetId, strProdType; _newline _newline var psIp, psOp, bsUtil, boMain, bcOrd, bcOLI; _newline var isRec,isOrderForInternalCompletion=false,isChargeApplicable=true; _newline var strOrderId=&quot;&quot;,strOLIProdName=&quot;&quot;, strOLIActionCode=&quot;&quot;,strCurrAssetStatus=&quot;&quot;; _newline var strChangeReason= strRequestSrc + &quot; Initiated&quot;; _newline _newline var strErrCode=&quot;&quot;, strErrMesg=&quot;&quot;; _newline boMain = TheApplication().GetBusObject(&quot;Asset Management&quot;); _newline bcAsset = boMain.GetBusComp(&quot;Asset Mgmt - Asset&quot;); _newline bcAsset.SetViewMode(AllView); _newline bcAsset.ActivateMultipleFields(func_usMultiFields(&quot;Asset Mgmt - Asset&quot;)); _newline bcAsset.ClearToQuery(); _newline bcAsset.SetSearchExpr(&quot;[Integration Id]=&apos;&quot; + strAssetIntegId + &quot;&apos;&quot;); _newline bcAsset.ExecuteQuery(); _newline if(!bcAsset.FirstRecord()) _newline { _newline  strErrCode = &quot;ASSET_usNOT_usFOUND&quot;; _newline  strErrMesg = &quot;Suspended asset with integration id &quot; + strAssetIntegId + &quot; not found.&quot;; // [JUHIV][16032014][Changed strMSISDN to strAssetIntegId] _newline } _newline else _newline { _newline  strParAssetId  = bcAsset.GetFieldValue(&quot;Parent Asset Id&quot;); _newline  strProdType    = bcAsset.GetFieldValue(&quot;Product Type&quot;); _newline  strProdType    = bcAsset.GetFieldValue(&quot;Prod Type&quot;);//this is based on S_usPROD_usINT.TYPE _newline  strOpStatus    = bcAsset.GetFieldValue(&quot;Operating Status&quot;); _newline  strStatus      = bcAsset.GetFieldValue(&quot;Status&quot;); _newline  strAccntId     = bcAsset.GetFieldValue(&quot;Owner Account Id&quot;); _newline  strRootAccId   = bcAsset.GetFieldValue(&quot;Root Account Id&quot;); _newline  strRootAssetId = bcAsset.GetFieldValue(&quot;Id&quot;); _newline  strAssetIntegId= bcAsset.GetFieldValue(&quot;Integration Id&quot;); _newline  strConId       = bcAsset.GetFieldValue(&quot;Owner Contact Id&quot;); _newline  strCIPId       = bcAsset.GetFieldValue(&quot;Billing Profile Id&quot;); _newline//check validity of requested operation _newline  Inputs.SetProperty(&quot;Operating Status&quot;,strOpStatus); _newline  Inputs.SetProperty(&quot;Asset Status&quot;, strStatus); _newline  Inputs.SetProperty(&quot;Product Type&quot;, strProdType); _newline  func_usValidateSuspendResume(Inputs, Outputs) _newline  strErrCode = Outputs.GetProperty(&quot;Error Code&quot;); _newline  strErrMesg = Outputs.GetProperty(&quot;Error Message&quot;); _newline  if(&quot;OK&quot;==strErrCode) _newline  { _newline   psIp = TheApplication().NewPropertySet(); _newline   if(&quot;Suspend&quot;==strRequestType) _newline    psIp.SetProperty(&quot;ProcessName&quot;, &quot;SISOMSuspendWebService-Order&quot;); _newline   else if(&quot;Resume&quot;==strRequestType) _newline    psIp.SetProperty(&quot;ProcessName&quot;, &quot;SISOMResumeWebService-Order&quot;); _newline   psIp.SetProperty(&quot;AssetIntegrationId&quot;, strAssetIntegId); _newline   psIp.SetProperty(&quot;AccountId&quot;,strAccntId); _newline   bsUtil = TheApplication().GetService(&quot;Workflow Process Manager&quot;); _newline   psOp = TheApplication().NewPropertySet(); _newline   bsUtil.InvokeMethod(&quot;RunProcess&quot;, psIp, psOp); _newline   strOrderId=psOp.GetProperty(&quot;ActiveDocumentId&quot;); _newline   if(&quot;&quot;!=strOrderId) _newline   { _newline    boMain = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;); _newline    bcOrd = boMain.GetBusComp(&quot;Order Entry - Orders&quot;); _newline    bcOrd.SetViewMode(AllView); _newline// bcOrd.ActivateField(&quot;Charged Flag&quot;);//1.2  //Commented by AMITB for paid flag removal _newline    bcOrd.ActivateMultipleFields(func_usMultiFields(&quot;Order Entry - Orders&quot;)); _newline    bcOrd.ClearToQuery(); _newline    bcOrd.SetSearchExpr(&quot;Id=&apos;&quot; + strOrderId + &quot;&apos;&quot;); _newline    bcOrd.ExecuteQuery(ForwardOnly); _newline    if(bcOrd.FirstRecord()) _newline    { _newline     bcOrd.SetFieldValue(&quot;Back Office Order Number&quot;, OrderExtRef); _newline     bcOrd.SetFieldValue(&quot;Contact Id&quot;, strConId); _newline     bcOrd.SetFieldValue(&quot;Billing Profile Id&quot;, strCIPId); _newline  //bcOrd.SetFieldValue(&quot;Charged Flag&quot;,&quot;Y&quot;);//1.2 //Commented by AMITB for paid flag removal _newline     bcOrd.WriteRecord(); _newline     bcOLI=boMain.GetBusComp(&quot;Order Entry - Line Items&quot;); _newline     bcOLI.ActivateMultipleFields(func_usMultiFields(&quot;Order Entry - Line Items&quot;)); _newline     bcOLI.SetViewMode(AllView); _newline     bcOLI.ClearToQuery(); _newline     bcOLI.SetSearchExpr(&quot;[Parent Order Item Id] IS NULL&quot;);//traverse root OLI To set dates and delete susp charge for system orders _newline     bcOLI.ExecuteQuery(ForwardOnly); _newline     isRec=bcOLI.FirstRecord(); _newline     while(isRec) _newline     { _newline      strOLIProdName = bcOLI.GetFieldValue(&quot;Product&quot;); _newline      strOLIActionCode = bcOLI.GetFieldValue(&quot;Action Code&quot;); _newline      if(&quot;System&quot; == strRequestSrc &amp;&amp; &quot;Resume&quot; == strRequestType &amp;&amp; &quot;Add&quot; == strOLIActionCode   _newline       &amp;&amp; (-1 != strOLIProdName.indexOf(&quot;Fee&quot;) || -1 != strOLIProdName.indexOf(&quot;Charge&quot;))) _newline      { _newline       isChargeApplicable=false; _newline       bcOLI.DeleteRecord();//for system initiated suspension no charges to be applied _newline      } _newline   else if(&quot;User&quot; == strRequestSrc &amp;&amp; &quot;Resume&quot; == strRequestType &amp;&amp; &quot;Add&quot; == strOLIActionCode   _newline       &amp;&amp; (-1 != strOLIProdName.indexOf(&quot;Fee&quot;) || -1 != strOLIProdName.indexOf(&quot;Charge&quot;))) _newline      { //MV-01072014:Added for charge calc in Autoresume_newline       var IN1 = TheApplication().NewPropertySet();_newline    var Out1 = TheApplication().NewPropertySet();_newline    IN1.SetProperty(&quot;ObjectId&quot;,strOrderId);_newline    bsUtil = TheApplication().GetService(&quot;Voluntary_ussus_usRu&quot;);_newline    bsUtil.InvokeMethod(&quot;CalcResumpFee&quot;,IN1,Out1);_newline   }_newline      else if(&quot;Suspend&quot; == strOLIActionCode || &quot;Resume&quot; == strOLIActionCode)//root bundle _newline      {//if the asset status is already final status then internally complete the order _newline       strCurrAssetStatus = bcOLI.GetFieldValue(&quot;Asset Status&quot;); _newline       bcOLI.SetFieldValue(&quot;Change Reason&quot;,strChangeReason);  _newline       if((&quot;Suspended&quot;==strStatus &amp;&amp; &quot;Suspend&quot;==strOLIActionCode)) _newline        isOrderForInternalCompletion=true; _newline       bcOLI.WriteRecord(); _newline      } _newline      isRec=bcOLI.NextRecord(); _newline     } _newline     if(isOrderForInternalCompletion) _newline     { _newline//mark the OLI as Complete _newline      bcOLI.ClearToQuery(); _newline      bcOLI.SetSearchExpr(&quot;[Action Code]=&apos;Suspend&apos; OR [Action Code]=&apos;Resume&apos;&quot;); _newline      bcOLI.ExecuteQuery(ForwardOnly); _newline      isRec=bcOLI.FirstRecord(); _newline      while(isRec) _newline      { _newline       bcOLI.SetFieldValue(&quot;Status&quot;,&quot;Complete&quot;); _newline       bcOLI.WriteRecord(); _newline       isRec=bcOLI.NextRecord();//1.1 _newline      } _newline//mark the order as complete only if no other OLI (like charges) _newline     } _newline//submit the order _newline     try _newline     { _newline      psOp = TheApplication().NewPropertySet(); _newline      psIp = TheApplication().NewPropertySet(); _newline      psIp.SetProperty(&quot;RowId&quot;, strOrderId); _newline      psIp.SetProperty(&quot;Fulfillment Mode&quot;,&quot;Deliver&quot;);//1.2 _newline      psIp.SetProperty(&quot;ProcessName&quot;, &quot;SISOMBillingSubmitOrderWebService&quot;); _newline      bsUtil = TheApplication().GetService(&quot;Workflow Process Manager&quot;); _newline      psOp = TheApplication().NewPropertySet(); _newline      bsUtil.InvokeMethod(&quot;RunProcess&quot;, psIp, psOp); _newline      strErrCode = &quot;OK&quot;; _newline      strErrMesg = &quot;Order submitted successfully.&quot;; _newline     } _newline     catch(e) _newline     { _newline      strErrCode = &quot;ORDER_usSUBMIT_usERROR&quot;; _newline      strErrMesg = e.errCode + &quot;:&quot; + e.errText; _newline     } _newline    } _newline   } _newline  } _newline } _newline psIp = null; _newline psOp = null; _newline bsUtil = null; _newline boMain = null; _newline bcOrd = null; _newline bcOLI = null; _newline Outputs.SetProperty(&quot;OrderId&quot;,       strOrderId); _newline Outputs.SetProperty(&quot;Error Code&quot;,    strErrCode); _newline Outputs.SetProperty(&quot;Error Message&quot;, strErrMesg); _newline return CancelOperation; _newline}"
 Program_spcLanguage="JS"
 Name="func_usProcessSuspendResumeSub"
 Sequence="37"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments="20111103:Enhanced to get the Price of SUB-DEBT edr"
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function func_usSetPrice(Inputs,Outputs)_newline{_newlinevar strProductName = Inputs.GetProperty(&quot;Product Name&quot;);_newline  if(&quot;&quot;==strProductName)_newline  {_newline   Outputs.SetProperty(&quot;Error Code&quot;,&quot;PROD_usNOT_usFOUND&quot;);_newline   Outputs.SetProperty(&quot;Error Message&quot;,&quot;Product Do not Exist.&quot;);_newline  }_newline  else_newline_newlinevar boProd:BusObject = TheApplication().GetBusObject(&quot;Admin ISS Product Definition&quot;);_newline     var bcProd:BusComp   = boProd.GetBusComp(&quot;Internal Product - ISS Admin&quot;);_newline     bcProd.SetViewMode(AllView);_newline     bcProd.ClearToQuery();_newline     bcProd.SetSearchExpr(&quot;[Name]=&apos;&quot; + strProductName + &quot;&apos;&quot;);_newline     bcProd.ExecuteQuery(ForwardOnly);_newline     if(bcProd.FirstRecord())_newline     {_newline      var bcProdRel:BusComp   = boProd.GetBusComp(&quot;Component Product&quot;);_newline      bcProdRel.SetViewMode(AllView);_newline      bcProdRel.ClearToQuery();_newline      bcProdRel.ExecuteQuery(ForwardOnly);_newline      if(bcProdRel.FirstRecord())_newline      {_newline       Inputs.SetProperty(&quot;Product Code&quot;, bcProdRel.GetFieldValue(&quot;Part #&quot;));_newline       Outputs.SetProperty(&quot;Error Code&quot;,    &quot;OK&quot;);_newline       Outputs.SetProperty(&quot;Error Message&quot;, &quot;&quot;);_newline      }_newlinevar boPrice:BusObject = TheApplication().GetBusObject(&quot;Admin Price List&quot;);_newlinevar bcPrice:BusComp = boPrice.GetBusComp(&quot;Price List Item&quot;);_newlinebcPrice.SetViewMode(AllView);_newlinebcPrice.ClearToQuery();_newline//var xyz =  Inputs.GetProperty(&quot;Product Code&quot;);_newlinebcPrice.SetSearchExpr(&quot;[Part #]= &apos;&quot; + Inputs.GetProperty(&quot;Product Code&quot;) + &quot;&apos;&quot;);_newline//bcPrice.SetSearchExpr(&quot;[Product Name]= &apos;&quot; + Inputs.GetProperty(&quot;Product Name&quot;) + &quot;&apos;&quot;);_newline bcPrice.ExecuteQuery(ForwardOnly);_newline if(bcPrice.FirstRecord())_newline{_newlinevar strProductPrice = bcPrice.GetFieldValue(&quot;List Price&quot;);_newlineOutputs.SetProperty(&quot;Prd Price Subdebt&quot;,strProductPrice);_newline}_newline      bcProdRel = null;_newline     }_newline     bcProd=null;_newlinebcPrice=null;_newline}"
 Program_spcLanguage="JS"
 Name="func_usSetPrice"
 Sequence="38"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function func_usSubmitSuspendResumeSR(Inputs, Outputs)_newline{_newline//since this will be called from specific WFP no need to check call type, existence of record etc._newline var strErrMesg=&quot;Could not process.&quot;,strErrCode=&quot;ERROR&quot;;_newline var boMain,bcSR;_newline var strSRId = Inputs.GetProperty(&quot;SR Id&quot;);_newline var dStartDate,dEndDate,dToday = new Date();_newline boMain = TheApplication().GetBusObject(&quot;Service Request&quot;);_newline bcSR = boMain.GetBusComp(&quot;Service Request&quot;);_newline bcSR.SetViewMode(AllView);_newline bcSR.ActivateMultipleFields(func_usMultiFields(&quot;Service Request&quot;));_newline bcSR.ClearToQuery();_newline bcSR.SetSearchExpr(&quot;[Id]=&apos;&quot; + strSRId + &quot;&apos;&quot;);_newline bcSR.ExecuteQuery(ForwardOnly);_newline if(bcSR.FirstRecord())_newline {_newline  dStartDate = bcSR.GetFieldValue(&quot;CEM Planned Start Date&quot;);_newline  dEndDate = bcSR.GetFieldValue(&quot;CEM Planned Completion Date&quot;);_newline//validate to check that the suspend and resume dates are in future_newline  strErrMesg=&quot;Record found:&quot; + dToday + &quot;:&quot; + dStartDate + &quot;:&quot; + dEndDate ;_newline  strErrCode=&quot;WIP&quot;;_newline_newline//if all ok, mark the status as In Progress and let the RCR pick up the record_newline }_newline bcSR=null;_newline boMain=null;_newline Outputs.SetProperty(&quot;Error Code&quot;,strErrCode);_newline Outputs.SetProperty(&quot;Error Message&quot;,strErrMesg);_newline return CancelOperation;_newline}"
 Program_spcLanguage="JS"
 Name="func_usSubmitSuspendResumeSR"
 Sequence="40"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function func_usUpdateOLI(Inputs, Outputs)_newline{//to set specific fields based on search spec passed in_newline var strErrMesg=&quot;&quot;, strErrCode=&quot;OK&quot;;_newline var boMain,bcOLI,isRec;_newline var strSearchSpec = Inputs.GetProperty(&quot;SearchSpec&quot;);_newline var strFieldName  = Inputs.GetProperty(&quot;FieldName&quot;);_newline var strFieldValue = Inputs.GetProperty(&quot;FieldValue&quot;);_newline boMain = TheApplication().GetBusObject(&quot;PDS Order Item&quot;);_newline bcOLI = boMain.GetBusComp(&quot;Order Entry - Line Items&quot;);_newline bcOLI.SetViewMode(AllView);_newline bcOLI.ActivateField(strFieldName);_newline bcOLI.ClearToQuery();_newline bcOLI.SetSearchExpr(strSearchSpec);_newline bcOLI.ExecuteQuery(ForwardOnly);_newline isRec = bcOLI.FirstRecord();_newline while(isRec)_newline {_newline  bcOLI.SetFieldValue(strFieldName,strFieldValue);_newline  isRec = bcOLI.NextRecord();_newline }_newline bcOLI = null;_newline boMain = null;_newline Outputs.SetProperty(&quot;Error Code&quot;,   strErrCode);_newline Outputs.SetProperty(&quot;Error Message&quot;, strErrMesg);_newline return CancelOperation;_newline}"
 Program_spcLanguage="JS"
 Name="func_usUpdateOLI"
 Sequence="41"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function func_usValidateExistingOrder(Inputs, Outputs)_newline{_newline var strToBeOrdIntId = Inputs.GetProperty(&quot;Ext Ref Id&quot;);_newline var strOrderId = &quot;&quot;;_newline var boMain, bcOrd, strErrCode = &quot;OK&quot;,  strErrMesg =&quot;&quot;;_newline boMain = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);_newline bcOrd = boMain.GetBusComp(&quot;Order Entry - Orders&quot;);_newline bcOrd.SetViewMode(AllView);_newline bcOrd.ActivateField(&quot;Status&quot;);_newline bcOrd.ClearToQuery();_newline bcOrd.SetSearchExpr(&quot;[Back Office Order Number]=&apos;&quot; + strToBeOrdIntId + &quot;&apos;&quot;);_newline bcOrd.ExecuteQuery(ForwardOnly);_newline if(bcOrd.FirstRecord())_newline {_newline  strOrderId = bcOrd.GetFieldValue(&quot;Id&quot;);_newline  strErrCode = &quot;ORDER_usEXISTS_usFOR_usEDR&quot;;_newline  strErrMesg = &quot;Order for &quot; + strToBeOrdIntId + &quot; exists [Id: &quot; + strOrderId + &quot;, Status: &quot; +  bcOrd.GetFieldValue(&quot;Status&quot;) + &quot;]&quot;;_newline }_newline bcOrd  = null;_newline boMain = null;_newline Outputs.SetProperty(&quot;Order Id&quot;, strOrderId);_newline Outputs.SetProperty(&quot;Error Code&quot;, strErrCode);_newline Outputs.SetProperty(&quot;Error Message&quot;, strErrMesg);_newline return CancelOperation;_newline}"
 Program_spcLanguage="JS"
 Name="func_usValidateExistingOrder"
 Sequence="42"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function func_usValidateSuspendResume(Inputs, Outputs)_newline{//check if for the current asset the number of successful user initiated suspensions in last one year are within permitted count or not_newline var strAssetIntegId = Inputs.GetProperty(&quot;Integration Id&quot;);_newline var strRequestType  = Inputs.GetProperty(&quot;Request Type&quot;);_newline var strRequestSrc   = Inputs.GetProperty(&quot;Request Source&quot;);_newline var strOpStatus     = Inputs.GetProperty(&quot;Operating Status&quot;);_newline var strAssetStatus  = Inputs.GetProperty(&quot;Asset Status&quot;);_newline var strProdType     = Inputs.GetProperty(&quot;Product Type&quot;);_newline_newline var nActCount = 0;_newline var isRec;_newline var strErrMesg=&quot;&quot;, strErrCode=&quot;OK&quot;;_newline var nAllowCount = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;PERMITTED_usSUSP_usCOUNT&quot;,&quot;DEFAULT&quot;);_newline nAllowCount = ToInteger(nAllowCount);_newline if(0==nAllowCount) nAllowCount = 1;_newline var d1=new Date(),d2=new Date();_newline d1.setYear(d1.getYear()-1);_newline var dOLI;_newline_newline//find root OLI for the given AssetIntegId with Change Reason=&apos;User Initiated&apos; and Status=Complete and due date within the last one year_newline var boMain,bcOLI;_newline if(&quot;Service Bundle&quot;!=strProdType)_newline {_newline  strErrCode=&quot;NOT_usALLOWED&quot;;_newline  strErrMesg=&quot;Suspension, resumption is allowed only for Service Bundle type of assets. Selected asset type - &quot; + strProdType + &quot;.&quot;;_newline }_newline else if(&quot;Resume&quot;==strRequestType &amp;&amp; &quot;Active&quot;==strAssetStatus)_newline {_newline  strErrCode=&quot;NOT_usALLOWED&quot;;_newline  strErrMesg=&quot;Service is already Active, hence resumption not allowed.&quot;;_newline }_newline else if(&quot;Suspend&quot;==strRequestType &amp;&amp; &quot;User&quot;==strRequestSrc &amp;&amp; &quot;Suspended&quot;==strAssetStatus &amp;&amp; -1&lt;strOpStatus.indexOf(&quot;User&quot;))_newline {_newline  strErrCode=&quot;SUSPENDED_usBY_usUSER&quot;;_newline  strErrMesg=&quot;Service is already suspended upon user request.&quot;;_newline }_newline else if(&quot;Suspend&quot;==strRequestType &amp;&amp; &quot;System&quot;==strRequestSrc &amp;&amp; &quot;Suspended&quot;==strAssetStatus &amp;&amp; -1&lt;strOpStatus.indexOf(&quot;System&quot;))_newline {_newline  strErrCode=&quot;SUSPENDED_usBY_usSYSTEM&quot;;_newline  strErrMesg=&quot;Service is already suspended as per system policies.&quot;;_newline }_newline else if(&quot;Resume&quot;==strRequestType &amp;&amp; &quot;User&quot;==strRequestSrc &amp;&amp; &quot;Suspended&quot;==strAssetStatus &amp;&amp; 0&gt;strOpStatus.indexOf(&quot;User&quot;))_newline {_newline  strErrCode=&quot;NOT_usSUSPENDED_usBY_usUSER&quot;;_newline  strErrMesg=&quot;Service is not suspended by user request, hence resumption not allowed.&quot;;_newline }_newline else if(&quot;Resume&quot;==strRequestType &amp;&amp; &quot;System&quot;==strRequestSrc &amp;&amp; &quot;Suspended&quot;==strAssetStatus &amp;&amp; 0&gt;strOpStatus.indexOf(&quot;System&quot;))_newline {_newline  strErrCode=&quot;NOT_usSUSPENDED_usBY_usSYSTEM&quot;;_newline  strErrMesg=&quot;Service is not suspended by system policies, hence resumption not allowed.&quot;;_newline }_newline else if(&quot;Suspend&quot;==strRequestType &amp;&amp; &quot;User&quot;==strRequestSrc)_newline {_newline  boMain = TheApplication().GetBusObject(&quot;PDS Order Item&quot;);_newline  bcOLI = boMain.GetBusComp(&quot;Order Entry - Line Items&quot;);_newline  bcOLI.SetViewMode(AllView);_newline  bcOLI.ActivateField(&quot;Due Date&quot;);_newline  bcOLI.ClearToQuery();_newline  bcOLI.SetSearchExpr(&quot;[Asset Integration Id]=&apos;&quot; + strAssetIntegId + &quot;&apos; AND [Action Code]=&apos;Suspend&apos; AND [Status]=&apos;Complete&apos; AND [Change Reason]=&apos;User Initiated&apos;&quot;);_newline  bcOLI.ExecuteQuery(ForwardOnly);_newline  isRec = bcOLI.FirstRecord();_newline  while(isRec)_newline  {_newline   dOLI = new Date(bcOLI.GetFieldValue(&quot;Due Date&quot;));_newline   if(d1&lt;dOLI &amp;&amp; dOLI &lt;=d2)//check date_newline    nActCount++;_newline   isRec = bcOLI.NextRecord();_newline  }_newline  if(nActCount&gt;=nAllowCount)_newline  {_newline   strErrCode=&quot;NOT_usALLOWED&quot;;_newline   strErrMesg=&quot;User initiated suspension has been executed &quot; + nActCount + &quot; times in last year, maximum permitted: &quot; + nAllowCount+ &quot;.&quot;;_newline  }_newline }_newline bcOLI = null;_newline boMain = null;_newline Outputs.SetProperty(&quot;Error Code&quot;,   strErrCode);_newline Outputs.SetProperty(&quot;Error Message&quot;, strErrMesg);_newline return CancelOperation;_newline}"
 Program_spcLanguage="JS"
 Name="func_usValidateSuspendResume"
 Sequence="43"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments="[Manasi S] Added new fuction for MS-OPS Release 8.2.5"
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function func_ussetPrimaryBalance(strOrderId)_newline{_newlinetry_newline{_newlinevar boOrd=TheApplication().GetBusObject(&quot;PDS Simplified Order&quot;);_newlinevar bcOrd=boOrd.GetBusComp(&quot;PDS Simplified Order Entry - Line Items&quot;);_newlinevar order_usid=strOrderId;_newlinebcOrd.ActivateField(&quot;Product&quot;);_newlinebcOrd.ActivateField(&quot;Net Price&quot;);_newlinebcOrd.ActivateField(&quot;VFQ Primary Balance&quot;);_newlinebcOrd.SetViewMode(AllView);_newlinebcOrd.ClearToQuery();_newlinebcOrd.SetSearchSpec(&quot;Order Header Id&quot;,order_usid);_newline//TheApplication().RaiseErrorText(order_usid);_newlinebcOrd.ExecuteQuery(ForwardOnly);_newlinevar isR=bcOrd.FirstRecord();_newline_newlinewhile (isR)_newline{_newlinevar name=bcOrd.GetFieldValue(&quot;Product&quot;);_newlineif (name==&apos;Freedom Replenishment 1&apos; || name==&apos;Freedom Replenishment 2&apos; || name==&apos;Freedom Replenishment 3&apos; || name==&apos;Freedom Replenishment 4&apos; || name==&apos;Freedom Replenishment 5&apos; || name==&apos;Freedom Replenishment 6&apos; || name==&apos;Freedom Replenishment 7&apos; || name==&apos;Freedom Replenishment 8&apos; ||name==&apos;Freedom Replenishment 9&apos; || name==&apos;Freedom Replenishment 10&apos;)_newline{_newlinevar value=bcOrd.GetFieldValue(&quot;Net Price&quot;);_newlinebcOrd.SetFieldValue(&quot;VFQ Primary Balance&quot;,value);_newlinebcOrd.WriteRecord();_newline}_newlineisR=bcOrd.NextRecord();_newline}_newline}_newlinecatch (e)_newline{_newline}_newlinefinally_newline{_newlineisR=null;_newlinebcOrd=null;_newlineboOrd=null;_newline}_newlinereturn;_newline}"
 Program_spcLanguage="JS"
 Name="func_ussetPrimaryBalance"
 Sequence="39"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments="[Mayank][For Checking if the MSISDN is having Active Black Berry Serivce]"
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function mCheckBlackBerryService(inRootId , Outputs )_newline{_newline   try_newline   {_newline    Outputs.SetProperty(&quot;For root&quot;  ,inRootId );_newline       var strErrCode   = &quot;OK&quot;;_newline      var strErrMesg   = &quot;&quot;;_newline      var vSearchExpr  = &quot;&quot;;_newline      var vIsBB        = &quot;N&quot;;_newline      var vFirstRec    = &quot;&quot;;_newline_newline      Outputs.SetProperty(&quot;Non Camel&quot;  , &quot;&quot; );_newline      Outputs.SetProperty(&quot;BB Service&quot; , &quot;&quot; );_newline       _newline      var vAssetBO  =  TheApplication().GetBusObject(&quot;SWI Asset Mgmt - Asset (Order Mgmt)&quot;);_newline      var vAssetBC  = vAssetBO.GetBusComp(&quot;SWI Asset Mgmt - Asset (Order Mgmt)&quot;);_newline            _newline      vAssetBC.ActivateField(&quot;Root Asset Id&quot;);_newline      vAssetBC.ActivateField(&quot;Service Type&quot;);_newline      vAssetBC.ActivateField(&quot;Status&quot;);_newline      _newline      vAssetBC.ClearToQuery();_newline       _newline      vAssetBC.SetViewMode(AllView);_newline      vSearchExpr  = &quot;[Root Asset Id] = &apos;&quot;+inRootId+&quot;&apos; AND [Status] = &apos;Active&apos; AND ( [Service Type] = &apos;BB Services&apos; OR [Service Type] = &apos;Non Camel Roaming&apos; )&quot;;_newline      _newline       _newline      vAssetBC.SetSearchExpr(vSearchExpr  );_newline     Outputs.SetProperty(&quot; vSearchExpr  for sp &quot;,vSearchExpr   );_newline_newline      vAssetBC.ExecuteQuery( ForwardOnly );_newline_newline      vFirstRec =  vAssetBC.FirstRecord();_newline     //TheApplication().RaiseErrorText(vFirstRec);_newline    Outputs.SetProperty(&quot;for match counr of service &quot;,vAssetBC.CountRecords()   );   _newline      if ( vFirstRec )_newline      {_newline          _newline         while ( vFirstRec )_newline         {_newline              Outputs.SetProperty(&quot;whle checking for bbi &quot;,&quot;in loop&quot;);_newline            if ( vAssetBC.GetFieldValue(&quot;Service Type&quot;) == &quot;BB Services&quot; )_newline            {_newline                Outputs.SetProperty(&quot;BB Service&quot;, &quot;TRUE&quot; );_newline            }_newline            else_newline            if( vAssetBC.GetFieldValue(&quot;Service Type&quot;) == &quot;Non Camel Roaming&quot; )_newline            {_newline                Outputs.SetProperty(&quot;Non Camel&quot;, &quot;TRUE&quot; );_newline            }                _newline            _newline            vFirstRec = vAssetBC.NextRecord();_newline            _newline         } _newline         _newline      }_newline      Outputs.SetProperty(&quot; vAssetBC count out &quot;,  vAssetBC.CountRecords() ); _newline     _newline   _newline   }_newline   catch(e)_newline   {_newline      Outputs.SetProperty(&quot;Error Code&quot;    , e.errCode);_newline      Outputs.SetProperty(&quot;Error Message&quot; , e.toString());_newline   }_newline   finally_newline   {_newline      vAssetBC  = null;_newline      vAssetBO  = null;_newline   }_newline}"
 Program_spcLanguage="JS"
 Name="mCheckBlackBerryService"
 Sequence="48"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments="[Mayank][For ALU EDRs]"
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function mCheckPostPaidProfile (inAccntId  ,Outputs )_newline{_newline     try_newline   {_newline       var vProfileBO             = TheApplication().GetBusObject(&quot;Com Invoice Profile&quot;);_newline      var vProfileBC             = vProfileBO.GetBusComp(&quot;Com Invoice Profile&quot;);_newline      var vFirstRecord           = &quot;&quot;;       _newline      var vPaymentType           = &quot;Prepaid&quot;;_newline      vProfileBC.ActivateField(&quot;Payment Type&quot;);_newline      vProfileBC.ActivateField(&quot;Account Id&quot;);_newline      vProfileBC.ActivateField(&quot;Status&quot;);_newline      vProfileBC.ClearToQuery();_newline      vProfileBC.SetViewMode(AllView);_newline_newline     vProfileBC.SetSearchSpec(&quot;Account Id&quot; , inAccntId  );      _newline      vProfileBC.ExecuteQuery(ForwardOnly);      _newline      vFirstRecord =  vProfileBC.FirstRecord();_newline_newline      while (vFirstRecord )_newline      {_newline             if(   vProfileBC.GetFieldValue(&quot;Payment Type&quot;) == &quot;Postpaid&quot; &amp;&amp; vProfileBC.GetFieldValue(&quot;Status&quot;) != &quot;Inactive&quot; )_newline             {_newline                    vPaymentType  = &quot;Postpaid&quot;;   _newline                     break;_newline             }_newline_newline                vFirstRecord = vProfileBC.NextRecord();_newline      }_newline_newline_newline     Outputs.SetProperty(&quot;Payment Type&quot;      , vPaymentType );_newline  _newline   }_newline  catch(e)_newline  {_newline       Outputs.SetProperty(&quot;Error Code&quot;    , e.errCode);_newline       Outputs.SetProperty(&quot;Error Message&quot; , e.toString());_newline  }_newline}"
 Program_spcLanguage="JS"
 Name="mCheckPostPaidProfile"
 Sequence="49"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments="[Mayank For Getting Info from MSISDN/Account]"
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function mGetBillProfileId(vAccount_usNumber , inMSISDN  , Outputs )_newline{_newline   try_newline   {_newline       var vAccountBO  = TheApplication().GetBusObject(&quot;Account&quot;);_newline       var vAccountBC  = vAccountBO.GetBusComp(&quot;Account&quot;);_newline       var vBAssetBC = vAccountBO.GetBusComp(&quot;Asset Mgmt - Asset&quot;);_newline       var BillingProfileID = &quot;&quot;;_newline       var IsBlackBerry  = &quot;&quot;;_newline       var vSearchExpr   = &quot;&quot;;_newline       _newline       Outputs.SetProperty(&quot;Error Code&quot;    , 0);_newline       Outputs.SetProperty(&quot;Error Message&quot; , &quot;&quot;);       _newline_newline       _newline       vAccountBC.ActivateField(&quot;CSN&quot;);_newline       vAccountBC.ActivateField(&quot;Id&quot;);_newline       _newline       vAccountBC.ClearToQuery();_newline       _newline       vAccountBC.SetViewMode(AllView);_newline       _newline       _newline       vAccountBC.SetSearchSpec(&quot;CSN&quot;  ,vAccount_usNumber );_newline       vAccountBC.ExecuteQuery(ForwardOnly);_newline       _newline       if ( vAccountBC.FirstRecord() )_newline       {_newline           vBAssetBC.ActivateField(&quot;Service Account Id&quot;);_newline           vBAssetBC.ActivateField(&quot;Status&quot;);_newline           vBAssetBC.ActivateField(&quot;Prod Type&quot;);_newline           vBAssetBC.ActivateField(&quot;Id&quot;);_newline           vBAssetBC.ActivateField(&quot;Integration Id&quot;);_newline           vBAssetBC.ActivateField(&quot;Service Type&quot;);_newline           vBAssetBC.ActivateField(&quot;Serial Number&quot;);_newline           vBAssetBC.ActivateField(&quot;Billing Account Id&quot;);_newline           vBAssetBC.ClearToQuery();_newline           _newline           vBAssetBC.SetSearchSpec(&quot;Billing Account Id&quot;  , vAccountBC.GetFieldValue(&quot;Id&quot;) );_newline           vBAssetBC.SetSearchSpec(&quot;Status&quot;              , &quot;Active&quot;);_newline           vBAssetBC.SetSearchSpec(&quot;Service Type&quot;   , &quot;Service Bundle&quot;);_newline           _newline           vBAssetBC.ExecuteQuery(ForwardOnly);_newline           _newline           if (vBAssetBC.FirstRecord() )_newline           {_newline              BillingProfileID = vBAssetBC.GetFieldValue(&quot;Billing Profile Id&quot;);_newline              IsBlackBerry     = mCheckBlackBerryService(vBAssetBC.GetFieldValue(&quot;Id&quot;) , Outputs );_newline              _newline              Outputs.SetProperty(&quot;IsBlackBerry&quot;          ,IsBlackBerry );   _newline              Outputs.SetProperty(&quot;Integration Id&quot;        ,vBAssetBC.GetFieldValue(&quot;Integration Id&quot;) ); _newline              Outputs.SetProperty(&quot;Account Id&quot;            ,vBAssetBC.GetFieldValue(&quot;Owner Account Id&quot;) ); _newline              Outputs.SetProperty(&quot;Contact Id&quot;            ,vBAssetBC.GetFieldValue(&quot;Owner Contact Id&quot;) ); _newline              Outputs.SetProperty(&quot;Billing Profile Id&quot;    ,BillingProfileID );                    _newline _newline           } _newline           _newline           _newline          _newline       }_newline       _newline       _newline        return BillingProfileID;_newline       _newline     _newline        _newline       _newline        _newline        _newline       _newline   }_newline   catch(e)_newline   {_newline      Outputs.SetProperty(&quot;Error Code&quot;    , e.errCode);_newline      Outputs.SetProperty(&quot;Error Message&quot; , e.toString());       _newline   }_newline}"
 Program_spcLanguage="JS"
 Name="mGetBillProfileId"
 Sequence="50"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments="[Mayank][For getting Customer Segment/Type]"
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function mGetCustInfo (Inputs , Outputs)_newline{_newline   try_newline   { _newline_newline      _newline      var vAccountBO                 = TheApplication().GetBusObject(&quot;Account&quot;);_newline      var vAccountBC                 = vAccountBO.GetBusComp(&quot;Account&quot;);_newline      _newline      Outputs.SetProperty(&quot;Account Id&quot;      , &quot;&quot;);_newline      Outputs.SetProperty(&quot;Account Type&quot; , &quot;&quot; );_newline      _newline      vAccountBC.ActivateField(&quot;Id&quot; );_newline      vAccountBC.ActivateField(&quot;CSN&quot; );_newline      vAccountBC.ActivateField(&quot;Type&quot; );_newline      //vAccountBC.ActivateField(&quot;CSN&quot; );_newline    _newline      _newline      _newline      vAccountBC.ClearToQuery();_newline      vAccountBC.SetViewMode(AllView);_newline      _newline      vAccountBC.SetSearchSpec(&quot;CSN&quot; , Inputs.GetProperty(&quot;Account Number&quot;)  );_newline      _newline      _newline      vAccountBC.ExecuteQuery(ForwardOnly);_newline      _newline      if ( vAccountBC.FirstRecord() )_newline      {_newline        _newline           Outputs.SetProperty(&quot;Account Id&quot;      ,vAccountBC.GetFieldValue(&quot;Id&quot;) );_newline           Outputs.SetProperty(&quot;Account Type&quot; ,vAccountBC.GetFieldValue(&quot;Type&quot;) );_newline           _newline          mCheckPostPaidProfile (vAccountBC.GetFieldValue(&quot;Id&quot;) ,Outputs );_newline         _newline      }_newline      _newline           _newline   }_newline   catch(e)_newline   {_newline     vErrorMessage = e.toString();_newline     vErrorCode    = e.errCode;_newline   }_newline   finally_newline   {_newline     vAccountBO   = null;_newline     vAccountBC   = null;_newline     _newline   }_newline}"
 Program_spcLanguage="JS"
 Name="mGetCustInfo"
 Sequence="51"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments="[Mayank][For gettingAccount info from root]"
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function mGetRootInfo ( inRootId, Outputs,Inputs)_newline{_newline   try_newline   {_newline          var vBAssetBO   = TheApplication().GetBusObject(&quot;Asset Management - Complex&quot;);_newline          var vBAssetBC   = vBAssetBO.GetBusComp(&quot;Asset Mgmt - Asset - Header&quot;);_newline          var vSearchExpr = &quot;&quot;;_newline_newline          vBAssetBC.ActivateField(&quot;Status&quot;);_newline          vBAssetBC.ActivateField(&quot;Id&quot;);_newline          vBAssetBC.ActivateField(&quot;Owner Account Id&quot;);_newline          vBAssetBC.ActivateField(&quot;Owner Contact Id&quot;);_newline          vBAssetBC.ActivateField(&quot;Billing Profile Id&quot;);_newline          vBAssetBC.ActivateField(&quot;VFQA Product Type&quot;);_newline          vBAssetBC.ActivateField(&quot;Billing Account Id&quot;);  _newline          vBAssetBC.ActivateField(&quot;Integration Id&quot;);  _newline          vBAssetBC.ActivateField(&quot;VFQA Payment Type&quot;);_newline          vBAssetBC.ActivateField(&quot;Root Asset Id&quot;);_newline          vBAssetBC.ClearToQuery();_newline          vBAssetBC.SetViewMode(AllView);     _newline          vSearchExpr = &quot;[Id] = &apos;&quot;+inRootId+&quot;&apos;  &quot;;           _newline          vBAssetBC.SetSearchExpr(vSearchExpr);_newline          vBAssetBC.ExecuteQuery(ForwardOnly);_newline          _newline          if (vBAssetBC.FirstRecord() )_newline          {_newline          Inputs.SetProperty(&quot;Integration Id&quot;     , vBAssetBC.GetFieldValue(&quot;Integration Id&quot;) );_newline          Inputs.SetProperty(&quot;Account Id&quot;         , vBAssetBC.GetFieldValue(&quot;Owner Account Id&quot;) );_newline          Inputs.SetProperty(&quot;Contact Id&quot;         , vBAssetBC.GetFieldValue(&quot;Owner Contact Id&quot;) );_newline          Inputs.SetProperty(&quot;Billing Profile Id&quot;  , vBAssetBC.GetFieldValue(&quot;Billing Profile Id&quot;) );_newline                         Inputs.SetProperty(&quot;Asset Integration Id&quot;, vBAssetBC.GetFieldValue(&quot;Integration Id&quot;) );_newline          _newline          }                                          _newline   }_newline   catch(e)_newline   {_newline      Outputs.SetProperty(&quot;Error Code&quot;    , e.errCode);_newline      Outputs.SetProperty(&quot;Error Message&quot; , e.toString());   _newline   }_newline}"
 Program_spcLanguage="JS"
 Name="mGetRootInfo"
 Sequence="52"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments="[Mayank][For Processing ALU&apos;s EDR of CREDLIT LIMIT BREACHED]"
 Parent_spcId="1-5RGN7C"
 Parent_spcName="TM BS Product Utility App"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function mProcess_usALU_usCL_usEDR (Inputs , Outputs)_newline{_newline     try_newline   {_newline     var IsBlackBerry = &quot;FALSE&quot;;_newline     var vHigh         =  &quot;[High] = &apos;Non BlackBerry&apos; &quot;;_newline    var vBillProf     = &quot;&quot;;_newline     var strProdName   = &quot;&quot;;_newline     var strActionCode = &quot;&quot;;_newline     var vCount = 0;_newline     var vSearchExpr   = &quot;&quot;;_newline     var strParProdName = &quot;&quot;;_newline     var vFirstRec      = &quot;&quot;;_newline      var vFiestRecord  = &quot;&quot;;_newline      var vTotalAsset    =  0 ;_newline_newline  Outputs.SetProperty(&quot;Error Code&quot;    , &quot;0&quot;);_newline  Outputs.SetProperty(&quot;Error Message&quot; , &quot;&quot;);      _newline  _newline_newline  var vMSISDN   = &quot;&quot;;_newline  var vAction   = Inputs.GetProperty(&quot;Action Code&quot;);_newline   var vLimit   = Inputs.GetProperty(&quot;Limit&quot;);_newline  var vAccount_usNumber  = Inputs.GetProperty(&quot;Account Number&quot;);_newline  var strEDRChildId =  Inputs.GetProperty(&quot;EDRChildId&quot;);_newline _newline_newline   if ( ToNumber(vLimit) &lt; 99  &amp;&amp;  vAction  == &quot;Add&quot;  )_newline   {_newline       Outputs.SetProperty(&quot;Error Code&quot;    , &quot;SBL_us9090&quot;);_newline       Outputs.SetProperty(&quot;Error Message&quot; , &quot;Value of Credit Limit Threshold (Attrib 21) has to be greated than 99 &quot;);          _newline       return(CancelOperation);_newline   }_newline                  else_newline   if ( vAction != &quot;Add&quot; &amp;&amp; vAction != &quot;Delete&quot;  )_newline   {_newline       Outputs.SetProperty(&quot;Error Code&quot;    , &quot;SBL_us9091&quot;);_newline       Outputs.SetProperty(&quot;Error Message&quot; , &quot;Please Enter a valid Value For Action Code : Add/Delete&quot;);          _newline       return(CancelOperation);_newline   }_newline                  else_newline   if ( vAccount_usNumber  == &quot;&quot;  )_newline   {_newline       Outputs.SetProperty(&quot;Error Code&quot;    , &quot;SBL_us9092&quot;);_newline       Outputs.SetProperty(&quot;Error Message&quot; , &quot;Account Number Can not be null &quot;);          _newline       return(CancelOperation);_newline   }_newline_newline_newline_newline_newline  _newline      //mGetBillProfileId(vAccount_usNumber , inMSISDN  , Outputs ) ;_newline       var vAccountBO  = TheApplication().GetBusObject(&quot;Phasing Account&quot;);_newline       var vAccountBC  = vAccountBO.GetBusComp(&quot;Phasing Account&quot;);_newline       _newline       //var vAccountBO  = TheApplication().GetBusObject(&quot;Account&quot;);_newline       //var vAccountBC  = vAccountBO.GetBusComp(&quot;Account&quot;);_newline       //var vBAssetBC   = vAccountBO.GetBusComp(&quot;Asset Mgmt - Asset&quot;);_newline_newline_newline       vAccountBC.ActivateField(&quot;CSN&quot;);_newline       vAccountBC.ActivateField(&quot;Id&quot;);_newline       _newline       vAccountBC.ClearToQuery();_newline       _newline       vAccountBC.SetViewMode(AllView);_newline       _newline       vAccountBC.SetSearchSpec(&quot;CSN&quot; , vAccount_usNumber );_newline       vAccountBC.ExecuteQuery(ForwardOnly);_newline       _newline       if ( vAccountBC.FirstRecord() )_newline       {_newline       _newline       var vBAssetBO   = TheApplication().GetBusObject(&quot;Asset Management - Complex&quot;);_newline       var vBAssetBC   = vBAssetBO.GetBusComp(&quot;Asset Mgmt - Asset - Header&quot;);_newline_newline_newline          vBAssetBC.ActivateField(&quot;Status&quot;);_newline          vBAssetBC.ActivateField(&quot;Id&quot;);_newline          vBAssetBC.ActivateField(&quot;Owner Account Id&quot;);_newline          vBAssetBC.ActivateField(&quot;Owner Contact Id&quot;);_newline           vBAssetBC.ActivateField(&quot;Billing Profile Id&quot;);_newline          vBAssetBC.ActivateField(&quot;VFQA Product Type&quot;);_newline          vBAssetBC.ActivateField(&quot;Billing Account Id&quot;);  _newline          vBAssetBC.ActivateField(&quot;Integration Id&quot;);  _newline          vBAssetBC.ActivateField(&quot;VFQA Payment Type&quot;);_newline          vBAssetBC.ActivateField(&quot;Root Asset Id&quot;);_newline          vBAssetBC.ClearToQuery();_newline          vBAssetBC.SetViewMode(AllView);     _newline          vSearchExpr = &quot;[Billing Account Id] = &apos;&quot;+vAccountBC.GetFieldValue(&quot;Id&quot;)+&quot;&apos;  AND [Status] = &apos;Active&apos; AND [VFQA Product Type] = &apos;Service Plan&apos;  &quot;;           _newline          vBAssetBC.SetSearchExpr(vSearchExpr);_newline          vBAssetBC.ExecuteQuery(ForwardOnly);_newline          Outputs.SetProperty(&quot;Asset count &quot;, vBAssetBC.CountRecords());_newline          vFirstRec = vBAssetBC.FirstRecord();_newline           Outputs.SetProperty(&quot;vSearchExpr &quot;    , vSearchExpr ); _newline           Outputs.SetProperty(&quot;vFirstRec &quot;    , vFirstRec); _newline          vTotalAsset     =  vBAssetBC.CountRecords();_newline_newlineif (vFirstRec )_newline    {    _newline         Outputs.SetProperty(&quot;location 1&quot;    , &quot;inside if&quot;); _newline          while( vFirstRec )_newline          {_newline                  Outputs.SetProperty(&quot;location&quot;    , &quot;inside while&quot;+vCount); _newline  Outputs.SetProperty(&quot;Error Code&quot;    , &quot;0&quot;);_newline  Outputs.SetProperty(&quot;Error Message&quot; , &quot;&quot;);  _newline     _newline                 if (  vBAssetBC.GetFieldValue(&quot;VFQA Payment Type&quot;) == &quot;Postpaid&quot;  )_newline                 {_newline_newline                        TheApplication().SetProfileAttr(&quot;CurrentOrderId&quot;, &quot;&quot;);  _newline                        Outputs.SetProperty(&quot;BEFORE CALLING&quot; , &quot;mCheckBlackBerryService&quot;); _newline          mCheckBlackBerryService(vBAssetBC.GetFieldValue(&quot;Root Asset Id&quot;) , Outputs );_newline             _newline          if (Outputs.GetProperty(&quot;BB Service&quot;) == &quot;TRUE&quot;  &amp;&amp; Outputs.GetProperty(&quot;Non Camel&quot;) == &quot;TRUE&quot; )_newline          {_newline                vHigh =&quot;( [High] = &apos;BlackBerry&apos; OR [High] = &apos;Non BlackBerry&apos; )&quot;;_newline                               //TheApplication().RaiseErrorText(&quot;13&quot;);_newline          }_newline                        else_newline                       if(Outputs.GetProperty(&quot;Non Camel&quot;) == &quot;TRUE&quot;  )_newline          {_newline                vHigh = &quot;[High] = &apos;Non BlackBerry&apos; &quot;;_newline                               //TheApplication().RaiseErrorText(&quot;11&quot;);_newline          }_newline                        else_newline                       if(Outputs.GetProperty(&quot;BB Service&quot;) == &quot;TRUE&quot;  )_newline          {_newline                  vHigh = &quot;[High] = &apos;BlackBerry&apos; &quot;;_newline                                //TheApplication().RaiseErrorText(&quot;12&quot;);_newline          }_newline                        else_newline                       if(Outputs.GetProperty(&quot;BB Service&quot;) == &quot;&quot;  &amp;&amp;  Outputs.GetProperty(&quot;Non Camel&quot;) == &quot;&quot;  )_newline          {_newline                    Outputs.SetProperty(&quot;Error Code&quot;    , &quot;SBL_us9097&quot;);_newline                                   //TheApplication().RaiseErrorText(&quot;14&quot;);_newline                    Outputs.SetProperty(&quot;Error Message&quot; , &quot;No Asset Found with BlackBerry/Non Camel Service For Account Number :&quot;+vAccount_usNumber);                              // return(CancelOperation);             _newline          }_newline          TheApplication().SetProfileAttr(&quot;CurrentOrderId&quot;, &quot;&quot;);_newline_newline                       if ( Outputs.GetProperty(&quot;Error Message&quot;) != &quot;&quot; )_newline                       {_newline                             vFirstRec = vBAssetBC.NextRecord();_newline                             Outputs.SetProperty(&quot;vCount &quot;    , vCount);_newline                             Outputs.SetProperty(&quot;testing&quot;    , &quot;mayank&quot;);_newline                             vCount++;_newline                             continue;                                    _newline                       }_newline_newline         Inputs.SetProperty(&quot;Ext Ref Id&quot;         , &quot;&quot;);_newline                         mGetRootInfo ( vBAssetBC.GetFieldValue(&quot;Root Asset Id&quot;) , Outputs,Inputs);_newline        //  Inputs.SetProperty(&quot;Integration Id&quot;     , vBAssetBC.GetFieldValue(&quot;Integration Id&quot;) );_newline          //Inputs.SetProperty(&quot;Account Id&quot;         , vBAssetBC.GetFieldValue(&quot;Owner Account Id&quot;) );_newline         // Inputs.SetProperty(&quot;Contact Id&quot;         , vBAssetBC.GetFieldValue(&quot;Owner Contact Id&quot;) );_newline         // Inputs.SetProperty(&quot;Billing Profile Id&quot;  , vBAssetBC.GetFieldValue(&quot;Billing Profile Id&quot;) );_newline                         //Inputs.SetProperty(&quot;Submit&quot;  , &quot;N&quot; );_newline               _newline          func_usCancelFDO(Inputs, Outputs);_newline            _newline_newline                        vSearchExpr   = &quot;&quot;; _newline         var  vLOVBO = TheApplication().GetBusObject(&quot;List Of Values&quot;);_newline          var vLOVBC = vLOVBO.GetBusComp(&quot;List Of Values&quot;);_newline          vLOVBC.ActivateField(&quot;Type&quot;);_newline          vLOVBC.ActivateField(&quot;Name&quot;);_newline          vLOVBC.ActivateField(&quot;Value&quot;);_newline                          vLOVBC.ActivateField(&quot;High&quot;);_newline          vLOVBC.ActivateField(&quot;Low&quot;);_newline          vLOVBC.ClearToQuery();_newline          vLOVBC.SetViewMode(AllView);_newline          vSearchExpr = &quot;[Type] = &apos;VFQA_usCREDIT_usLIMIT_usBREACH&apos; AND [Value] = &apos;&quot;+vAction+&quot;&apos; AND &quot;+vHigh; _newline          vLOVBC.SetSearchExpr(vSearchExpr);_newline          vLOVBC.ExecuteQuery(ForwardOnly);_newline          vFiestRecord = vLOVBC.FirstRecord(); _newline          Outputs.SetProperty(&quot;vSearchExpr lov&quot;    , vSearchExpr + vLOVBC.CountRecords() );_newline                         if ( vFiestRecord  )_newline                        {_newline                          strProdName     = &quot;&quot;;_newline                          strActionCode   = &quot;&quot;;_newline                          strParProdName = &quot;&quot;;_newline                          while(vFiestRecord  )_newline                         { _newline                 strProdName    = strProdName+vLOVBC.GetFieldValue(&quot;Name&quot;)+&quot;;&quot;;_newline                strActionCode  = strActionCode+vLOVBC.GetFieldValue(&quot;Value&quot;) + &quot;;&quot;;  _newline                strParProdName = strParProdName+vLOVBC.GetFieldValue(&quot;Low&quot;)+&quot;;&quot;;    _newline                vFiestRecord  = vLOVBC.NextRecord();_newline          }  _newline             _newline          }_newline          Outputs.SetProperty(&quot;Product Names &quot;    , strProdName);_newline          Outputs.SetProperty(&quot;Action Codes &quot;    , strActionCode);_newline          Outputs.SetProperty(&quot;Parent Product Names &quot;    , strParProdName);_newline   _newline          TheApplication().SetProfileAttr(&quot;CurrentOrderId&quot;, &quot;&quot;);              _newline          Inputs.SetProperty(&quot;Product Names&quot;, strProdName);_newline          Inputs.SetProperty(&quot;Action Codes&quot;, strActionCode);_newline          Inputs.SetProperty(&quot;Parent Product Names&quot;, strParProdName);_newline         // Inputs.SetProperty(&quot;Asset Integration Id&quot;, vBAssetBC.GetFieldValue(&quot;Integration Id&quot;) );_newline          func_usCreateModifyOrderGeneric(Inputs, Outputs);_newline          TheApplication().SetProfileAttr(&quot;CurrentOrderId&quot;, &quot;&quot;);              _newline          _newline                        _newline              }   _newline               vFirstRec = vBAssetBC.NextRecord();_newline               Outputs.SetProperty(&quot;vCount last &quot;    , vCount);_newline              vCount++;_newline          }// while ends_newline        }  _newline       else_newline     {_newline         Outputs.SetProperty(&quot;Error Code&quot;    , &quot;SBL_us9096&quot;);_newline         Outputs.SetProperty(&quot;Error Message&quot; , &quot;No Asset Found with BlackBerry/Non Camel Service For Account Number :&quot;+vAccount_usNumber);          _newline         return(CancelOperation);_newline      }     _newline       }_newline       else_newline       {_newline        Outputs.SetProperty(&quot;Error Code&quot;    , &quot;SBL_us0905&quot;);_newline        Outputs.SetProperty(&quot;Error Message&quot; , &quot;Given Account :&quot;+vAccount_usNumber+&quot; does not exist&quot;);      _newline           return(CancelOperation);_newline       } _newline      _newline      _newline}_newlinecatch(e)_newline{_newline      Outputs.SetProperty(&quot;Error Code&quot;    , e.errCode);_newline      Outputs.SetProperty(&quot;Error Message&quot; , e.toString());_newline}_newline_newline}"
 Program_spcLanguage="JS"
 Name="mProcess_usALU_usCL_usEDR"
 Sequence="53"
></Business_spcService_spcScript
></Business_spcService
>