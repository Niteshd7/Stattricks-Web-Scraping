<?xml version="1.0" encoding="UTF-8"?><?Siebel-Property-Set EscapeNames="true"?><Business_spcService
 Comments="This BS is used to process the MNP related scenarios"
 State_spcManagement_spcType="Stateful"
 Cache="N"
 Server_spcEnabled="N"
 Display_spcName="TM BS MNP Util"
 Inactive="N"
 Hidden="N"
 Class="CSSService"
 Name="TM BS MNP Util"
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-59RBF1"
 Parent_spcName="TM BS MNP Util"
 Parent_spcInactive="N"
 Inactive="N"
 Script="/*-------+------+--------+---------------------------------------------- _newlineYYYYMMDD | Ver  | By     | Description of Change _newline---------+------+--------+---------------------------------------------- _newline20131112 | 1.00 | PPB    | First version _newline20131217 | 1.01 | PPB    | Functions for PortOut processing incorporated _newline---------+------+--------+--------------------------------------------*/ _newlinefunction Service_usPreInvokeMethod(MethodName, Inputs, Outputs) _newline{ _newline if(&quot;Process_usMNP&quot; == MethodName)//this is used for portin processing _newline  return func_usProcess_usMNP(Inputs, Outputs); _newline else if(&quot;FollowOnOrder&quot; == MethodName) _newline  return func_usCreateFollowOnOrder(Inputs, Outputs); _newline else if(&quot;ProcessNumberPortOut&quot; == MethodName) _newline  return func_usProcessNumberPortOut(Inputs, Outputs); _newline else if(&quot;FetchAttachment&quot;==MethodName) _newline  return func_usFetchAttachment(Inputs, Outputs); _newline else if(&quot;CheckPortOut&quot;==MethodName) _newline  return func_usCheckPortOut(Inputs, Outputs); _newline else if(&quot;CreateOrUpdateTicket&quot;==MethodName) _newline { _newline  Inputs.SetProperty(&quot;Broadcast&quot;,&quot;Y&quot;); _newline  return func_usCreateOrUpdateTicket(Inputs, Outputs); _newline } _newline else if(&quot;GetRTB&quot;==MethodName) _newline  return func_usGetRTB(Inputs, Outputs); _newline else if(&quot;QueryBalanceSummary&quot;==MethodName) _newline  return func_usQueryBalanceSummary(Inputs, Outputs); _newline else if(&quot;GetOrderAttachment&quot;==MethodName) _newline  return func_usGetOrderAttachment(Inputs, Outputs); _newline else if(&quot;ProcessPortOutManually&quot;==MethodName) _newline  return func_usProcessPortOutManually(Inputs, Outputs); _newline else if(&quot;CreateEDR_usBestMateCleanup&quot;==MethodName) _newline  return func_usCreateEDR_usBestMateCleanup(Inputs, Outputs); _newline else if(&quot;CreateReportingTicket&quot;==MethodName) _newline  return func_usCreateReportingTicket(Inputs, Outputs); _newline else if(&quot;ValidateNPOrder&quot;==MethodName) _newline  return func_usValidateNPOrder(Inputs, Outputs); _newlineelse if(&quot;ProcessPortOutDelayed&quot;==MethodName)_newline   return func_usProcessPortOutDelayed(Inputs, Outputs);_newline_newline else _newline  return (ContinueOperation); _newline}"
 Program_spcLanguage="JS"
 Name="Service_usPreInvokeMethod"
 Sequence="18"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-59RBF1"
 Parent_spcName="TM BS MNP Util"
 Parent_spcInactive="N"
 Inactive="N"
 Script="/*-------+------+--------+----------------------------------------------_newlineYYYYMMDD | Ver  | By     | Description of Change_newline---------+------+--------+----------------------------------------------_newline20140130 | 1.00 | PPB    | Enhanced to send out status details using an AIA Provided web service_newline---------+------+--------+--------------------------------------------*/_newlinefunction func_usCheckPortOut(Inputs, Outputs)_newline{_newline//Activity for debt check: starts with Activity UId = NP10_us*****_newline//RCR queries such activities in &apos;In Progress&apos; status and passes to this function_newline//here the activity context is used to query the bill profile and balance details_newline var strErrCode=&quot;OK&quot;;_newline var strErrMesg=&quot;&quot;;_newline var nHrs=ToInteger(TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VFQA_usPARAMS&quot;,&quot;PORTOUT_usDEBT_usCLEARANCE_usHRS&quot;));_newline var boAct,bcAct;_newline var boMain,bcAcc,bcAsset,bcCIP,bcBalVBC;_newline var strAccntId=&quot;&quot;,strAssetId=&quot;&quot;,strCIPId=&quot;&quot;;_newline var strActId=Inputs.GetProperty(&quot;ActivityId&quot;);//1-654JXH_newline var dtActCreated,dtNow=new Date();_newline var nPermittedDues=0.0,nBalance=0.0;_newline var strActStatus=&quot;&quot;, strActComment=&quot;&quot;,strActStatusPrev=&quot;&quot;,strTTId=&quot;&quot;;_newline boAct = TheApplication().GetBusObject(&quot;Action&quot;);_newline bcAct = boAct.GetBusComp(&quot;Action&quot;);_newline bcAct.ActivateField(&quot;Status&quot;);_newline bcAct.ActivateField(&quot;Comment&quot;);_newline bcAct.ActivateField(&quot;Activity SR Id&quot;);_newline bcAct.SetViewMode(AllView);_newline bcAct.ClearToQuery();_newline bcAct.SetSearchExpr(&quot;[Id]=&apos;&quot; + strActId + &quot;&apos;&quot;);_newline bcAct.ExecuteQuery(ForwardOnly);_newline if(!bcAct.FirstRecord())_newline {_newline  strErrCode=&quot;NO_usACTION_usRECORD&quot;;_newline  strErrMesg=&quot;Action record was not found.&quot;;_newline }_newline else_newline {_newline//these are stored from SR parent record as OOB feature_newline  dtActCreated = new Date(bcAct.GetFieldValue(&quot;Created&quot;));_newline  Outputs.SetProperty(&quot;DateCreated&quot;,dtActCreated);_newline  Outputs.SetProperty(&quot;DateNow&quot;,dtNow);_newline  Outputs.SetProperty(&quot;DateDiff&quot;,dtNow - dtActCreated);_newline  strTTId    = bcAct.GetFieldValue(&quot;Activity SR Id&quot;);_newline  strAccntId = bcAct.GetFieldValue(&quot;Account Id&quot;);_newline  strAssetId = bcAct.GetFieldValue(&quot;Asset Id&quot;);_newline  strActStatusPrev=bcAct.GetFieldValue(&quot;Status&quot;);_newline//query account_newline  boMain = TheApplication().GetBusObject(&quot;Account&quot;);_newline  bcAcc = boMain.GetBusComp(&quot;Account&quot;);_newline  bcAcc.SetViewMode(AllView);_newline  bcAcc.ActivateField(&quot;Type&quot;);_newline  bcAcc.ClearToQuery();_newline  bcAcc.SetSearchExpr(&quot;[Id]=&apos;&quot; + strAccntId + &quot;&apos;&quot;);_newline  TheApplication().SetProfileAttr(&quot;Service Account Id&quot;,strAccntId);_newline  bcAcc.ExecuteQuery(ForwardOnly);_newline  if(bcAcc.FirstRecord())_newline  {_newline   if(&quot;Residential&quot;==bcAcc.GetFieldValue(&quot;Type&quot;))_newline    nPermittedDues=ToNumber(TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VFQA_usPARAMS&quot;,&quot;DUES_usPORT_usOUT_usRESI&quot;));_newline   else_newline    nPermittedDues=ToNumber(TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VFQA_usPARAMS&quot;,&quot;DUES_usPORT_usOUT_usBUSI&quot;));_newline//query asset to get CIP Id_newline   bcAsset= boMain.GetBusComp(&quot;Asset Mgmt - Asset&quot;);_newline   bcAsset.SetViewMode(AllView);_newline   bcAsset.ActivateField(&quot;Billing Profile Id&quot;);_newline   bcAsset.ClearToQuery();_newline   bcAsset.SetSearchExpr(&quot;[Id]=&apos;&quot; + strAssetId + &quot;&apos;&quot;);_newline   bcAsset.ExecuteQuery(ForwardOnly);_newline   if(bcAsset.FirstRecord())_newline   {_newline    strCIPId=bcAsset.GetFieldValue(&quot;Billing Profile Id&quot;);_newline_newline    bcCIP = boMain.GetBusComp(&quot;CMU Com Invoice Profile&quot;);_newline    bcCIP.SetViewMode(AllView);_newline    bcCIP.ClearToQuery();_newline    bcCIP.SetSearchExpr(&quot;[Id]=&apos;&quot; + strCIPId + &quot;&apos;&quot;);_newline    bcCIP.ExecuteQuery(ForwardOnly);_newline    if(bcCIP.FirstRecord())_newline    {_newline     try_newline     {_newline      bcBalVBC  = boMain.GetBusComp(&quot;CMU Balance Summary VBC&quot;);_newline      bcBalVBC.ActivateField(&quot;Due Now&quot;);_newline      bcBalVBC.ActivateField(&quot;Total&quot;);_newline      bcBalVBC.SetViewMode(AllView);_newline      bcBalVBC.ClearToQuery();_newline      bcBalVBC.ExecuteQuery(ForwardOnly);_newline      if(bcBalVBC.FirstRecord())_newline      {_newline       nBalance = ToNumber(bcBalVBC.GetFieldValue(&quot;Due Now&quot;));_newline       if(nPermittedDues &gt;= nBalance)_newline       {_newline        strActStatus=&quot;Success&quot;;_newline        strActComment=&quot;Customer has cleared all the issued bills.&quot;;_newline       }_newline       else_newline       {//mark as failed only if time limit has expired_newline        if(nHrs*3600.0*1000.0 &lt; dtNow - dtActCreated)//date diff is in milliseconds_newline        {_newline         strActStatus=&quot;Failed&quot;;_newline         strActComment=&quot;The customer has not settled the outstanding debt within prescribed time limit, [Allowed:&quot; +nPermittedDues + &quot;, Actual: &quot;+ nBalance+&quot;].&quot;;_newline        }_newline        else_newline        {_newline         strActStatus=&quot;In Progress&quot;;_newline         strActComment=&quot;The customer has not settled the outstanding debt and can do so in &quot; + nHrs + &quot; hours, [Allowed:&quot; +nPermittedDues + &quot;, Actual: &quot;+ nBalance+&quot;].&quot;;_newline        }_newline       }_newline      }_newline      else_newline      {_newline       strActStatus=&quot;In Progress&quot;;_newline       strActComment=&quot;Debt check failed due to system issues:NO_usBAL_usVBC_usREC&quot;;_newline      }_newline     }_newline     catch (e)_newline     {_newline      strActStatus=&quot;In Progress&quot;;_newline      strActComment=&quot;Debt check failed due to system issues:&quot;+e.errCode;_newline     }_newline     strErrCode=&quot;OK&quot;;_newline     strErrMesg=&quot;Status:&quot; + strActStatus + &quot;, &quot; + strActComment;_newline//set the values on Action BC record_newline     Outputs.SetProperty(&quot;ActStatus&quot;,strActStatus);_newline     Outputs.SetProperty(&quot;ActComment&quot;,strActComment);_newline     Outputs.SetProperty(&quot;nBalance&quot;,nBalance);_newline     Outputs.SetProperty(&quot;nPermittedDues&quot;,nPermittedDues);_newline     if(&quot;&quot;!=strActStatus)_newline     {_newline      bcAct.SetFieldValue(&quot;Status&quot;, strActStatus);_newline      bcAct.SetFieldValue(&quot;Comment&quot;,strActComment);_newline      bcAct.WriteRecord();_newline      if(strActStatusPrev!=strActStatus)_newline      {//has changed invoke a broadcast_newline       Inputs.SetProperty(&quot;Broadcast&quot;,&quot;Y&quot;);_newline       Inputs.SetProperty(&quot;TTId&quot;, strTTId);_newline       func_usCreateOrUpdateTicket(Inputs, Outputs);_newline      }_newline     }_newline    }_newline   }_newline  }_newline }_newline bcAct=null;_newline boAct=null;_newline bcAcc=null;_newline bcAsset=null;_newline bcCIP=null;_newline bcBalVBC=null;_newline boMain=null;_newline Outputs.SetProperty(&quot;Error Code&quot;,    strErrCode);_newline Outputs.SetProperty(&quot;Error Message&quot;, strErrMesg);_newline return CancelOperation;_newline}"
 Program_spcLanguage="JS"
 Name="func_usCheckPortOut"
 Sequence="1"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-59RBF1"
 Parent_spcName="TM BS MNP Util"
 Parent_spcInactive="N"
 Inactive="N"
 Script="/*-------+------+--------+----------------------------------------------_newlineYYYYMMDD | Ver  | By     | Description of Change_newline---------+------+--------+----------------------------------------------_newline20140213 | 1.00 | PPB    | Function to create an EDR record for portedout number - best mate cleanup_newline---------+------+--------+--------------------------------------------*/_newlinefunction func_usCreateEDR_usBestMateCleanup(Inputs, Outputs)_newline{_newline//take the number which is porting out and create _newline//must add index on S_usASSET_usXA.CHAR_usVAL_newline var strErrCode=&quot;&quot;,strErrMesg=&quot;&quot;;_newline var bsUtil,psOp,psIp;_newline var strNumber=Inputs.GetProperty(&quot;PhoneNumber&quot;);_newline psIp=TheApplication().NewPropertySet();_newline psIp.SetProperty(&quot;ProcessName&quot;,&quot;TMBatchRecordCreator&quot;);_newline psIp.SetProperty(&quot;BatchType&quot;,  &quot;AutomatedProcessing&quot;);_newline psIp.SetProperty(&quot;BatchId&quot;,    &quot;RemoveBestMateNP&quot;);_newline psIp.SetProperty(&quot;Attrib02&quot;,   &quot;RemoveBestMateNP&quot;);_newline psIp.SetProperty(&quot;RecordId&quot;,   strNumber);_newline psIp.SetProperty(&quot;Attrib01&quot;,   strNumber);_newline psOp=TheApplication().NewPropertySet();_newline bsUtil=TheApplication().GetService(&quot;Workflow Process Manager&quot;);_newline bsUtil.InvokeMethod(&quot;RunProcess&quot;,psIp,psOp);_newline strErrCode=psOp.GetProperty(&quot;Error Code&quot;);_newline strErrMesg=psOp.GetProperty(&quot;Error Message&quot;);_newline bsUtil = null;_newline psOp = null;_newline psIp = null;_newline Outputs.SetProperty(&quot;Error Code&quot;,strErrCode);_newline Outputs.SetProperty(&quot;Error Message&quot;,strErrMesg);_newline return CancelOperation;_newline}"
 Program_spcLanguage="JS"
 Name="func_usCreateEDR_usBestMateCleanup"
 Sequence="2"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-59RBF1"
 Parent_spcName="TM BS MNP Util"
 Parent_spcInactive="N"
 Inactive="N"
 Script="/*-------+------+--------+----------------------------------------------_newlineYYYYMMDD | Ver  | By     | Description of Change_newline---------+------+--------+----------------------------------------------_newline20131224 | 1.00 | PPB    | Function to create a Ticket, add activity template _newline20140128 | 1.10 | PPB    | Re-processing enabled_newline20140130 | 1.20 | PPB    | Enhanced to send out status details using an AIA Provided web service_newline20140207 | 1.30 | PPB    | Conditional accept disabled for business_newline20140210 | 1.40 | PPB    | Ticket closure on Donor Accept and Reject_newline---------+------+--------+--------------------------------------------*/_newlinefunction func_usCreateOrUpdateTicket(Inputs, Outputs)_newline{_newline var strQName = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VFQA_usPARAMS&quot;,&quot;NP_usQUEUE_usNAME&quot;);//old value MNP_usQUEUE_newline var actCode=&quot;&quot;,actStatus=&quot;&quot;,strMSISDN=&quot;&quot;,PortOutAcceptance = &quot;&quot;;_newline var boSR,bcSR,bcActTempl,bcActTemplAct, bcPick;_newline var strNameOfTemplate, strL1, strL2, strL3, workingMode=&quot;&quot;,isTTClosed=false;_newline var strPhoneNum = Inputs.GetProperty(&quot;PhoneNumber&quot;);//this may not be a valid asset_newline strL1 = Inputs.GetProperty(&quot;SR Type&quot;);_newline strL2 = Inputs.GetProperty(&quot;SR Area&quot;);_newline strL3 = Inputs.GetProperty(&quot;SR Sub-Area&quot;);_newline var strAccntType = Inputs.GetProperty(&quot;Account Type&quot;);_newline if(&quot;&quot;==strAccntType) _newline  strAccntType=&quot;Residential&quot;;//so as to create dummy ticket-activity_newline var strTTId    = Inputs.GetProperty(&quot;TTId&quot;);//can be invoked by reprocessor, blank for new requests_newline var strSRNum   = Inputs.GetProperty(&quot;TTNumber&quot;);//can be invoked by reprocessor, blank for new requests_newline var strAssetId = Inputs.GetProperty(&quot;Root Asset Id&quot;);_newline var strAccntId = Inputs.GetProperty(&quot;Account Id&quot;); _newline var strConId   = Inputs.GetProperty(&quot;Contact Id&quot;); _newline var strLang    = Inputs.GetProperty(&quot;Language&quot;);_newline var strPayType = Inputs.GetProperty(&quot;Payment Type&quot;);_newline if(&quot;&quot;==strLang)//default anyway_newline  strLang=&quot;English&quot;;_newline var strAddInfo = Inputs.GetProperty(&quot;Additional Info&quot;);_newline var bBroadcast = Inputs.GetProperty(&quot;Broadcast&quot;);//this will be Y or N to send out details over a webservice_newline// bBroadcast=&quot;Y&quot;;//test only_newline var psStatusDtl;_newline var bsUtil,psIp,psOp,p1,p2,p3,p4,p5;_newline var psStatusDtlCont = TheApplication().NewPropertySet();_newline_newline boSR = TheApplication().GetBusObject(&quot;Service Request&quot;);_newline bcSR = boSR.GetBusComp(&quot;Service Request&quot;);_newline bcSR.InvokeMethod(&quot;SetAdminMode&quot;, &quot;TRUE&quot;);_newline bcSR.SetViewMode(AllView);_newline bcSR.ActivateField(&quot;INS Product&quot;);_newline bcSR.ActivateField(&quot;INS Area&quot;);_newline bcSR.ActivateField(&quot;INS Sub-Area&quot;);_newline bcSR.ActivateField(&quot;Ticket Type&quot;);_newline bcSR.ActivateField(&quot;Account Id&quot;);_newline bcSR.ActivateField(&quot;Contact Id&quot;);_newline bcSR.ActivateField(&quot;Asset Id&quot;);_newline bcSR.ActivateField(&quot;Status&quot;);_newline bcSR.ActivateField(&quot;Sub-Status&quot;);_newline bcSR.ActivateField(&quot;Priority&quot;);_newline bcSR.ActivateField(&quot;Serial Number&quot;);_newline bcSR.ActivateField(&quot;Resolution Code&quot;);_newline bcSR.ActivateField(&quot;SR Number&quot;);_newline bcSR.ActivateField(&quot;VFQA Language&quot;);_newline bcSR.ActivateField(&quot;CEM Due Date&quot;);_newline bcSR.ActivateField(&quot;TT Source&quot;);_newline bcSR.ActivateField(&quot;Agent Comments&quot;);//to set the balance if any_newline bcSR.ActivateField(&quot;Payment Type&quot;);//new custom field on OOB column_newline//Check existing non-closed ticket of same type for same asset._newline bcSR.SetViewMode(AllView);_newline bcSR.ClearToQuery();_newline if(&quot;&quot;!=strTTId)_newline {_newline  workingMode=&quot;existing&quot;;_newline  bcSR.SetSearchExpr(&quot;[Id]=&apos;&quot; + strTTId + &quot;&apos;&quot;);_newline }_newline else if(&quot;&quot;!=strSRNum)_newline {_newline  workingMode=&quot;existing&quot;;_newline  bcSR.SetSearchExpr(&quot;[SR Number]=&apos;&quot; + strSRNum + &quot;&apos;&quot;);_newline }_newline else if(&quot;&quot;!=strAccntId &amp;&amp; &quot;&quot; !=strAssetId)_newline {_newline  workingMode=&quot;new&quot;;_newline  //bcSR.SetSearchExpr(&quot;[Account Id]=&apos;&quot; + strAccntId + &quot;&apos; AND [Asset Id]=&apos;&quot; + strAssetId + &quot;&apos; AND ([Status]=&apos;Not Solved&apos;)&quot;);_newline  bcSR.SetSearchExpr(&quot;[Account Id]=&apos;&quot; + strAccntId + &quot;&apos; AND [Asset Id]=&apos;&quot; + strAssetId + &quot;&apos;  AND [INS Product]=&apos;&quot; + strL1 + &quot;&apos;  AND [INS Area]=&apos;&quot; + strL2 + &quot;&apos;  AND [INS Sub-Area]=&apos;&quot; + strL3 + &quot;&apos; AND ([Status]=&apos;Not Solved&apos;)&quot;);//Nandeesh: Added to pass Type, Area &amp; SubArea values_newline }_newline else_newline {_newline  workingMode=&quot;new&quot;;_newline  bcSR.SetSearchExpr(&quot;[Id]=&apos;NON_usEXISTING&apos;&quot;);//for non-existing number as input to PortOut_newline }_newline bcSR.ExecuteQuery(ForwardOnly);_newline if(!bcSR.FirstRecord())_newline {_newline  bcSR.NewRecord(NewAfter);_newline  bcSR.SetFieldValue(&quot;Ticket Type&quot;, &quot;Trouble Ticket&quot;);_newline  bcSR.SetFieldValue(&quot;INS Product&quot;, strL1);_newline  bcSR.SetFieldValue(&quot;INS Area&quot;,    strL2);_newline  bcSR.SetFieldValue(&quot;INS Sub-Area&quot;,strL3);_newline  bcSR.SetFieldValue(&quot;Asset Id&quot;,   strAssetId);_newline  bcSR.SetFieldValue(&quot;Account Id&quot;, strAccntId);_newline  bcSR.SetFieldValue(&quot;Contact Id&quot;, strConId);_newline  bcSR.SetFieldValue(&quot;VFQA Language&quot;, strLang);_newline  bcSR.SetFieldValue(&quot;Agent Comments&quot;, strAddInfo);_newline  bcSR.SetFieldValue(&quot;TT Source&quot;,    &quot;System&quot;);_newline  bcSR.SetFieldValue(&quot;Payment Type&quot;, strPayType);_newline_newline  bcSR.WriteRecord();_newline//invoke attachment fetcher, and set a record with 98_newline  if(workingMode==&quot;new&quot;)_newline  {_newline   strTTId  = bcSR.GetFieldValue(&quot;Id&quot;);_newline   Inputs.SetProperty(&quot;TTId&quot;,strTTId);_newline   func_usFetchAttachment(Inputs, Outputs);//PhoneNumber gets passed since it comes in already_newline   if(&quot;OK&quot;==Outputs.GetProperty(&quot;Error Code&quot;))_newline    func_usCreatePS(Inputs,&quot;98&quot;,&quot;Success&quot;,&quot;Retrieval of attachment file(s) was successful.&quot;);_newline   else_newline    func_usCreatePS(Inputs,&quot;98&quot;,&quot;Failed&quot;,&quot;Retrieval of attachment failed.&quot;);_newline  }_newline }_newline if(&quot;Solved&quot; == bcSR.GetFieldValue(&quot;Status&quot;)) _newline  isTTClosed=true;_newline strSRNum  = bcSR.GetFieldValue(&quot;SR Number&quot;);_newline strMSISDN = bcSR.GetFieldValue(&quot;Serial Number&quot;);_newline strTTId   = bcSR.GetFieldValue(&quot;Id&quot;);_newline strNameOfTemplate = strL1 + strL2 + strL3 + &quot;_us&quot; + strAccntType;_newline//activity template name will be of the form L1L2L3AccountType [RequestMNPPort Verification_usResidential, RequestMNPPort Verification_usBusiness]_newline bcActTempl = boSR.GetBusComp(&quot;Activity Plan&quot;);_newline bcActTempl.SetViewMode(AllView);_newline bcActTempl.ClearToQuery();_newline if(&quot;new&quot;==workingMode) _newline  bcActTempl.SetSearchExpr(&quot;[Template]=&apos;&quot; + strNameOfTemplate + &quot;&apos;&quot;);_newline bcActTempl.ExecuteQuery(ForwardOnly);_newline var isActTemplRec = bcActTempl.FirstRecord();_newline if(!isActTemplRec)//if the activities are not setup only then do this_newline {_newline  bcActTempl.NewRecord(NewAfter);_newline  bcPick = bcActTempl.GetPicklistBusComp(&quot;Template&quot;);_newline  bcPick.ClearToQuery();_newline  bcPick.SetSearchExpr(&quot;[Name]=&apos;&quot; + strNameOfTemplate + &quot;&apos;&quot;);_newline  bcPick.ExecuteQuery(ForwardOnly);_newline  if(bcPick.FirstRecord())_newline  {_newline   bcPick.Pick();_newline   bcActTempl.WriteRecord();_newline   isActTemplRec = true;_newline  }_newline  else_newline  {_newline   Outputs.SetProperty(&quot;Error Code&quot;,    &quot;NO_usACT_usTEMPL&quot;);_newline   Outputs.SetProperty(&quot;Error Message&quot;, &quot;Activity template is not defined.&quot;);_newline   bcActTempl.UndoRecord();_newline  }_newline }_newline if(isActTemplRec)_newline {_newline//now query child activities and update their status based on child propertysets of inputs_newline  bcActTemplAct = boSR.GetBusComp(&quot;Activity Plan Action&quot;);_newline  bcActTemplAct.SetSortSpec(&quot;Description&quot;);_newline  bcActTemplAct.ActivateField(&quot;Description&quot;);_newline  bcActTemplAct.ActivateField(&quot;Comment&quot;);_newline  bcActTemplAct.ActivateField(&quot;Status&quot;);_newline  bcActTemplAct.ActivateField(&quot;Activity UID&quot;);_newline  bcActTemplAct.ClearToQuery();_newline  bcActTemplAct.ExecuteQuery(ForwardOnly);_newline  var isRec = bcActTemplAct.FirstRecord();_newline  while(isRec)_newline  {_newline   actCode = bcActTemplAct.GetFieldValue(&quot;Description&quot;);_newline   for(var i=0; i&lt;Inputs.GetChildCount(); i++)//this will have child only for first time ticket creation_newline   {//find matching propset by Description this will typically happen for new ticket only_newline    if(actCode == Inputs.GetChild(i).GetProperty(&quot;Code&quot;) &amp;&amp; &quot;StatusInfo&quot;==Inputs.GetChild(i).GetType())_newline    {_newline     Outputs.SetProperty(actCode,&quot;match_usfound&quot;);_newline     bcActTemplAct.SetFieldValue(&quot;Comment&quot;, Inputs.GetChild(i).GetProperty(&quot;Message&quot;));_newline     bcActTemplAct.SetFieldValue(&quot;Status&quot;,  Inputs.GetChild(i).GetProperty(&quot;Status&quot;));_newline     bcActTemplAct.SetFieldValue(&quot;Activity UID&quot;,&quot;NP&quot;+actCode+&quot;_us&quot;+strTTId);//this helps to search the record later_newline     bcActTemplAct.WriteRecord();_newline     break;_newline    }_newline   }_newline   isRec = bcActTemplAct.NextRecord();_newline  }_newline//query again to set the overall status of ticket, based on activity status_newline_newline  bcActTemplAct.ClearToQuery();_newline  bcActTemplAct.ExecuteQuery(ForwardOnly);_newline  isRec = bcActTemplAct.FirstRecord();_newline  PortOutAcceptance = &quot;Donor Accept&quot;;//to start with_newline  var TicketStatus      = &quot;Solved&quot;;_newline  var TicketSubStatus   = &quot;Complete&quot;;_newline  var strErrMesg        = &quot;&quot;;_newline  var strActStatus      = &quot;&quot;;_newline  var strActComment     = &quot;&quot;;_newline  while(isRec)_newline  {_newline   actCode = bcActTemplAct.GetFieldValue(&quot;Description&quot;);_newline   strActComment = bcActTemplAct.GetFieldValue(&quot;Comment&quot;);_newline   strActStatus = bcActTemplAct.GetFieldValue(&quot;Status&quot;);_newline   strErrMesg = strErrMesg + actCode + &quot;:&quot; + strActStatus + &quot;[&quot; + strActComment + &quot;];&quot;;_newline   if(&quot;98&quot; != actCode &amp;&amp; &quot;Failed&quot; == strActStatus)//skip 98 : attachment_newline   {//any one such failure leads to Donor Reject_newline    PortOutAcceptance = &quot;Donor Reject&quot;;//TicketStatus      = &quot;Cancelled&quot;;_newline   }_newline   if(&quot;Success&quot; != strActStatus &amp;&amp; &quot;Failed&quot;!=strActStatus)//this is debt check and 1 day is allowed to settle the bills_newline   {_newline    if(&quot;Donor Reject&quot;!=PortOutAcceptance)_newline    {_newline     if(&quot;Business&quot;==strAccntType)_newline      PortOutAcceptance = &quot;&quot;;_newline     else_newline      PortOutAcceptance = &quot;Conditional Accept&quot;;_newline    }_newline   }_newline//next 3 lines to prepare the propertset for status broadcast webservice_newline   if(&quot;Failed&quot;==strActStatus)_newline   {_newline    psStatusDtl = TheApplication().NewPropertySet(); psStatusDtl.SetType(&quot;DonerRejectData&quot;);_newline    psStatusDtl.SetProperty(&quot;Reason&quot;, strActComment); psStatusDtl.SetProperty(&quot;code&quot;, actCode);_newline    psStatusDtlCont.AddChild(psStatusDtl);_newline   }_newline   isRec = bcActTemplAct.NextRecord();_newline  }_newline  if(&quot;Donor Accept&quot; != PortOutAcceptance &amp;&amp; &quot;Donor Reject&quot; != PortOutAcceptance)_newline  {_newline   TicketStatus      = &quot;Not Solved&quot;;_newline   TicketSubStatus   = &quot;Unassigned&quot;;_newline  }_newline  if(&quot;new&quot;==workingMode)//!isTTClosed_newline  {_newline//assign to default q_newline   bcPick=bcSR.GetPicklistBusComp(&quot;Owner&quot;);_newline   bcPick.SetViewMode(AllView);_newline   bcPick.ClearToQuery();_newline   bcPick.SetSearchExpr(&quot;[Login Name]=&apos;&quot; + strQName + &quot;&apos;&quot;);_newline   bcPick.ExecuteQuery(ForwardOnly);_newline   if(bcPick.FirstRecord())_newline    bcPick.Pick();_newline  }_newline  bcSR.SetFieldValue(&quot;Resolution Code&quot;, PortOutAcceptance);_newline  bcSR.SetFieldValue(&quot;Sub-Status&quot;, TicketSubStatus);_newline  bcSR.SetFieldValue(&quot;Status&quot;, TicketStatus);_newline  bcSR.WriteRecord();_newline//broadcast_newline  try_newline  {_newline   p1=TheApplication().NewPropertySet();   p1.SetType(&quot;UpdatePortOutStatusSiebelReqABCSImplRequestMessage:payload&quot;); _newline   p1.SetProperty(&quot;MessageId&quot;,&quot;dummy&quot;);    p1.SetProperty(&quot;MessageType&quot;,&quot;Integration Object&quot;);_newline   p1.SetProperty(&quot;IntObjectName&quot;,&quot;OrderData&quot;);p1.SetProperty(&quot;IntObjectFormat&quot;,&quot;Siebel Hierarchical&quot;);_newline   p2=TheApplication().NewPropertySet();   p2.SetType(&quot;ListOfOrderData&quot;); _newline   p3=TheApplication().NewPropertySet();   p3.SetType(&quot;OrderData&quot;); _newline   p3.SetProperty(&quot;TTID&quot;,        strTTId);        _newline   p3.SetProperty(&quot;TT_usNumber&quot;,   strSRNum);        _newline   p3.SetProperty(&quot;AIAStatus&quot;,   PortOutAcceptance);_newline   if(&quot;&quot;==strMSISDN)_newline    p3.SetProperty(&quot;PhoneNumber&quot;, strPhoneNum);_newline   else_newline    p3.SetProperty(&quot;PhoneNumber&quot;, strMSISDN);_newline//   p3.SetProperty(&quot;CustomerName&quot;,&quot;&quot;);      p3.SetProperty(&quot;CustomerIDType&quot;,&quot;&quot;);     p3.SetProperty(&quot;ServiceType&quot;,&quot;&quot;);       _newline//   p3.SetProperty(&quot;MultipleMSISDN&quot;,&quot;&quot;);    p3.SetProperty(&quot;CustomerType&quot;,&quot;&quot;);       p3.SetProperty(&quot;QuotaFlag&quot;,&quot;&quot;);_newline//   p3.SetProperty(&quot;CustomerID&quot;,&quot;&quot;);        p3.SetProperty(&quot;MessageTypeID&quot;,&quot;&quot;);      p3.SetProperty(&quot;DonorSubscriptionType&quot;,&quot;&quot;);_newline   p4=TheApplication().NewPropertySet();   p4.SetType(&quot;ListOfDonorRejectList&quot;); _newline   p5=TheApplication().NewPropertySet();   p5.SetType(&quot;DonorRejectList&quot;); _newline   psStatusDtlCont.SetType(&quot;ListOfDonerRejectData&quot;);_newline   p5.AddChild(psStatusDtlCont);_newline   p4.AddChild(p5);_newline   p3.AddChild(p4);_newline   p2.AddChild(p3);_newline   p1.AddChild(p2);_newline   Outputs.AddChild(p1);_newline   if(&quot;Y&quot; == bBroadcast)_newline   {//prepare the request message and post to AIA_newline    psIp=TheApplication().NewPropertySet(); psIp.AddChild(p1);_newline    psOp=TheApplication().NewPropertySet();_newline    bsUtil=TheApplication().GetService(&quot;UpdatePortOutStatusSiebelReqABCSImpl&quot;);_newline    bsUtil.InvokeMethod(&quot;process&quot;,psIp,psOp);//this is fire and forget_newline    TheApplication().LogError(&quot;PORTOUT_usBROADCAST&quot;, &quot;Posted status successfully: &quot;+ PortOutAcceptance, strTTId, &quot;PortOut&quot;, &quot;Update&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;)_newline   }_newline  }_newline  catch(e)_newline  {_newline   Outputs.SetProperty(&quot;Error Code&quot;,    &quot;ERR_usSTATUS_usINFO_usPOSTING&quot;);_newline   Outputs.SetProperty(&quot;Error Message&quot;, &quot;ERR_usSTATUS_usINFO_usPOSTING&quot; + &quot;:&quot; + e.errCode + &quot;:&quot; + e.errText);_newline   TheApplication().LogError(&quot;PORTOUT_usBROADCAST&quot;, &quot;Status posting failed: &quot;+ PortOutAcceptance, strTTId, &quot;PortOut&quot;, &quot;Update&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;)_newline  }_newline }_newline//cleanup_newline Outputs.SetProperty(&quot;TTNumber&quot;, strSRNum);_newline Outputs.SetProperty(&quot;TTId&quot;,     strTTId);_newline Outputs.SetProperty(&quot;Error Code&quot;, PortOutAcceptance);_newline bcActTemplAct = null;_newline bcActTempl = null;_newline bcSR = null;_newline boSR = null;_newline bsUtil=null;_newline psIp=null;_newline psOp=null;_newline psStatusDtl=null;_newline psStatusDtlCont=null;_newline p1=null;_newline p2=null;_newline p3=null;_newline p4=null;_newline p5=null;_newline return CancelOperation;_newline}"
 Program_spcLanguage="JS"
 Name="func_usCreateOrUpdateTicket"
 Sequence="4"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-59RBF1"
 Parent_spcName="TM BS MNP Util"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function func_usCreateOrderNote(OrderId,NoteType,NoteText)_newline{_newline var boOrder,bcNote;_newline if(&quot;&quot;==NoteType)_newline  NoteType=&quot;System&quot;;_newline if(&quot;&quot;!=OrderId &amp;&amp; &quot;&quot;!=NoteText)_newline {_newline  boOrder=TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);_newline  bcNote=boOrder.GetBusComp(&quot;SHM Order Notes - Internal&quot;);_newline  bcNote.ActivateField(&quot;Note&quot;);_newline  bcNote.ActivateField(&quot;Note Type&quot;);_newline  bcNote.ActivateField(&quot;Source Id&quot;);_newline  bcNote.SetSearchExpr(&quot;[Source Id]=&apos;&quot; + OrderId + &quot;&apos;&quot;);_newline  bcNote.ExecuteQuery(ForwardOnly);//may or may not get a record_newline  bcNote.NewRecord(NewAfter);_newline  bcNote.SetFieldValue(&quot;Note Type&quot;,NoteType);_newline  bcNote.SetFieldValue(&quot;Note&quot;,NoteText);_newline  bcNote.SetFieldValue(&quot;Source Id&quot;,OrderId);_newline  bcNote.WriteRecord();_newline }_newline bcNote=null;_newline boOrder=null;_newline return CancelOperation;_newline}"
 Program_spcLanguage="JS"
 Name="func_usCreateOrderNote"
 Sequence="3"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-59RBF1"
 Parent_spcName="TM BS MNP Util"
 Parent_spcInactive="N"
 Inactive="N"
 Script="/*-------+------+--------+---------------------------------------------- _newlineYYYYMMDD | Ver  | By     | Description of Change _newline---------+------+--------+---------------------------------------------- _newline20131224 | 1.00 | PPB    | simple and standalone function to prepare a propertyset _newline---------+------+--------+--------------------------------------------*/ _newlinefunction func_usCreatePS(mps, errCode, errStatus, errMesg) _newline{//mps would be an existing propertyset and this function checks the child propset with same code value, if exists then updates, else adds _newline var ps _newline var childExists=false; _newline for(var i=0; i &lt; mps.GetChildCount(); i++) _newline { _newline  ps = mps.GetChild(i); _newline  if(&quot;StatusInfo&quot;==ps.GetType() &amp;&amp; errCode==ps.GetProperty(&quot;Code&quot;)) _newline  { _newline   childExists = true; _newline   break; _newline  } _newline } _newline//add or update child _newline if(!childExists) _newline { _newline  ps = TheApplication().NewPropertySet(); _newline  ps.SetType(&quot;StatusInfo&quot;); _newline  ps.SetProperty(&quot;Code&quot;,    errCode); _newline } _newline ps.SetProperty(&quot;Status&quot;,  errStatus); _newline ps.SetProperty(&quot;Message&quot;, errMesg); _newline if(!childExists) _newline  mps.AddChild(ps); _newline return; _newline}"
 Program_spcLanguage="JS"
 Name="func_usCreatePS"
 Sequence="5"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-59RBF1"
 Parent_spcName="TM BS MNP Util"
 Parent_spcInactive="N"
 Inactive="N"
 Script="/*-------+------+--------+----------------------------------------------_newlineYYYYMMDD | Ver  | By     | Description of Change_newline---------+------+--------+----------------------------------------------_newline20140217 | 1.00 | PPB    | Function to create a reporting ticket if anything fails (typ terminate order creation for portout)_newline20140227 | 1.1  | PPB    | Changed to correct/final LOV values for reporting ticket_newline---------+------+--------+--------------------------------------------*/_newlinefunction func_usCreateReportingTicket(Inputs, Outputs)_newline{_newline var boSR,bcSR,bcPick;_newline var strQName=&quot;L2_usQUEUE_usDOHA&quot;;_newline try_newline {_newline  var strTTNumRep = &quot;&quot;;_newline  var strAssetId  = Inputs.GetProperty(&quot;Root Asset Id&quot;);_newline  var strAccntId  = Inputs.GetProperty(&quot;Account Id&quot;);_newline  var strTTNum    = Inputs.GetProperty(&quot;TTNum&quot;);_newline  var strErrInfo  = Inputs.GetProperty(&quot;Error Info&quot;);_newline  var strPhoneNumber = Inputs.GetProperty(&quot;PhoneNumber&quot;);_newline_newline  boSR=TheApplication().GetBusObject(&quot;Service Request&quot;);_newline  bcSR=boSR.GetBusComp(&quot;Service Request&quot;);_newline_newline  bcSR.SetViewMode(AllView);_newline  bcSR.ActivateField(&quot;Account Id&quot;);_newline  bcSR.ActivateField(&quot;Asset Id&quot;);_newline  bcSR.ActivateField(&quot;INS Product&quot;);_newline  bcSR.ActivateField(&quot;INS Area&quot;);_newline  bcSR.ActivateField(&quot;INS Sub-Area&quot;);_newline  bcSR.ActivateField(&quot;Priority&quot;);_newline  bcSR.ActivateField(&quot;SR Type&quot;);_newline  bcSR.ActivateField(&quot;Abstract&quot;);_newline  bcSR.ActivateField(&quot;Description&quot;);_newline  bcSR.ActivateField(&quot;Owner&quot;);_newline  bcSR.ClearToQuery();_newline  bcSR.SetSearchExpr(&quot;[Account Id]=&apos;&quot; + strAccntId + &quot;&apos;&quot;);_newline  bcSR.ExecuteQuery(ForwardOnly);_newline  bcSR.NewRecord(NewBefore);_newline_newline  bcSR.SetFieldValue(&quot;Account Id&quot;,   strAccntId);_newline  bcSR.SetFieldValue(&quot;Asset Id&quot;,     strAssetId);_newline  bcSR.SetFieldValue(&quot;INS Product&quot;,  &quot;Incident&quot;);//Order Failure_newline  bcSR.SetFieldValue(&quot;INS Area&quot;,     &quot;MNP&quot;);//Oracle Siebel_newline  bcSR.SetFieldValue(&quot;INS Sub-Area&quot;, &quot;Disconnection Failure&quot;);//PortOut Error_newline  bcSR.SetFieldValue(&quot;Priority&quot;,     &quot;1-ASAP&quot;);_newline  bcSR.SetFieldValue(&quot;Abstract&quot;,     &quot;Portout Termination order for number [&quot; + strPhoneNumber + &quot;] failed, Ticket:&quot; + strTTNum);_newline  bcSR.SetFieldValue(&quot;Description&quot;,  strErrInfo.substring(0,2000));_newline_newline  bcPick=bcSR.GetPicklistBusComp(&quot;Owner&quot;);_newline  bcPick.SetViewMode(AllView);_newline  bcPick.ClearToQuery();_newline  bcPick.SetSearchExpr(&quot;[Login Name]=&apos;&quot; + strQName + &quot;&apos;&quot;);_newline  bcPick.ExecuteQuery(ForwardOnly);_newline  if(bcPick.FirstRecord())_newline   bcPick.Pick();_newline_newline  bcSR.WriteRecord();_newline  strTTNumRep=bcSR.GetFieldValue(&quot;SR Number&quot;);_newline }_newline catch(e)_newline {_newline  //nothing, log_newline  TheApplication().LogError(&quot;PORTOUT_usERR_usERR&quot;, &quot;Problem ticket could not be created: &quot;+ strTTNum, &quot;PortOut&quot;, &quot;ExecuteFailed&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;);_newline  Outputs.SetProperty(&quot;Error&quot;,e.errCode + &quot;:&quot; + e.errText);_newline_newline }_newline finally_newline {_newline  bcSR=null;_newline  boSR=null;_newline  Outputs.SetProperty(&quot;ReportingTicketNumber&quot;,strTTNumRep);_newline  return CancelOperation;_newline }_newline}"
 Program_spcLanguage="JS"
 Name="func_usCreateReportingTicket"
 Sequence="6"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-59RBF1"
 Parent_spcName="TM BS MNP Util"
 Parent_spcInactive="N"
 Inactive="N"
 Script="/*-------+------+--------+----------------------------------------------_newlineYYYYMMDD | Ver  | By     | Description of Change_newline---------+------+--------+----------------------------------------------_newline20140217 | 1.00 | PPB    | Function to create a reporting ticket if anything fails (typ terminate order creation for portout)_newline---------+------+--------+--------------------------------------------*/_newlinefunction func_usCreateReportingTicket_usLASTGOOD_us20140227(Inputs, Outputs)_newline{_newline var boSR,bcSR;_newline try_newline {_newline  var strTTNumRep = &quot;&quot;;_newline  var strAssetId  = Inputs.GetProperty(&quot;Root Asset Id&quot;);_newline  var strAccntId  = Inputs.GetProperty(&quot;Account Id&quot;);_newline  var strTTNum    = Inputs.GetProperty(&quot;TTNum&quot;);_newline  var strErrInfo  = Inputs.GetProperty(&quot;Error Info&quot;);_newline  var strPhoneNumber = Inputs.GetProperty(&quot;PhoneNumber&quot;);_newline_newline  boSR=TheApplication().GetBusObject(&quot;Service Request&quot;);_newline  bcSR=boSR.GetBusComp(&quot;Service Request&quot;);_newline_newline  bcSR.SetViewMode(AllView);_newline  bcSR.ActivateField(&quot;Account Id&quot;);_newline  bcSR.ActivateField(&quot;Asset Id&quot;);_newline  bcSR.ActivateField(&quot;INS Product&quot;);_newline  bcSR.ActivateField(&quot;INS Area&quot;);_newline  bcSR.ActivateField(&quot;INS Sub-Area&quot;);_newline  bcSR.ActivateField(&quot;Priority&quot;);_newline  bcSR.ActivateField(&quot;SR Type&quot;);_newline  bcSR.ActivateField(&quot;Abstract&quot;);_newline  bcSR.ActivateField(&quot;Description&quot;);_newline  bcSR.ClearToQuery();_newline  bcSR.SetSearchExpr(&quot;[Account Id]=&apos;&quot; + strAccntId + &quot;&apos;&quot;);_newline  bcSR.ExecuteQuery(ForwardOnly);_newline  bcSR.NewRecord(NewBefore);_newline_newline  bcSR.SetFieldValue(&quot;Account Id&quot;,   strAccntId);_newline  bcSR.SetFieldValue(&quot;Asset Id&quot;,     strAssetId);_newline  bcSR.SetFieldValue(&quot;INS Product&quot;,  &quot;Order Failure&quot;);_newline  bcSR.SetFieldValue(&quot;INS Area&quot;,     &quot;Oracle Siebel&quot;);_newline  bcSR.SetFieldValue(&quot;INS Sub-Area&quot;, &quot;PortOut Error&quot;);_newline  bcSR.SetFieldValue(&quot;Priority&quot;,     &quot;1-ASAP&quot;);_newline  bcSR.SetFieldValue(&quot;Abstract&quot;,     &quot;Portout Termination order for number [&quot; + strPhoneNumber + &quot;] failed, Ticket:&quot; + strTTNum);_newline  bcSR.SetFieldValue(&quot;Description&quot;,  strErrInfo.substring(0,2000));_newline  bcSR.WriteRecord();_newline  strTTNumRep=bcSR.GetFieldValue(&quot;SR Number&quot;);_newline }_newline catch(e)_newline {_newline  //nothing, log_newline  TheApplication().LogError(&quot;PORTOUT_usERR_usERR&quot;, &quot;Problem ticket could not be created: &quot;+ strTTNum, &quot;PortOut&quot;, &quot;ExecuteFailed&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;);_newline  Outputs.SetProperty(&quot;Error&quot;,e.errCode + &quot;:&quot; + e.errText);_newline_newline }_newline finally_newline {_newline  bcSR=null;_newline  boSR=null;_newline  Outputs.SetProperty(&quot;ReportingTicketNumber&quot;,strTTNumRep);_newline  return CancelOperation;_newline }_newline}"
 Program_spcLanguage="JS"
 Name="func_usCreateReportingTicket_usLASTGOOD_us20140227"
 Sequence="1"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-59RBF1"
 Parent_spcName="TM BS MNP Util"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function func_usCreateResponse(Inputs, Outputs)_newline{//prepares a child propset_newline var strTTId   = Inputs.GetProperty(&quot;TTId&quot;);        _newline var strSRNum  = Inputs.GetProperty(&quot;TT_usNumber&quot;);        _newline var strMSISDN = Inputs.GetProperty(&quot;PhoneNumber&quot;);_newline var PortOutAcceptance = Inputs.GetProperty(&quot;PortOutAcceptance&quot;);_newline var psStatusDtlCont;_newline var p1,p2,p3,p4,p5;_newline psStatusDtlCont=Inputs.GetChild(0);_newline p1=TheApplication().NewPropertySet();   p1.SetType(&quot;UpdatePortOutStatusSiebelReqABCSImplRequestMessage:payload&quot;); _newline p1.SetProperty(&quot;MessageId&quot;,&quot;dummy&quot;);    p1.SetProperty(&quot;MessageType&quot;,&quot;Integration Object&quot;);_newline p1.SetProperty(&quot;IntObjectName&quot;,&quot;OrderData&quot;);p1.SetProperty(&quot;IntObjectFormat&quot;,&quot;Siebel Hierarchical&quot;);_newline p2=TheApplication().NewPropertySet();   p2.SetType(&quot;ListOfOrderData&quot;); _newline p3=TheApplication().NewPropertySet();   p3.SetType(&quot;OrderData&quot;); _newline p3.SetProperty(&quot;TTID&quot;,        strTTId);        _newline p3.SetProperty(&quot;TT_usNumber&quot;,   strSRNum);        _newline p3.SetProperty(&quot;AIAStatus&quot;,   PortOutAcceptance);_newline p3.SetProperty(&quot;PhoneNumber&quot;, strMSISDN);_newline// p3.SetProperty(&quot;CustomerName&quot;,&quot;&quot;);      p3.SetProperty(&quot;CustomerIDType&quot;,&quot;&quot;);     p3.SetProperty(&quot;ServiceType&quot;,&quot;&quot;);       _newline// p3.SetProperty(&quot;MultipleMSISDN&quot;,&quot;&quot;);    p3.SetProperty(&quot;CustomerType&quot;,&quot;&quot;);       p3.SetProperty(&quot;QuotaFlag&quot;,&quot;&quot;);_newline// p3.SetProperty(&quot;CustomerID&quot;,&quot;&quot;);        p3.SetProperty(&quot;MessageTypeID&quot;,&quot;&quot;);      p3.SetProperty(&quot;DonorSubscriptionType&quot;,&quot;&quot;);_newline p4=TheApplication().NewPropertySet();   p4.SetType(&quot;ListOfDonorRejectList&quot;); _newline p5=TheApplication().NewPropertySet();   p5.SetType(&quot;DonorRejectList&quot;); _newline psStatusDtlCont.SetType(&quot;ListOfDonerRejectData&quot;);_newline p5.AddChild(psStatusDtlCont);_newline p4.AddChild(p5);_newline p3.AddChild(p4);_newline p2.AddChild(p3);_newline p1.AddChild(p2);_newline Outputs.AddChild(p1);_newline p1=null;_newline p2=null;_newline p3=null;_newline p4=null;_newline p5=null;_newline psStatusDtlCont=null;_newline}"
 Program_spcLanguage="JS"
 Name="func_usCreateResponse"
 Sequence="7"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-59RBF1"
 Parent_spcName="TM BS MNP Util"
 Parent_spcInactive="N"
 Inactive="N"
 Script="/*-------+------+--------+----------------------------------------------_newlineYYYYMMDD | Ver  | By     | Description of Change_newline---------+------+--------+----------------------------------------------_newline20140108 | 1.00 | PPB    | Function to create disconnect order for portout_newline20140206 | 1.10 | PPB    | Additional checks to verify and moved primary number_newline20140213 | 1.2  | PPB    | Best mate processing EDR creation enabled_newline20140427 | 1.3  | PPB    | problem with change primary number order and its prerequisite completion for disconnect order_newline---------+------+--------+--------------------------------------------*/_newlinefunction func_usExecutePortOut(Inputs, Outputs)_newline{//is internal function and not exposed as BS Method_newline var strAccntId     = Inputs.GetProperty(&quot;Account Id&quot;);_newline var strRootAssetId = Inputs.GetProperty(&quot;Root Asset Id&quot;);_newline var strTTNum       = Inputs.GetProperty(&quot;TTNumber&quot;);//to set on order_newline var strExtRef      = &quot;PRIM_usCHANGE_us&quot;+strTTNum;_newline var strErrCode = &quot;OK&quot;, strErrMesg = &quot;Implementation is in progress.&quot;;_newline var strPrimNum = &quot;&quot;;_newline var strPhoneNum = &quot;&quot;;_newline var strAssetIntegNewPrim=&quot;&quot;;//to fetch the assetintegid which will be marked as next primary number_newline var strBillAccntId = &quot;&quot;;_newline var strPromAssetId = &quot;&quot;, strPromAssetIntegId = &quot;&quot;, strRootAssetIntegId = &quot;&quot;,strOrderId = &quot;&quot;;_newline var strOtherOrderItemId=&quot;&quot;,strOtherOrderId=&quot;&quot;,strChargeId=&quot;&quot;,nPenalty=0.0;_newline var strConId = &quot;&quot;, strCIPId = &quot;&quot;;_newline var boAccnt,bcAccnt,bcAsset,bcAgrItem,boOrder,bcOrder,bcOLI,bcPick,psIp,psOp,bsUtil,isRec,bcPick;_newline var strOrderCancelReason = &quot;Port Out&quot;;//&quot;Good Value From Competitor&quot;;_newline var strOLICancelReason   = &quot;Port Out&quot;;_newline try_newline {_newline//query account_newline  boAccnt = TheApplication().GetBusObject(&quot;Account&quot;);_newline  bcAccnt = boAccnt.GetBusComp(&quot;Account&quot;);_newline  bcAccnt.SetViewMode(AllView);_newline  bcAccnt.ClearToQuery();_newline  bcAccnt.SetSearchExpr(&quot;[Id]=&apos;&quot; + strAccntId + &quot;&apos;&quot;);_newline  bcAccnt.ExecuteQuery(ForwardOnly);_newline  if(!bcAccnt.FirstRecord())_newline  {_newline   strErrCode = &quot;ACCNT_usNOT_usFOUND&quot;;_newline   strErrMesg = &quot;Account not found: &quot; + strAccntId;_newline  }_newline  else_newline  {_newline//query asset_newline   bcAsset = boAccnt.GetBusComp(&quot;Asset Mgmt - Asset (Order Mgmt)&quot;);_newline   bcAsset.ActivateField(&quot;Status&quot;);_newline   bcAsset.ActivateField(&quot;Integration Id&quot;);_newline   bcAsset.ActivateField(&quot;Prom Instance Asset Id&quot;);_newline   bcAsset.ActivateField(&quot;Owner Contact Id&quot;);_newline   bcAsset.ActivateField(&quot;Billing Profile Id&quot;);_newline   bcAsset.ActivateField(&quot;Product Name&quot;);_newline   bcAsset.ActivateField(&quot;Serial Number&quot;);_newline   bcAsset.ActivateField(&quot;Billing Acount Id&quot;);_newline   bcAsset.ActivateField(&quot;Billing Account Parent HQ DUNS&quot;);_newline_newline   bcAsset.SetViewMode(AllView);_newline   bcAsset.ClearToQuery();_newline   bcAsset.SetSearchExpr(&quot;[Id]=&apos;&quot; + strRootAssetId + &quot;&apos; AND [Status]=&apos;Active&apos;&quot;);_newline   bcAsset.ExecuteQuery(ForwardOnly);_newline   if(!bcAsset.FirstRecord())_newline   {_newline    strErrCode = &quot;ASSET_usNOT_usFOUND&quot;;_newline    strErrMesg = &quot;Active asset not found: &quot; + strRootAssetId;_newline   }_newline   else_newline   {_newline    strConId = bcAsset.GetFieldValue(&quot;Owner Contact Id&quot;);_newline    strCIPId = bcAsset.GetFieldValue(&quot;Billing Profile Id&quot;);_newline    strPhoneNum = bcAsset.GetFieldValue(&quot;Serial Number&quot;);_newline    strBillAccntId = bcAsset.GetFieldValue(&quot;Billing Account Id&quot;);_newline    strPrimNum = bcAsset.GetFieldValue(&quot;Billing Account Parent HQ DUNS&quot;);_newline//find promotion asset_newline    strPromAssetId = bcAsset.GetFieldValue(&quot;Prom Instance Asset Id&quot;);_newline    strRootAssetIntegId = bcAsset.GetFieldValue(&quot;Integration Id&quot;);_newline    if(&quot;&quot;!=strPromAssetId)_newline    {_newline//find other non promotion asset under the same promtion_newline     bcAsset.ClearToQuery();_newline     bcAsset.SetSearchExpr(&quot;[Root Asset Id]&lt;&gt;&apos;&quot; + strRootAssetId + &quot;&apos; AND [Status] &lt;&gt; &apos;Inactive&apos; AND [Parent Asset Id] IS NULL AND [Prom Instance Asset Id]=&apos;&quot; + strPromAssetId + &quot;&apos;&quot;);_newline     bcAsset.ExecuteQuery(ForwardOnly);_newline     if(bcAsset.FirstRecord())_newline     {_newline      strErrCode = &quot;CANNOT_usTERMINATE&quot;;_newline      strErrMesg = &quot;There exist other sevice(s) under the same promotion, disconnection will require manual intervention:&quot; + strPromAssetId + &quot;:&quot; + bcAsset.GetFieldValue(&quot;Id&quot;);_newline     }_newline    }_newline//if primary number is being disconnected_newline    if(strPrimNum == strPhoneNum)_newline    {_newline     var strNonPrimAssetProdName = &quot;&quot;;_newline     var strMakePrimProdName = &quot;&quot;;_newline     var strRootAssetIntegIdNewPrim = &quot;&quot;;_newline     bcAsset.ClearToQuery();_newline     bcAsset.SetSearchExpr(&quot;[Parent Asset Id] IS NULL AND [Root Asset Id]&lt;&gt;&apos;&quot; + strRootAssetId + &quot;&apos; AND [Status] &lt;&gt; &apos;Inactive&apos; AND [Billing Account Id]=&apos;&quot; + strBillAccntId + &quot;&apos; AND [Prod Type]=&apos;Service Bundle&apos;&quot;);_newline     bcAsset.ExecuteQuery(ForwardOnly);_newline     if(bcAsset.FirstRecord())_newline     {//must first execute a change primary number order_newline      strErrCode = &quot;TBD&quot;;_newline      strErrMesg = &quot;Primary number is being disconnnected, a change primary number order will first be created.&quot;;_newline      strNonPrimAssetProdName = bcAsset.GetFieldValue(&quot;Product Name&quot;);_newline      strRootAssetIntegIdNewPrim = bcAsset.GetFieldValue(&quot;Integration Id&quot;);_newline      if(&quot;Mobile Service Bundle&quot;==strNonPrimAssetProdName)_newline       strMakePrimProdName=&quot;Make Primary MSISDN&quot;;_newline      else_newline       strMakePrimProdName=&quot;Make Primary VoIP&quot;;_newline//EV2 Post_us297 Def7459, 97474111432_newline      psIp = TheApplication().NewPropertySet();_newline      psIp.SetProperty(&quot;Ext Ref Id&quot;,strExtRef);_newline      psIp.SetProperty(&quot;Asset Integration Id&quot;,strRootAssetIntegIdNewPrim);_newline      psIp.SetProperty(&quot;Submit&quot;,&quot;Y&quot;);_newline      psIp.SetProperty(&quot;Product Names&quot;,strMakePrimProdName);_newline      psIp.SetProperty(&quot;Action Codes&quot;,&quot;Add&quot;);_newline      psIp.SetProperty(&quot;Parent Product Names&quot;,&quot;&quot;);_newline      bsUtil = TheApplication().GetService(&quot;TM BS Product Utility App&quot;);_newline      psOp = TheApplication().NewPropertySet();_newline      bsUtil.InvokeMethod(&quot;CreateModifyOrderGeneric&quot;, psIp, psOp);_newline      strOtherOrderId = psOp.GetProperty(&quot;Order Id&quot;);_newline      strOtherOrderItemId = psOp.GetProperty(&quot;Root Order Item Id&quot;);_newline      strErrCode = psOp.GetProperty(&quot;Error Code&quot;);_newline      strErrMesg = psOp.GetProperty(&quot;Error Message&quot;);_newline     }_newline    }_newline    if(&quot;OK&quot;==strErrCode)_newline    {_newline     bcAsset.ClearToQuery();_newline     if(&quot;&quot;!=strPromAssetId)_newline      bcAsset.SetSearchExpr(&quot;[Id]=&apos;&quot; + strPromAssetId + &quot;&apos;&quot;);_newline     else_newline      bcAsset.SetSearchExpr(&quot;[Id]=&apos;&quot; + strRootAssetId + &quot;&apos;&quot;);_newline     bcAsset.ExecuteQuery(ForwardOnly);_newline     if(bcAsset.FirstRecord())_newline     {_newline      if(&quot;&quot;!=strPromAssetId)_newline       strPromAssetIntegId = bcAsset.GetFieldValue(&quot;Integration Id&quot;);_newline      psIp = TheApplication().NewPropertySet();_newline      psOp = TheApplication().NewPropertySet();_newline      bsUtil = TheApplication().GetService(&quot;Workflow Process Manager&quot;);_newline      psIp.SetProperty(&quot;AccountId&quot;, strAccntId);//1-A2QMN6_newline      psIp.SetProperty(&quot;ProcessName&quot;, &quot;SISOMDisconnectWebService-Order&quot;);_newline      psIp.SetProperty(&quot;AssetIntegrationId&quot;, strRootAssetIntegId);_newline      bsUtil.InvokeMethod(&quot;RunProcess&quot;, psIp, psOp);_newline      strOrderId = psOp.GetProperty(&quot;ActiveDocumentId&quot;);_newline      if(&quot;&quot;!=strPromAssetId)_newline      {//delete promotion if it exists, it will use same order internally_newline       psIp.SetProperty(&quot;ActiveDocumentId&quot;,strOrderId);_newline       psIp.SetProperty(&quot;ProcessName&quot;, &quot;SISOMDisconnectWebService-Order&quot;);_newline       psIp.SetProperty(&quot;AssetIntegrationId&quot;, strPromAssetIntegId);_newline       bsUtil.InvokeMethod(&quot;RunProcess&quot;, psIp, psOp);//what to check in outputs? any error?_newline//find charge item. calc penalty if applicable_newline       bcAgrItem = boAccnt.GetBusComp(&quot;ISS Promotion Agreement Item Charges&quot;);_newline       bcAgrItem.ActivateField(&quot;Promotion Id&quot;);_newline       bcAgrItem.ActivateField(&quot;Promotion Name&quot;);_newline       bcAgrItem.ActivateField(&quot;Charge Id&quot;);_newline       bcAgrItem.ActivateField(&quot;Effective Date&quot;);_newline       bcAgrItem.ActivateField(&quot;Start Date&quot;);_newline       bcAgrItem.ActivateField(&quot;End Date&quot;);_newline       bcAgrItem.ClearToQuery();_newline       bcAgrItem.SetSearchExpr(&quot;[Asset Integration Id] = &apos;&quot; + strPromAssetIntegId + &quot;&apos;&quot;);_newline       bcAgrItem.ExecuteQuery(ForwardOnly);_newline       if(bcAgrItem.FirstRecord())_newline       {_newline        strChargeId = bcAgrItem.GetFieldValue(&quot;Charge Id&quot;);_newline        bsUtil = TheApplication().GetService(&quot;FS Conditional Charge&quot;);_newline        psIp = TheApplication().NewPropertySet(); _newline        psOp = TheApplication().NewPropertySet();_newline        psIp.SetProperty(&quot;Advance To&quot;,&quot;&quot;);//Today()_newline        psIp.SetProperty(&quot;Conditional Charge Item Id&quot;, strChargeId);_newline        bsUtil.InvokeMethod(&quot;GetCondCharge&quot;,psIp,psOp);_newline        nPenalty = psOp.GetProperty(&quot;Output Amount&quot;);_newline       }_newline      }_newline      if(&quot;&quot;!=strOrderId)_newline      {_newline       boOrder = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);_newline       bcOrder = boOrder.GetBusComp(&quot;Order Entry - Orders&quot;);_newline       bcOrder.ActivateField(&quot;Service Request Id&quot;);_newline       bcOrder.ActivateField(&quot;Service Request Number&quot;);_newline       bcOrder.ActivateField(&quot;Billing Profile Id&quot;);_newline       bcOrder.ActivateField(&quot;Contact Id&quot;);_newline       bcOrder.ActivateField(&quot;Cancel Reason&quot;);//termination reason _newline       bcOrder.ActivateField(&quot;Charged Flag&quot;);//paid flag_newline       bcOrder.SetViewMode(AllView);_newline       bcOrder.InvokeMethod(&quot;SetAdminMode&quot;, &quot;TRUE&quot;);_newline       bcOrder.ClearToQuery();_newline       bcOrder.SetSearchExpr(&quot;[Id]=&apos;&quot; + strOrderId + &quot;&apos;&quot;);_newline       bcOrder.ExecuteQuery(ForwardOnly);_newline       if(bcOrder.FirstRecord())_newline       {_newline//set fields on order_newline        bcOrder.SetFieldValue(&quot;Contact Id&quot;,strConId);_newline        bcOrder.SetFieldValue(&quot;Billing Profile Id&quot;,strCIPId);_newline        bcOrder.SetFieldValue(&quot;Charged Flag&quot;,&quot;Y&quot;);_newline        bcOrder.SetFieldValue(&quot;Cancel Reason&quot;,strOrderCancelReason);_newline        bcPick=bcOrder.GetPicklistBusComp(&quot;Service Request Number&quot;);_newline        bcPick.SetViewMode(AllView);_newline        bcPick.ClearToQuery();_newline        bcPick.SetSearchExpr(&quot;[SR Number]=&apos;&quot; +strTTNum+ &quot;&apos;&quot;);_newline        bcPick.ExecuteQuery(ForwardOnly);_newline        if(bcPick.FirstRecord())_newline         bcPick.Pick();_newline        bcOrder.WriteRecord();_newline//set Cancel Reason on the root OLI_newline        bcOLI   = boOrder.GetBusComp(&quot;Order Entry - Line Items&quot;);_newline        bcOLI.SetViewMode(AllView);_newline        bcOLI.InvokeMethod(&quot;SetAdminMode&quot;, &quot;TRUE&quot;);_newline        bcOLI.ActivateField(&quot;Cancel Reason&quot;);_newline        bcOLI.ActivateField(&quot;Prod Prom Instance Id&quot;);_newline        bcOLI.ActivateField(&quot;Unit Price&quot;);_newline        bcOLI.ActivateField(&quot;Depends on Id&quot;);_newline        bcOLI.ActivateField(&quot;Root Order Item Id&quot;);_newline        bcOLI.ActivateField(&quot;Integration Id&quot;);_newline        bcOLI.ActivateField(&quot;Asset Integration Id&quot;);_newline        bcOLI.ClearToQuery();_newline        bcOLI.SetSearchExpr(&quot;[Parent Order Item Id] IS NULL&quot;);//04-EPZ0H _newline        bcOLI.ExecuteQuery(ForwardOnly);_newline        isRec = bcOLI.FirstRecord();_newline        while(isRec)_newline        {_newline         bcOLI.SetFieldValue(&quot;Cancel Reason&quot;,strOLICancelReason);_newline         if(&quot;&quot;!=strOtherOrderItemId)//dependency_newline          bcOLI.SetFieldValue(&quot;Depends on Id&quot;,strOtherOrderItemId);_newline         bcOLI.WriteRecord();_newline         isRec = bcOLI.NextRecord();_newline        }_newline//Add OLI for penalty charges_newline        if(0.0!=nPenalty &amp;&amp; &quot;&quot;!=strPromAssetId)_newline        {_newline         bcOLI.ClearToQuery();_newline         bcOLI.SetSearchExpr(&quot;[Product]=&apos;Penalty Charges&apos;&quot;);//04-EPZ0H _newline         bcOLI.ExecuteQuery(ForwardOnly);_newline         if(!bcOLI.FirstRecord())//if does not exist then create OLI_newline         {_newline          bcOLI.NewRecord(NewAfter);_newline          bcPick = bcOLI.GetPicklistBusComp(&quot;Product&quot;);_newline          bcPick.SetViewMode(AllView);_newline          bcPick.ClearToQuery();_newline          bcPick.SetSearchExpr(&quot;[Name]=&apos;Penalty Charges&apos;&quot;);_newline          bcPick.ExecuteQuery(ForwardOnly);_newline          if(bcPick.FirstRecord())_newline           bcPick.Pick();_newline         }_newline         bcOLI.SetFieldValue(&quot;Prod Prom Instance Id&quot;, strPromAssetIntegId);_newline         bcOLI.SetFieldValue(&quot;Unit Price&quot;,nPenalty);_newline         bcOLI.WriteRecord();_newline        }_newline//EDR for best mate check_newline        Inputs.SetProperty(&quot;PhoneNumber&quot;,strPhoneNum);_newline        func_usCreateEDR_usBestMateCleanup(Inputs, Outputs);_newline//submit the order_newline//1.3 below_newline//20140427:PPB Order dependency and prim number change conflicting when handled by OSM, so need to hold the order till primchange order is complete._newline        if(&quot;&quot;==strOtherOrderItemId)_newline        {//no prim change order, submit right away_newline         bsUtil = TheApplication().GetService(&quot;Workflow Process Manager&quot;);_newline         psIp = TheApplication().NewPropertySet(); _newline         psOp = TheApplication().NewPropertySet();_newline         psIp.SetProperty(&quot;RowId&quot;, strOrderId);_newline         psIp.SetProperty(&quot;Fulfillment Mode&quot;,&quot;Deliver&quot;);_newline         psIp.SetProperty(&quot;ProcessName&quot;, &quot;SISOMBillingSubmitOrderWebService&quot;);_newline         bsUtil.InvokeMethod(&quot;RunProcess&quot;, psIp, psOp);_newline         strErrCode = &quot;OK&quot;;_newline         strErrMesg = &quot;Order submitted.&quot;;_newline        }_newline//1.3 above_newline       }_newline       strErrCode = &quot;OK&quot;;_newline       strErrMesg = &quot;Terminate order created.&quot;;_newline      }_newline      else_newline      {_newline       strErrCode = &quot;DISC_usORDER_usCREATION_usFAILED&quot;;_newline       strErrMesg = psOp.GetProperty(&quot;Error Code&quot;) + &quot;:&quot; + psOp.GetProperty(&quot;Error Message&quot;);_newline      }_newline     }_newline     else_newline     {_newline      strErrCode = &quot;ASSET_usNOT_usFOUND&quot;;_newline      strErrMesg = &quot;Asset with promotion instance id [&quot; + strPromAssetId + &quot;] / root asset id [&quot; + strRootAssetId + &quot;] was not found.&quot;;_newline     }_newline    }_newline   }_newline  }_newline }_newline catch(e)_newline {_newline  strErrCode = &quot;EXECUTE_usERR&quot;;_newline  strErrMesg = e.errCode + &quot;:&quot; + e.errText;_newline }_newline finally_newline {_newline  Outputs.SetProperty(&quot;Error Code&quot;, strErrCode);_newline  Outputs.SetProperty(&quot;Error Message&quot;, strErrMesg);_newline  Outputs.SetProperty(&quot;NPOrderID&quot;, strOrderId);_newline  bcAccnt = null;_newline  bcAsset = null;_newline  boAccnt = null;_newline  bcOLI = null;_newline  bcOrder = null;_newline  boOrder = null;_newline  bcPick  = null;_newline }_newline}"
 Program_spcLanguage="JS"
 Name="func_usExecutePortOut"
 Sequence="8"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-59RBF1"
 Parent_spcName="TM BS MNP Util"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function func_usFetchAttachment(Inputs, Outputs)_newline{_newline/*_newline&lt;attach_usclnparameters MessageId=&quot;1-LORG&quot; MessageType=&quot;Integration Object&quot; IntObjectName=&quot;attach&quot; IntObjectFormat=&quot;Siebel Hierarchical&quot;&gt;_newline &lt;ListOfattach&gt;_newline  &lt;attach msisdn=&quot;79131436&quot; /&gt; _newline  &lt;/ListOfattach&gt;_newline  &lt;/attach_usclnparameters&gt;_newline*/_newline var bsUtil, psIp, psOp, ps1, ps2, ps3,nFileCount=0;_newline var strMSISDN = Inputs.GetProperty(&quot;PhoneNumber&quot;);_newline strMSISDN = strMSISDN.substring(3);_newline Outputs.SetProperty(&quot;NumberUsed&quot;,strMSISDN);_newline//chop off first three 974 letters :-) god bless_newline// strMSISDN=&quot;79131436&quot;;//test hardcoded_newline var strTTId   = Inputs.GetProperty(&quot;TTId&quot;);//against which attachment is to be fetched from external system_newline var strErrCode=&quot;OK&quot;, strErrMesg=&quot;&quot;;_newline try_newline {_newline//fetch the file attachment_newline  psIp=TheApplication().NewPropertySet();_newline  psOp=TheApplication().NewPropertySet();_newline  ps1=TheApplication().NewPropertySet(); ps1.SetType(&quot;attach:parameters&quot;);_newline  ps1.SetProperty(&quot;MessageId&quot;,&quot;dummy&quot;);_newline  ps1.SetProperty(&quot;MessageType&quot;,&quot;Integration Object&quot;);_newline  ps1.SetProperty(&quot;IntObjectName&quot;,&quot;attach&quot;);_newline  ps1.SetProperty(&quot;IntObjectFormat&quot;,&quot;Siebel Hierarchical&quot;);_newline  ps2=TheApplication().NewPropertySet(); ps2.SetType(&quot;ListOfattach&quot;); _newline  ps3=TheApplication().NewPropertySet(); ps3.SetType(&quot;attach&quot;); ps3.SetProperty(&quot;msisdn&quot;,strMSISDN); _newline  ps2.AddChild(ps3);_newline  ps1.AddChild(ps2);_newline  psIp.AddChild(ps1);_newline  bsUtil=TheApplication().GetService(&quot;OSMSendAttachImpl&quot;);_newline  bsUtil.InvokeMethod(&quot;attach&quot;, psIp, psOp);_newline  nFileCount=psOp.GetChild(0).GetChild(0).GetChildCount();//need to check what goes on here_newline//map the output_newline  psIp=TheApplication().NewPropertySet();_newline  psIp.AddChild(psOp.GetChild(0));_newline  psIp.SetProperty(&quot;TTId&quot;,    strTTId);_newline  psIp.SetProperty(&quot;MapName&quot;, &quot;VFQA MNP TT Attachment&quot;);_newline  psOp=TheApplication().NewPropertySet();_newline  bsUtil=TheApplication().GetService(&quot;EAI Data Transformation Engine&quot;);_newline  bsUtil.InvokeMethod(&quot;Execute&quot;, psIp, psOp);_newline//upsert_newline  psIp=TheApplication().NewPropertySet();_newline  psIp.AddChild(psOp.GetChild(0));_newline  psOp=TheApplication().NewPropertySet();_newline  bsUtil=TheApplication().GetService(&quot;EAI Siebel Adapter&quot;);_newline  bsUtil.InvokeMethod(&quot;Upsert&quot;, psIp, psOp);_newline }_newline catch(e)_newline {_newline  strErrCode=&quot;FILE_usATTACH_usERR&quot;;_newline  strErrMesg=e.errCode + &quot;:&quot; + e.errText;_newline }_newline finally_newline {_newline  Outputs.SetProperty(&quot;FileCount&quot;,     nFileCount);_newline  Outputs.SetProperty(&quot;Error Code&quot;,    strErrCode);_newline  Outputs.SetProperty(&quot;Error Message&quot;, strErrMesg);_newline  return CancelOperation;_newline }_newline}"
 Program_spcLanguage="JS"
 Name="func_usFetchAttachment"
 Sequence="9"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-59RBF1"
 Parent_spcName="TM BS MNP Util"
 Parent_spcInactive="N"
 Inactive="N"
 Script="/*-------+------+--------+----------------------------------------------_newlineYYYYMMDD | Ver  | By     | Description of Change_newline---------+------+--------+----------------------------------------------_newline20140203 | 1.00 | PPB    | Method to query TMOrderAttachmentIO. Exposed as a web service for external systems for PortIn scenario_newline---------+------+--------+--------------------------------------------*/_newlinefunction func_usGetOrderAttachment(Inputs, Outputs)_newline{_newline var bsUtil;_newline var strErrCode=&quot;&quot;;_newline var strErrMesg=&quot;&quot;;_newline try_newline {_newline  bsUtil=TheApplication().GetService(&quot;EAI Siebel Adapter&quot;);_newline  bsUtil.InvokeMethod(&quot;Query&quot;, Inputs, Outputs);_newline  strErrCode = &quot;OK&quot;;_newline }_newline catch(e)_newline {_newline  strErrCode=&quot;ERR_usATTACHMENT_usRETRIEVAL&quot;;_newline  strErrMesg=e.errCode + &quot;:&quot; + e.errText;_newline }_newline finally_newline {_newline  Outputs.SetProperty(&quot;Error Code&quot;,strErrCode);_newline  Outputs.SetProperty(&quot;Error Message&quot;,strErrMesg);_newline  return CancelOperation;_newline }_newline}"
 Program_spcLanguage="JS"
 Name="func_usGetOrderAttachment"
 Sequence="10"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-59RBF1"
 Parent_spcName="TM BS MNP Util"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function func_usGetRTB(Inputs, Outputs)_newline{_newline var boMain,bcAccnt,bcProfile,bcAst,bcRTB,nBalance=0,balVal=0;_newline var strErrCode=&quot;OK&quot;;_newline var strErrMesg=&quot;&quot;;_newline var strAccntId       = Inputs.GetProperty(&quot;Account Id&quot;);//1-55SXB3_newline var strAssetId       = Inputs.GetProperty(&quot;Asset Id&quot;);  //1-563ESK   _newline var strBillProfileId = Inputs.GetProperty(&quot;CIP Id&quot;);    //1-55SYMQ_newline boMain= TheApplication().GetBusObject(&quot;Account&quot;); _newline bcAccnt=boMain.GetBusComp(&quot;Account&quot;);_newline bcAccnt.SetViewMode(AllView);_newline bcAccnt.SetSearchExpr(&quot;[Id]=&apos;&quot;+ strAccntId + &quot;&apos;&quot;);_newline bcAccnt.ExecuteQuery(ForwardOnly);_newline if(bcAccnt.FirstRecord())_newline {_newline  bcProfile = boMain.GetBusComp(&quot;Com Invoice Profile&quot;);_newline  bcProfile.ActivateField(&quot;Id&quot;);_newline  bcProfile.ActivateField(&quot;Name&quot;);_newline  bcProfile.ActivateField(&quot;Account Name&quot;);_newline  bcProfile.SetViewMode(AllView);_newline  bcProfile.ClearToQuery();_newline  bcProfile.SetSearchExpr(&quot;[Id]=&apos;&quot; + strBillProfileId + &quot;&apos;&quot;);_newline  bcProfile.ExecuteQuery(ForwardOnly);_newline  if(bcProfile.FirstRecord())_newline  {_newline//CMU Com Invoice Profile:VFQ Asset:VFQ Real Time Balance VBC-Field:Total_newline   bcAst=boMain.GetBusComp(&quot;VFQ Asset&quot;);_newline   bcAst.ActivateField(&quot;Serial Number&quot;);_newline   bcAst.SetViewMode(AllView);_newline   bcAst.ClearToQuery();_newline   bcAst.SetSearchExpr(&quot;[Id]=&apos;&quot; + strAssetId + &quot;&apos;&quot;);_newline   bcAst.ExecuteQuery(ForwardOnly);_newline   if(bcAst.FirstRecord())_newline   {_newline    try_newline    {_newline     bcRTB=boMain.GetBusComp(&quot;VFQ Real Time Balance VBC&quot;);_newline     bcRTB.ActivateField(&quot;Total&quot;);_newline     bcRTB.ActivateField(&quot;Description&quot;);_newline     bcRTB.ActivateField(&quot;AccountName&quot;);//this stores the type of balance_newline     bcRTB.SetViewMode(AllView);_newline     bcRTB.ClearToQuery();_newline     bcRTB.ExecuteQuery(ForwardOnly);_newline     var recCntRTB=0;_newline     var isRTBRec=bcRTB.FirstRecord();_newline     var rtbDescr=&quot;&quot;;//this contains word startig with Primary Balance_newline     while(isRTBRec)_newline     {_newline      rtbDescr = bcRTB.GetFieldValue(&quot;AccountName&quot;);_newline      balVal   = bcRTB.GetFieldValue(&quot;Total&quot;)_newline      recCntRTB++;_newline      Outputs.SetProperty(&quot;Op_us&quot; + recCntRTB,rtbDescr + &quot;:&quot; + balVal);_newline      if(&quot;Primary Balance&quot;==rtbDescr.substring(0,15))_newline      {_newline       nBalance = balVal;_newline       recCntRTB++;_newline       break;_newline      }_newline      isRTBRec=bcRTB.NextRecord()_newline     }_newline    }_newline    catch(e)_newline    {_newline     strErrMesg=e.errCode + &quot;:&quot; + e.errText;_newline     strErrCode=&quot;RTB_usERR&quot;;_newline     nBalance = &quot;RTB_usERR&quot;;//e.errCode;_newline    }_newline   }_newline   else_newline   {_newline    strErrMesg=&quot;Asset record was not found.&quot;;_newline    strErrCode=&quot;NO_usASSET_usRECORD&quot;;_newline   }_newline  }_newline  else_newline  {_newline   strErrMesg=&quot;Com Invoice Profile record was not found.&quot;;_newline   strErrCode=&quot;NO_usCIP_usRECORD&quot;;_newline  }_newline }_newline else_newline {_newline  strErrMesg=&quot;Account record was not found.&quot;;_newline  strErrCode=&quot;NO_usACCOUNT_usRECORD&quot;;_newline }_newline Outputs.SetProperty(&quot;Balance&quot;,nBalance);_newline boMain=null;_newline bcAccnt=null;_newline bcProfile=null;_newline bcAst=null;_newline bcRTB=null;_newline Outputs.SetProperty(&quot;Error Message&quot;, strErrMesg);_newline Outputs.SetProperty(&quot;Error Code&quot;, strErrCode);_newline return CancelOperation;_newline}"
 Program_spcLanguage="JS"
 Name="func_usGetRTB"
 Sequence="11"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-59RBF1"
 Parent_spcName="TM BS MNP Util"
 Parent_spcInactive="N"
 Inactive="N"
 Script="/*-------+------+--------+----------------------------------------------_newlineYYYYMMDD | Ver  | By     | Description of Change_newline---------+------+--------+----------------------------------------------_newline20131216 | 1.00 | PPB    | First version to support port out verification and processing_newline20140131 | 1.10 | PPB    | Get paytype to set on SR, fetch language from voicemail asset_newline20140206 | 1.20 | PPB    | 10,11 to be made manual for Business_newline---------+------+--------+--------------------------------------------*/_newlinefunction func_usProcessNumberPortOut(Inputs, Outputs)_newline{_newline//This function handles various scenarios like verify, cancel, execute for PortOut transactions_newline var strRootAssetId = &quot;&quot;, strPromAssetId=&quot;&quot;, strConId=&quot;&quot;, strAccntId=&quot;&quot;, strAccntType=&quot;&quot;, strBillProfileId=&quot;&quot;,strMoreInfo=&quot;&quot;;_newline var fldNameIDType = &quot;Market Type&quot;;_newline var fldNameIDNum  = &quot;DUNS Number&quot;;_newline var fldNameLang   = &quot;VFQA Preferred Language&quot;;_newline var boMain,bcAsset,bcAccnt,bcSR, bcBalVBC, bcProfile,bcXA;_newline var bcContct; // Added By [AMITB] for production issue 20-May-14_newline var bcRTB,bcAst;_newline var nPermittedDues = 0.0;_newline var bBalCheckRequired = false;_newline//verify, execute, cancel, getstatus_newline var strErrCode = &quot;OK&quot;;_newline var strErrMesg = &quot;&quot;;_newline var strOperationType = Inputs.GetProperty(&quot;OperationType&quot;);_newline//verify_newline var strCustomerID      = Inputs.GetProperty(&quot;CustomerID&quot;);_newline var strCustomerIDType  = Inputs.GetProperty(&quot;CustomerIDType&quot;);_newline var strCustomerType    = Inputs.GetProperty(&quot;CustomerType&quot;);_newline var strActualSubscrType= &quot;&quot;;_newline var strDonorSubscrType = Inputs.GetProperty(&quot;DonorSubscriptionType&quot;);_newline var strCustomerName    = Inputs.GetProperty(&quot;CustomerName&quot;);_newline var strPhoneNumber     = Inputs.GetProperty(&quot;PhoneNumber&quot;);_newline var strServiceType     = Inputs.GetProperty(&quot;ServiceType&quot;);_newline var strLang=&quot;&quot;;_newline var nBalance=0.0;_newline var strAssetId=&quot;&quot;;_newline//getstatus_newline var strTTId = Inputs.GetProperty(&quot;TTId&quot;);_newline var strSRNum = Inputs.GetProperty(&quot;TTNumber&quot;);_newline//validate inputs_newline if(&quot;verify&quot; == strOperationType)_newline {_newline  if(&quot;&quot; == strCustomerID || &quot;&quot; == strCustomerIDType || &quot;&quot; == strCustomerName || &quot;&quot; == strCustomerType || &quot;&quot;   == strDonorSubscrType || &quot;&quot; == strPhoneNumber    || &quot;&quot; == strServiceType)_newline  {_newline   strErrCode = &quot;INCOMPLETE_usINPUTS&quot;;_newline   strErrMesg = &quot;For &apos;verify&apos; operation specific inputs must be provided.\r&quot;;_newline   strErrMesg = strErrMesg + &quot;PhoneNumber\r&quot;;_newline   strErrMesg = strErrMesg + &quot;ServiceType [MSISDN, FixedLine]\r&quot;;_newline   strErrMesg = strErrMesg + &quot;CustomerType [Residential, Business]\r&quot;;_newline   strErrMesg = strErrMesg + &quot;CustomerIDType [Qatari Id, Passport etc]\r&quot;;_newline   strErrMesg = strErrMesg + &quot;CustomerID [Id number]\r&quot;;_newline   strErrMesg = strErrMesg + &quot;DonorSubscriptionType [Prepaid, Postpaid]\r&quot;;_newline   strErrMesg = strErrMesg + &quot;CustomerName\r&quot;;_newline  }_newline }_newline else if(&quot;getstatus&quot; == strOperationType || &quot;cancel&quot; == strOperationType || &quot;execute&quot; == strOperationType)_newline {_newline  if(&quot;&quot; == strTTId &amp;&amp; &quot;&quot; == strSRNum)_newline  {_newline   strErrCode = &quot;INCOMPLETE_usINPUTS&quot;;_newline   strErrMesg = &quot;For operationtype &apos;&quot; + strOperationType + &quot;&apos;, one of the two TTId, TTNumber must be provided.&quot;;_newline  }_newline }_newline else_newline {_newline  strErrCode = &quot;INVALID_usOPERATIONTYPE&quot;;_newline  strErrMesg = &quot;Only valid values for OperationType must be specified - verify, execute, cancel, getstatus.&quot;;_newline }_newline//now proceed_newline if(&quot;OK&quot;!=strErrCode)_newline {_newline  Outputs.SetProperty(&quot;Error Code&quot;, strErrCode);_newline  Outputs.SetProperty(&quot;Error Message&quot;, strErrMesg);_newline  return CancelOperation;_newline }_newline if(&quot;execute&quot; == strOperationType || &quot;cancel&quot; == strOperationType || &quot;getstatus&quot; == strOperationType)_newline {_newline  func_usProcessTicket(Inputs, Outputs);_newline  return CancelOperation;_newline }_newline else if(&quot;verify&quot; == strOperationType)_newline {_newline  strErrCode = &quot;Donor Reject&quot;;_newline//check asset by given phone number_newline  boMain  = TheApplication().GetBusObject(&quot;VFQA Asset Mgmt - Asset (Order Mgmt)&quot;);_newline  bcAsset = boMain.GetBusComp(&quot;Asset Mgmt - Asset (Order Mgmt)&quot;);_newline  bcAsset.SetViewMode(AllView);_newline  bcAsset.ActivateField(&quot;Product Name&quot;);_newline  bcAsset.ActivateField(&quot;Billing Profile Id&quot;);_newline  bcAsset.ActivateField(&quot;Prod Type&quot;);_newline  bcAsset.ActivateField(&quot;Status&quot;);_newline  bcAsset.ActivateField(&quot;Operating Status&quot;);_newline  bcAsset.ActivateField(&quot;Root Asset Id&quot;);_newline  bcAsset.ActivateField(&quot;Owner Account Id&quot;);_newline  bcAsset.ActivateField(&quot;Owner Contact Id&quot;);_newline  bcAsset.ActivateField(&quot;Payment Type&quot;);_newline  bcAsset.ActivateField(&quot;Prom Instance Asset Id&quot;);//the root bundle to search can be a part of the promotion alongwith other root bundle???_newline  bcAsset.ClearToQuery();_newline  bcAsset.SetSearchExpr(&quot;[Serial Number]=&apos;&quot; + strPhoneNumber + &quot;&apos; AND [Parent Asset Id] IS NULL AND [Product Type]&lt;&gt;&apos;Promotion&apos; AND ([Status]=&apos;Active&apos; OR [Status]=&apos;Suspended&apos;)&quot;);_newline  bcAsset.ExecuteQuery(ForwardOnly);_newline_newline  if(bcAsset.FirstRecord())//asset not found, return error and end_newline  {_newline//check staff number_newline   if(&quot;97477775&quot; == strPhoneNumber.substring(0,8))//77775xxx_newline    func_usCreatePS(Inputs,&quot;13&quot;,&quot;Failed&quot;,&quot;Staff number porting out.&quot;);_newline   else_newline    func_usCreatePS(Inputs,&quot;13&quot;,&quot;Success&quot;,&quot;Number porting out is not a Staff Number.&quot;);_newline   strAssetId       = bcAsset.GetFieldValue(&quot;Id&quot;);_newline   strRootAssetId   = bcAsset.GetFieldValue(&quot;Root Asset Id&quot;);_newline   strPromAssetId   = bcAsset.GetFieldValue(&quot;Prom Instance Asset Id&quot;); _newline   strAccntId       = bcAsset.GetFieldValue(&quot;Owner Account Id&quot;);_newline   strConId         = bcAsset.GetFieldValue(&quot;Owner Contact Id&quot;);_newline   if(&quot;No Match Row Id&quot;==strConId) _newline    strConId=&quot;&quot;;_newline   strBillProfileId = bcAsset.GetFieldValue(&quot;Billing Profile Id&quot;);_newline   if(&quot;Active&quot; != bcAsset.GetFieldValue(&quot;Status&quot;))//must be suspended - due to system or due to user request? what to do?_newline    func_usCreatePS(Inputs,&quot;06&quot;,&quot;Failed&quot;,&quot;Service for Number currently barred or suspended.&quot;);_newline   else_newline   {_newline    func_usCreatePS(Inputs,&quot;06&quot;,&quot;Success&quot;,&quot;Service for the number porting out is currently NOT barred or suspended.&quot;);_newline//check if the promotion has some other root bundle also, then disconnect will not be allowed, but must go for a upgrade/downgrade promotion_newline    bcAsset.ClearToQuery();_newline    bcAsset.SetSearchExpr(&quot;[Root Asset Id]&lt;&gt;&apos;&quot; + strRootAssetId + &quot;&apos; AND [Status] &lt;&gt; &apos;Inactive&apos; AND [Parent Asset Id] IS NULL AND [Prom Instance Asset Id]=&apos;&quot; + strPromAssetId + &quot;&apos;&quot;);_newline    bcAsset.ExecuteQuery(ForwardOnly);_newline    if(bcAsset.FirstRecord())_newline     func_usCreatePS(Inputs,&quot;99&quot;,&quot;Success&quot;,&quot;There exist other sevice(s) under the same promotion, disconnection will require manual intervention.&quot;);_newline    else_newline     func_usCreatePS(Inputs,&quot;99&quot;,&quot;Success&quot;,&quot;No other service under the promotion of the current asset.&quot;);_newline//check status of the to-be-ported-out asset_newline    bcAsset.ClearToQuery();_newline    bcAsset.SetSearchExpr(&quot;[Root Asset Id]=&apos;&quot; + strRootAssetId + &quot;&apos; AND [Status] =&apos;Active&apos; AND ([Prod Type]=&apos;Service Plan&apos; OR [Prod Type]=&apos;Commit Plan&apos;)&quot;);_newline    bcAsset.ExecuteQuery(ForwardOnly);_newline    if(!bcAsset.FirstRecord())_newline     func_usCreatePS(Inputs,&quot;04&quot;,&quot;Failed&quot;,&quot;Could not detect the payment type because Plan asset was not found.&quot;);_newline    else_newline    {_newline//send out payment type_newline     strActualSubscrType = bcAsset.GetFieldValue(&quot;Payment Type&quot;);_newline     Inputs.SetProperty(&quot;Payment Type&quot;,strActualSubscrType);//must not be null_newline//fetch language from the voice mail asset attribute_newline     bcAsset.ClearToQuery();_newline     bcAsset.SetSearchExpr(&quot;[Root Asset Id]=&apos;&quot; + strRootAssetId + &quot;&apos; AND [Status] =&apos;Active&apos; AND [Prod Type] LIKE &apos;*oice*ail*&apos;&quot;);//crazy way to detect_newline     bcAsset.ExecuteQuery(ForwardOnly);_newline     if(bcAsset.FirstRecord())_newline     {_newline      bcXA=boMain.GetBusComp(&quot;Asset Mgmt - Asset XA&quot;);_newline      bcXA.SetViewMode(AllView);_newline      bcXA.ActivateField(&quot;Value&quot;);_newline      bcXA.SetSearchExpr(&quot;[Name]=&apos;Language&apos;&quot;);_newline      bcXA.ExecuteQuery(ForwardOnly);_newline      if(bcXA.FirstRecord())_newline       strLang=bcXA.GetFieldValue(&quot;Value&quot;);_newline     }_newline//active root asset found, now switch to Account BO and carry out further checks, requery to find the plan asset, pre/post pay type, customer type (resi/busi)_newline     boMain = TheApplication().GetBusObject(&quot;Account&quot;);_newline     bcAccnt = boMain.GetBusComp(&quot;Account&quot;);_newline     bcAccnt.ActivateField(fldNameIDType);//ID number_newline     bcAccnt.ActivateField(fldNameIDNum);//ID Type_newline     bcAccnt.ActivateField(fldNameLang);//Language_newline     bcAccnt.ActivateField(&quot;Type&quot;);//Resi/Busi_newline     bcAccnt.SetViewMode(AllView);_newline     bcAccnt.ClearToQuery();_newline     bcAccnt.SetSearchExpr(&quot;[Id]=&apos;&quot; + strAccntId + &quot;&apos;&quot;);_newline     bcAccnt.ExecuteQuery(ForwardOnly);_newline     if(bcAccnt.FirstRecord())//anyway must get a record_newline     {_newline      if(&quot;&quot;==strLang) _newline       strLang = bcAccnt.GetFieldValue(fldNameLang);_newline      strAccntType = bcAccnt.GetFieldValue(&quot;Type&quot;);_newline      if(&quot;Residential&quot;==strAccntType)_newline       nPermittedDues=ToNumber(TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VFQA_usPARAMS&quot;,&quot;DUES_usPORT_usOUT_usRESI&quot;));_newline      else_newline       nPermittedDues=ToNumber(TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VFQA_usPARAMS&quot;,&quot;DUES_usPORT_usOUT_usBUSI&quot;));_newline_newline      if(strDonorSubscrType == strActualSubscrType)//expected to be prepaid or postpaid - paytype actually_newline      { _newline       func_usCreatePS(Inputs,&quot;04&quot;,&quot;Success&quot;,&quot;Correct donor service type &quot; + strActualSubscrType + &quot;.&quot;);_newline/*is it required to check Business/Residential also?_newline       if(strAccntType == strCustomerType)_newline        func_usCreatePS(Inputs,&quot;04&quot;,&quot;Success&quot;,&quot;Donor service type [&quot; + strDonorSubscrType + &quot;] is matching.&quot;);_newline       else_newline        func_usCreatePS(Inputs,&quot;04&quot;,&quot;Failed&quot;,&quot;Donor service type [&quot; + strCustomerType + &quot;] is not matching.&quot;);_newline*/      }_newline      else_newline       func_usCreatePS(Inputs,&quot;04&quot;,&quot;Failed&quot;,&quot;Incorrect donor service type (e.g. Prepaid, Postpaid, etc.).&quot;);_newline_newline      if(&quot;Business&quot; != strAccntType)_newline      {_newline       /*if(strCustomerName!=bcAccnt.GetFieldValue(&quot;Name&quot;))_newline        func_usCreatePS(Inputs,&quot;11&quot;,&quot;Failed&quot;,&quot;Number to be ported does not belong to said subscriber.&quot;);_newline       else_newline        func_usCreatePS(Inputs,&quot;11&quot;,&quot;Success&quot;,&quot;Number to be ported is registered under the subscriber’s name&quot;);[Nitesh] Comenting Code for defect 8978 */_newline       // Added Contact BC query by [AMITB]         _newline        bcContct = boMain.GetBusComp(&quot;Contact&quot;);       _newline        bcContct.ActivateField(&quot;ID Information&quot;);_newline        bcContct.ActivateField(&quot;ID Type&quot;);_newline        bcContct.ClearToQuery();_newline        bcContct.SetViewMode(3);_newline        bcContct.SetSearchSpec(&quot;Id&quot;, bcAccnt.GetFieldValue(&quot;Primary Contact Id&quot;));_newline        bcContct.ExecuteQuery(ForwardOnly);_newline       if(bcContct.FirstRecord())_newline       {_newline          if(strCustomerIDType != bcContct.GetFieldValue(&quot;ID Type&quot;))_newline             func_usCreatePS(Inputs,&quot;12&quot;,&quot;Failed&quot;,&quot;ID type of the subscriber is not matching.&quot;);_newline          else_newline             func_usCreatePS(Inputs,&quot;12&quot;,&quot;Success&quot;,&quot;ID type of the subscriber is valid/available.&quot;);_newline          if(strCustomerID != bcContct.GetFieldValue(&quot;ID Information&quot;))_newline             func_usCreatePS(Inputs,&quot;01&quot;,&quot;Failed&quot;,&quot;ID Number does not match.&quot;);_newline          else_newline             func_usCreatePS(Inputs,&quot;01&quot;,&quot;Success&quot;,&quot;ID Number is matching.&quot;);_newline      }_newline     else { func_usCreatePS(Inputs,&quot;01&quot;,&quot;Failed&quot;,&quot;ID Number does not match.&quot;);}_newline}_newline//is asset the only asset under the bill profile?_newline      if(&quot;Business&quot; != strAccntType)_newline      {_newline       if(&quot;Prepaid&quot; != strActualSubscrType)_newline       {_newline        bcAsset.ClearToQuery();_newline        bcAsset.SetSearchExpr(&quot;[Billing Profile Id] =&apos;&quot; + strBillProfileId + &quot;&apos; AND [Root Asset Id]&lt;&gt;&apos;&quot; + strRootAssetId + &quot;&apos; AND [Payment Type]=&apos;Postpaid&apos; AND [Status]=&apos;Active&apos; AND ([Prod Type]=&apos;Service Plan&apos; OR [Prod Type]=&apos;Commit Plan&apos;)&quot;);_newline        bcAsset.ExecuteQuery(ForwardOnly);_newline        if(bcAsset.FirstRecord())_newline        {_newline         func_usCreatePS(Inputs,&quot;10&quot;,&quot;Success&quot;,&quot;Debt check not applicable: Customer has more than one postpaid services.&quot;);_newline        }_newline        else//need to check balance since this is only single postpaid service on the profile_newline         bBalCheckRequired = true;_newline       }_newline       else_newline        func_usCreatePS(Inputs,&quot;10&quot;,&quot;Success&quot;,&quot;Debt check not applicable: Prepaid port-out requested.&quot;);_newline      }_newline//now fetch the balance info_newline      if(&quot;Prepaid&quot; == strActualSubscrType)_newline      {//just get prepaid balance only as info_newline       bcProfile = boMain.GetBusComp(&quot;Com Invoice Profile&quot;);_newline       bcProfile.ActivateField(&quot;Id&quot;);_newline       bcProfile.ActivateField(&quot;Name&quot;);_newline       bcProfile.ActivateField(&quot;Account Name&quot;);_newline       bcProfile.SetViewMode(AllView);_newline       bcProfile.ClearToQuery();_newline       bcProfile.SetSearchExpr(&quot;[Id]=&apos;&quot; + strBillProfileId + &quot;&apos;&quot;);_newline       bcProfile.ExecuteQuery(ForwardOnly);_newline       if(bcProfile.FirstRecord())_newline       {_newline//CMU Com Invoice Profile:VFQ Asset:VFQ Real Time Balance VBC-Field:Total_newline        bcAst=boMain.GetBusComp(&quot;VFQ Asset&quot;);_newline        bcAst.ActivateField(&quot;Serial Number&quot;);_newline        bcAst.SetViewMode(AllView);_newline        bcAst.ClearToQuery();_newline        bcAst.SetSearchExpr(&quot;[Id]=&apos;&quot; + strAssetId + &quot;&apos;&quot;);_newline        bcAst.ExecuteQuery(ForwardOnly);_newline        if(bcAst.FirstRecord())_newline        {_newline         try_newline         {_newline          bcRTB=boMain.GetBusComp(&quot;VFQ Real Time Balance VBC&quot;);_newline          bcRTB.ActivateField(&quot;Total&quot;);_newline          bcRTB.ActivateField(&quot;AccountName&quot;);//this contains the balance type_newline          bcRTB.SetViewMode(AllView);_newline          bcRTB.ClearToQuery();_newline          bcRTB.ExecuteQuery(ForwardOnly);_newline          var recCntRTB=0;_newline          var isRTBRec=bcRTB.FirstRecord();_newline          var rtbDescr=&quot;&quot;;//this contains word startig with Primary Balance_newline          while(isRTBRec)_newline          {_newline           rtbDescr=bcRTB.GetFieldValue(&quot;AccountName&quot;);_newline           if(&quot;Primary Balance&quot;==rtbDescr.substring(0,15))_newline           {_newline            nBalance = bcRTB.GetFieldValue(&quot;Total&quot;);_newline            recCntRTB++;_newline            break;_newline           }_newline           isRTBRec=bcRTB.NextRecord()_newline          }_newline         }_newline         catch(e)_newline         {_newline          nBalance = &quot;RTB_usERR&quot;;//e.errCode;_newline         }_newline        }_newline       }_newline       strMoreInfo=&quot;Prepaid Balance: &quot; + nBalance;_newline      }_newline      else_newline      {//postpaid debt check_newline       Inputs.SetProperty(&quot;CIP Id&quot;,strBillProfileId); _newline       func_usQueryBalanceSummary(Inputs, Outputs);_newline       if(&quot;OK&quot;!=Outputs.GetProperty(&quot;Error Code&quot;))_newline       {_newline        if(bBalCheckRequired)_newline         func_usCreatePS(Inputs,&quot;10&quot;,&quot;In Progress&quot;,&quot;Debt check failed due to technical / system issues.&quot;);_newline       }_newline       else_newline       {_newline        nBalance = ToNumber(Outputs.GetProperty(&quot;Due Now&quot;));_newline        strMoreInfo=&quot;Postpaid Balance: &quot; + nBalance;_newline        if(bBalCheckRequired)_newline        {_newline         if(nPermittedDues &gt;= nBalance)_newline          func_usCreatePS(Inputs,&quot;10&quot;,&quot;Success&quot;,&quot;Customer has cleared all the issued bills.&quot;);_newline         else_newline          func_usCreatePS(Inputs,&quot;10&quot;,&quot;In Progress&quot;,&quot;The customer has not settled the outstanding debt, [Allowed:&quot; +nPermittedDues + &quot;, Actual: &quot;+ nBalance+&quot;].&quot;);_newline        }_newline       }_newline      }_newline     }_newline    }_newline   }_newline//Create ticket_newline   Inputs.SetProperty(&quot;Root Asset Id&quot;, strRootAssetId);_newline   Inputs.SetProperty(&quot;Account Id&quot;,    strAccntId);_newline   Inputs.SetProperty(&quot;Contact Id&quot;,    strConId);_newline   Inputs.SetProperty(&quot;SR Type&quot;,       &quot;Request&quot;);_newline   Inputs.SetProperty(&quot;SR Area&quot;,       &quot;MNP&quot;);_newline   Inputs.SetProperty(&quot;SR Sub-Area&quot;,   &quot;Port Verification&quot;);_newline   Inputs.SetProperty(&quot;Language&quot;,      strLang);_newline   Inputs.SetProperty(&quot;Additional Info&quot;, strMoreInfo);_newline   Inputs.SetProperty(&quot;Account Type&quot;,  strAccntType);_newline   func_usCreateOrUpdateTicket(Inputs, Outputs);_newline   strErrCode = Outputs.GetProperty(&quot;Error Code&quot;);_newline   strErrMesg = Outputs.GetProperty(&quot;Error Message&quot;);_newline  }_newline  else_newline  {//asset not found, better create a ticket anyway_newline   func_usCreatePS(Inputs,&quot;11&quot;,&quot;Failed&quot;,&quot;Number to be ported is not a valid Vodafone number.&quot;);_newline   Outputs.SetProperty(&quot;TTNumber&quot;, &quot;&quot;);_newline   Outputs.SetProperty(&quot;TTId&quot;,     &quot;&quot;);_newline   Outputs.SetProperty(&quot;Error Code&quot;, &quot;Donor Reject&quot;);_newline  }_newline  bcAccnt=null;_newline  bcSR=null;_newline  bcXA=null;_newline  bcBalVBC = null;_newline  bcProfile = null;_newline  bcAsset = null;_newline  boMain = null;_newline  strErrMesg = &quot;&quot;;_newline  for(var i=0; i&lt;Inputs.GetChildCount(); i++)_newline  {_newline   strErrMesg = strErrMesg + Inputs.GetChild(i).GetProperty(&quot;Code&quot;) + &quot;:&quot; + Inputs.GetChild(i).GetProperty(&quot;Status&quot;) + &quot;[&quot; + Inputs.GetChild(i).GetProperty(&quot;Message&quot;) + &quot;];\r&quot;;_newline  }_newline }_newline Outputs.SetProperty(&quot;Error Code&quot;, strErrCode);_newline Outputs.SetProperty(&quot;Error Message&quot;, strErrMesg);_newline return CancelOperation;_newline}"
 Program_spcLanguage="JS"
 Name="func_usProcessNumberPortOut"
 Sequence="13"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-59RBF1"
 Parent_spcName="TM BS MNP Util"
 Parent_spcInactive="N"
 Inactive="N"
 Script="/*-------+------+--------+----------------------------------------------_newlineYYYYMMDD | Ver  | By     | Description of Change_newline---------+------+--------+----------------------------------------------_newline20140427 | 1.00 | PPB    | Function to process the ticket in delayed mode ONLY after a prerequisite prim number change order is completed_newline---------+------+--------+--------------------------------------------*/_newlinefunction func_usProcessPortOutDelayed(Inputs, Outputs)_newline{_newline//query the orders which have the prerequisite oli_newline var strPreReqOLIId = Inputs.GetProperty(&quot;Depends_uson_usOLI_usId&quot;);_newline var strErrCode = &quot;&quot;;_newline var strErrMesg = &quot;&quot;;_newline var strOrderId = &quot;&quot;;_newline var nCnt=0;_newline                var strOLIstat = &quot;&quot;;_newline var bsUtil,psIp,psOp,boOLI,bcOLI,isRec;_newline try_newline {_newline  if(&quot;&quot;==strPreReqOLIId)_newline  {_newline   strErrCode = &quot;NOTHING_usTO_usPROCESS&quot;;_newline   strErrMesg = &quot;There is no OLI Id specified.&quot;;_newline  }_newline  else_newline  {_newline   bsUtil = TheApplication().GetService(&quot;Workflow Process Manager&quot;);_newline   psOp = TheApplication().NewPropertySet();_newline   psIp = TheApplication().NewPropertySet(); _newline   psIp.SetProperty(&quot;Fulfillment Mode&quot;,&quot;Deliver&quot;);_newline   psIp.SetProperty(&quot;ProcessName&quot;, &quot;SISOMBillingSubmitOrderWebService&quot;);_newline   boOLI=TheApplication().GetBusObject(&quot;CMU Order Line Item&quot;);_newline   bcOLI=boOLI.GetBusComp(&quot;MACD Order Entry - Line Items&quot;);_newline   bcOLI.ActivateField(&quot;Order Header Id&quot;);_newline   bcOLI.SetViewMode(AllView);_newline   bcOLI.ClearToQuery();_newline   bcOLI.SetSearchExpr(&quot;[Depends on Id]=&apos;&quot;+ strPreReqOLIId + &quot;&apos;&quot;);_newline   bcOLI.ExecuteQuery(ForwardOnly);_newline   isRec=bcOLI.FirstRecord();_newline   while(isRec)_newline   {_newline    strOrderId=bcOLI.GetFieldValue(&quot;Order Header Id&quot;);_newline                                                                strOLIstat=bcOLI.GetFieldValue(&quot;Status&quot;);_newline                                                                if(strOLIstat == &quot;Pending&quot;)_newline                                                               {_newline     psIp.SetProperty(&quot;RowId&quot;, strOrderId);_newline     bsUtil.InvokeMethod(&quot;RunProcess&quot;, psIp, psOp);_newline     isRec=bcOLI.NextRecord();_newline     nCnt++;_newline                                                                }_newline   }_newline   strErrCode = &quot;OK&quot;;_newline   strErrMesg = &quot;Order(s) submitted: &quot; + nCnt;_newline  }_newline }_newline catch(e)_newline {_newline  strErrCode = &quot;EXECUTE_usERR&quot;;_newline  strErrMesg = e.errCode + &quot;:&quot; + e.errText;_newline }_newline finally_newline {_newline  bsUtil=null;_newline  psIp=null;_newline  psOp=null;_newline  bcOLI=null;_newline  boOLI=null;_newline  Outputs.SetProperty(&quot;Error Code&quot;,strErrCode);_newline  Outputs.SetProperty(&quot;Error Message&quot;,strErrMesg);_newline  return CancelOperation;_newline }_newline}"
 Program_spcLanguage="JS"
 Name="func_usProcessPortOutDelayed"
 Sequence="0"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-59RBF1"
 Parent_spcName="TM BS MNP Util"
 Parent_spcInactive="N"
 Inactive="N"
 Script="/*-------+------+--------+----------------------------------------------_newlineYYYYMMDD | Ver  | By     | Description of Change_newline---------+------+--------+----------------------------------------------_newline20140201 | 1.00 | PPB    | First version_newline20140207 | 1.10 | PPB    | Simplified to just send out updated_newline---------+------+--------+--------------------------------------------*/_newlinefunction func_usProcessPortOutManually(Inputs, Outputs)_newline{//this is to be invoked when a user clicks the process / submit butoon on the Ticket window_newline//check if already processed - this is so when the Resolution code is Donor Accept or Donor Reject_newline//in case of conditional accept, run the debt check activity once if not in In Progress status, run the status evaluator once_newline//then run execute_newline var boSR,bcSR,bcAct;_newline var strResCode = &quot;&quot;;_newline var strTTNum   = &quot;&quot;;_newline var strActId   = &quot;&quot;;_newline var strActStatus= &quot;&quot;;_newline var strTTId    = Inputs.GetProperty(&quot;TTId&quot;);_newline var strErrCode = &quot;OK&quot;;_newline var strErrMesg = &quot;&quot;;_newline boSR=TheApplication().GetBusObject(&quot;Service Request&quot;);_newline bcSR=boSR.GetBusComp(&quot;Service Request&quot;);_newline bcSR.SetViewMode(AllView);_newline bcSR.ActivateField(&quot;Resolution Code&quot;);_newline bcSR.ClearToQuery();_newline bcSR.SetSearchExpr(&quot;[Id]=&apos;&quot; + strTTId + &quot;&apos;&quot;);_newline bcSR.ExecuteQuery(ForwardOnly);_newline if(!bcSR.FirstRecord())_newline {_newline  strErrCode = &quot;INVALID_usTT_usID&quot;;_newline  strErrMesg = &quot;Invalid Ticket Id.&quot;;_newline }_newline else_newline {_newline  Inputs.SetProperty(&quot;Broadcast&quot;,&quot;Y&quot;);_newline  Inputs.SetProperty(&quot;TTId&quot;, strTTId);_newline  func_usCreateOrUpdateTicket(Inputs, Outputs);_newline  strErrCode=&quot;OK&quot;;_newline  strErrMesg=&quot;Ticket status was posted to external system.&quot;;_newline_newline/*_newline  strResCode = bcSR.GetFieldValue(&quot;Resolution Code&quot;);_newline  strTTNum   = bcSR.GetFieldValue(&quot;SR Number&quot;);_newline  Inputs.SetProperty(&quot;TTNum&quot;,strTTNum);_newline  if(&quot;Conditional Accept&quot;==strResCode || &quot;&quot;==strResCode)_newline  {//check debt activity_newline   bcAct = boSR.GetBusComp(&quot;Action&quot;);_newline   bcAct.ActivateField(&quot;Status&quot;);_newline   bcAct.SetViewMode(AllView);_newline   bcAct.ClearToQuery();_newline   bcAct.SetSearchExpr(&quot;[Description]=&apos;10&apos;&quot;);_newline   bcAct.ExecuteQuery(ForwardOnly);_newline   if(bcAct.FirstRecord())_newline   {_newline    strActId     = bcAct.GetFieldValue(&quot;Id&quot;);_newline    strActStatus = bcAct.GetFieldValue(&quot;Status&quot;);_newline    if(&quot;In Progress&quot;==strActStatus)_newline    {_newline     Inputs.SetProperty(&quot;ActivityId&quot;,strActId);_newline     func_usCheckPortOut(Inputs, Outputs);//this will internally post a status update also_newline     strErrCode = Outputs.GetProperty(&quot;Error Code&quot;);_newline     strErrMesg = Outputs.GetProperty(&quot;Error Message&quot;);_newline    }_newline    else_newline    {_newline     strErrCode = &quot;DEBT_usCHECK_usNOT_usPENDING&quot;;_newline     strErrMesg = &quot;Debt check for port out requuest is in &quot; + strActStatus + &quot; status.&quot;;_newline    }_newline   }_newline   else_newline   {_newline    strErrCode = &quot;DEBT_usCHECK_usNOT_usAPPLICABLE&quot;;_newline    strErrMesg = &quot;Debt check for port out requuest is not applicable.&quot;;_newline   }_newline  }_newline  else if(&quot;Donor Reject&quot;==strResCode)_newline  {_newline   strErrCode = &quot;NOTHING_usTO_usPROCESS&quot;;_newline   strErrMesg = &quot;Port out requuest is in &quot; + strResCode + &quot; status.&quot;;_newline  }_newline  else//Donor Accept_newline  {_newline   strErrCode = &quot;NOTHING_usTO_usPROCESS&quot;;_newline   strErrMesg = &quot;Port out requuest is in &quot; + strResCode + &quot; status.&quot;;_newline//now create order if _newline//   Inputs.SetProperty(&quot;OperationType&quot;,&quot;execute&quot;);_newline//   func_usProcessTicket(Inputs, Outputs);_newline//   strErrCode = Outputs.GetProperty(&quot;Error Code&quot;);_newline//   strErrMesg = Outputs.GetProperty(&quot;Error Message&quot;);_newline  }_newline*/_newline }_newline bcAct=null;_newline bcSR=null;_newline boSR=null;_newline Outputs.SetProperty(&quot;Error Code&quot;, strErrCode);_newline Outputs.SetProperty(&quot;Error Message&quot;, strErrMesg);_newline return CancelOperation;_newline}"
 Program_spcLanguage="JS"
 Name="func_usProcessPortOutManually"
 Sequence="14"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-59RBF1"
 Parent_spcName="TM BS MNP Util"
 Parent_spcInactive="N"
 Inactive="N"
 Script="/*-------+------+--------+----------------------------------------------_newlineYYYYMMDD | Ver  | By     | Description of Change_newline---------+------+--------+----------------------------------------------_newline20131224 | 1.00 | PPB    | Function to process the ticket_newline20140217 | 1.1  | PPB    | Reporting ticket creation if execute fails only on disconnct order creation_newline20140227 | 1.2  | PPB    | Reporting ticket creation if execute fails for all reasons_newline---------+------+--------+--------------------------------------------*/_newlinefunction func_usProcessTicket(Inputs, Outputs)_newline{_newline var boSR,bcSR,bcOrder,bcActTempl,bcActTemplAct;_newline var actCode=&quot;&quot;,actStatus=&quot;&quot;, strTicketSubStatus=&quot;&quot;, strTicketStatus=&quot;&quot;;_newline var strSRNum=&quot;&quot;, strTTId=&quot;&quot;, strNameOfTemplate=&quot;&quot;, strL1=&quot;&quot;, strL2=&quot;&quot;, strL3=&quot;&quot;, strAccntType=&quot;&quot;,strResCode=&quot;&quot;;_newline var strErrCode = &quot;&quot;, strErrMesg = &quot;&quot;, strActStatus = &quot;&quot;, strActComment = &quot;&quot;;_newline var strAccntId=&quot;&quot;, strRootAssetId=&quot;&quot;,strMSISDN=&quot;&quot;;_newline var strOperationType = Inputs.GetProperty(&quot;OperationType&quot;);_newline var psIp,psOp;_newline_newline boSR = TheApplication().GetBusObject(&quot;Service Request&quot;);_newline bcSR = boSR.GetBusComp(&quot;Service Request&quot;);_newline bcSR.SetViewMode(AllView);_newline bcSR.ActivateField(&quot;INS Product&quot;);_newline bcSR.ActivateField(&quot;INS Area&quot;);_newline bcSR.ActivateField(&quot;INS Sub-Area&quot;);_newline bcSR.ActivateField(&quot;Ticket Type&quot;);_newline bcSR.ActivateField(&quot;Account Id&quot;);_newline bcSR.ActivateField(&quot;Contact Id&quot;);_newline bcSR.ActivateField(&quot;Asset Id&quot;);_newline bcSR.ActivateField(&quot;Status&quot;);_newline bcSR.ActivateField(&quot;Sub-Status&quot;);_newline bcSR.ActivateField(&quot;Resolution Code&quot;);_newline bcSR.ActivateField(&quot;SR Number&quot;);_newline bcSR.ActivateField(&quot;Serial Number&quot;);_newline bcSR.ActivateField(&quot;Type&quot;);//account type B/R_newline_newline strSRNum = Inputs.GetProperty(&quot;TTNumber&quot;);_newline strTTId = Inputs.GetProperty(&quot;TTId&quot;);_newline strAccntType = Inputs.GetProperty(&quot;Account Type&quot;);_newline//Check existing non-closed ticket of same type for same asset._newline bcSR.InvokeMethod(&quot;SetAdminMode&quot;, &quot;TRUE&quot;);_newline bcSR.SetViewMode(AllView);_newline bcSR.ClearToQuery();_newline if(&quot;&quot;!=strSRNum)_newline  bcSR.SetSearchExpr(&quot;[SR Number]=&apos;&quot; + strSRNum + &quot;&apos;&quot;);_newline else_newline  bcSR.SetSearchExpr(&quot;[Id]=&apos;&quot; + strTTId + &quot;&apos;&quot;);_newline bcSR.ExecuteQuery(ForwardOnly);_newline if(!bcSR.FirstRecord())_newline {_newline  strSRNum   = &quot;&quot;;_newline  strErrCode = &quot;INVALID_usTTNum&quot;;_newline  strErrMesg = &quot;Ticket id / number provided is invalid.&quot;;_newline }_newline else_newline {_newline  strTTId = bcSR.GetFieldValue(&quot;Id&quot;);_newline  strSRNum = bcSR.GetFieldValue(&quot;SR Number&quot;);_newline  strMSISDN = bcSR.GetFieldValue(&quot;Serial Number&quot;);_newline  strTicketStatus = bcSR.GetFieldValue(&quot;Status&quot;);_newline  strTicketSubStatus = bcSR.GetFieldValue(&quot;Sub-Status&quot;);_newline  strL1 = bcSR.GetFieldValue(&quot;INS Product&quot;);_newline  strL2 = bcSR.GetFieldValue(&quot;INS Area&quot;);_newline  strL3 = bcSR.GetFieldValue(&quot;INS Sub-Area&quot;);_newline  strRootAssetId = bcSR.GetFieldValue(&quot;Asset Id&quot;);_newline  strAccntId   = bcSR.GetFieldValue(&quot;Account Id&quot;);_newline  strAccntType = bcSR.GetFieldValue(&quot;Type&quot;);_newline  strResCode =  bcSR.GetFieldValue(&quot;Resolution Code&quot;);_newline  if(&quot;&quot;==strAccntType) _newline   strAccntType=&quot;Residential&quot;;_newline  strNameOfTemplate = strL1 + strL2 + strL3 + &quot;_us&quot; + strAccntType;_newline//check if this really is a MNP ticket _newline  if(&quot;Request&quot; != strL1 || &quot;MNP&quot; != strL2 || &quot;Port Verification&quot; != strL3)_newline  {_newline   strErrCode =  &quot;INVALID_usTT&quot;;_newline   strErrMesg = &quot;Ticket is not a MNP ticket.&quot;;_newline  }_newline  else_newline  {_newline   bcOrder=boSR.GetBusComp(&quot;Order Entry - Orders&quot;);_newline   bcOrder.ActivateField(&quot;Order Number&quot;);_newline   bcOrder.SetViewMode(AllView);//no need to clearquery and set search spec_newline   if(&quot;cancel&quot;==strOperationType)_newline   {_newline    bcOrder.ClearToQuery();_newline    bcOrder.ExecuteQuery(ForwardOnly);_newline    if(bcOrder.FirstRecord())_newline    {_newline     strErrCode = &quot;ALREADY_usEXECUTED&quot;;_newline     strErrMesg = &quot;Order &quot; + bcOrder.GetFieldValue(&quot;Order Number&quot;) + &quot; already created for the port out request.&quot;;_newline    }_newline    else_newline    {_newline     bcSR.SetFieldValue(&quot;Status&quot;, &quot;Solved&quot;);_newline     bcSR.SetFieldValue(&quot;Sub-Status&quot;, &quot;Cancelled&quot;);_newline     bcSR.WriteRecord();_newline     strOperationType = bcSR.GetFieldValue(&quot;Status&quot;);_newline     strErrCode = &quot;OK&quot;;_newline     strErrMesg = &quot;Port Out request successfully cancelled.&quot;;_newline    }_newline   }_newline   else if(&quot;execute&quot;==strOperationType)_newline   {//donot care about ticket status/resolution code as per SA Team (Himanshu)_newline//check if an order is already associated with this SR_newline    bcOrder.ClearToQuery();_newline    bcOrder.ExecuteQuery(ForwardOnly);_newline    if(bcOrder.FirstRecord())_newline    {_newline     strErrCode = &quot;ALREADY_usEXECUTED&quot;;_newline     strErrMesg = &quot;Order &quot; + bcOrder.GetFieldValue(&quot;Order Number&quot;) + &quot; already created for the port out request.&quot;;_newline    }_newline    else _newline    {_newline     if(&quot;Cancelled&quot;==strTicketSubStatus)_newline     {_newline      strErrCode = &quot;CANNOT_usEXECUTE&quot;;_newline      strErrMesg = &quot;Port out request has been already cancelled.&quot;;_newline     }_newline     else_newline     { _newline      if(&quot;Donor Accept&quot;==strResCode)_newline      {_newline       Inputs.SetProperty(&quot;Account Id&quot;, strAccntId);_newline       Inputs.SetProperty(&quot;Root Asset Id&quot;, strRootAssetId);_newline       func_usExecutePortOut(Inputs, Outputs);_newline       strErrCode = Outputs.GetProperty(&quot;Error Code&quot;);_newline       strErrMesg = Outputs.GetProperty(&quot;Error Message&quot;);_newline      }_newline      else_newline      {_newline       strErrCode = &quot;CANNOT_usEXECUTE&quot;;_newline       strErrMesg = &quot;Port out request is not in state of &apos;Donor Accept&apos; [current status: &quot; + strResCode + &quot;].&quot;;_newline      }_newline     }_newline    }_newline    if(&quot;OK&quot;!=strErrCode)_newline    {_newline//1.2_newline//1.1create a ticket_newline     psIp=TheApplication().NewPropertySet();_newline     psOp=TheApplication().NewPropertySet();_newline     psIp.SetProperty(&quot;Root Asset Id&quot;, strRootAssetId);_newline     psIp.SetProperty(&quot;Account Id&quot;,    strAccntId);_newline     psIp.SetProperty(&quot;TTNum&quot;,         strSRNum);_newline     psIp.SetProperty(&quot;Error Info&quot;,    &quot;PortOut Ticket:&quot; + strSRNum + &quot;; Error Code:&quot; + strErrCode + &quot;; Error Message:&quot;+strErrMesg);_newline     psIp.SetProperty(&quot;PhoneNumber&quot;,   strMSISDN);_newline     func_usCreateReportingTicket(psIp,psOp);_newline    }_newline   }_newline   else if(&quot;getstatus&quot;==strOperationType)_newline   {_newline    var _newline    bcActTempl = boSR.GetBusComp(&quot;Activity Plan&quot;);_newline    bcActTempl.SetViewMode(AllView);_newline    bcActTempl.ClearToQuery();_newline    bcActTempl.SetSearchExpr(&quot;[Template]=&apos;&quot; + strNameOfTemplate + &quot;&apos;&quot;);_newline    bcActTempl.ExecuteQuery(ForwardOnly);_newline    var isActTemplRec = bcActTempl.FirstRecord();_newline    if(isActTemplRec)_newline    {_newline//now query child activities and update their status based on child propertysets of inputs_newline     var psStatusDtl;_newline     var psStatusDtlCont = TheApplication().NewPropertySet();_newline     bcActTemplAct = boSR.GetBusComp(&quot;Activity Plan Action&quot;);_newline     bcActTemplAct.SetSortSpec(&quot;Description&quot;);_newline     bcActTemplAct.ActivateField(&quot;Description&quot;);_newline     bcActTemplAct.ActivateField(&quot;Comment&quot;);_newline     bcActTemplAct.ActivateField(&quot;Status&quot;);_newline     bcActTemplAct.ClearToQuery();_newline     bcActTemplAct.ExecuteQuery(ForwardOnly);_newline     var isRec = bcActTemplAct.FirstRecord();_newline     while(isRec)_newline     {_newline      actCode = bcActTemplAct.GetFieldValue(&quot;Description&quot;);_newline      strActComment = bcActTemplAct.GetFieldValue(&quot;Comment&quot;);_newline      strActStatus = bcActTemplAct.GetFieldValue(&quot;Status&quot;);_newline      strErrMesg = strErrMesg + actCode + &quot;:&quot; + strActStatus + &quot;[&quot; + strActComment + &quot;];\r&quot;;_newline_newline      if(&quot;Failed&quot;==strActStatus)_newline      {_newline       psStatusDtl = TheApplication().NewPropertySet(); psStatusDtl.SetType(&quot;DonerRejectData&quot;);_newline       psStatusDtl.SetProperty(&quot;Reason&quot;, strActComment); psStatusDtl.SetProperty(&quot;code&quot;, actCode);_newline       psStatusDtlCont.AddChild(psStatusDtl);_newline      }_newline      isRec = bcActTemplAct.NextRecord();_newline     }_newline     strErrCode = bcSR.GetFieldValue(&quot;Resolution Code&quot;);_newline     Inputs.AddChild(psStatusDtlCont);_newline     Inputs.SetProperty(&quot;TTId&quot;,strTTId);        _newline     Inputs.SetProperty(&quot;TT_usNumber&quot;,strSRNum);        _newline     Inputs.SetProperty(&quot;PhoneNumber&quot;,strMSISDN);_newline     Inputs.SetProperty(&quot;PortOutAcceptance&quot;,strErrCode);_newline_newline     func_usCreateResponse(Inputs,Outputs);_newline    }_newline    else_newline    {_newline     strErrCode = &quot;NO_usDETAILS_usAVAIALBLE&quot;;_newline     strErrMesg = &quot;Verification details for the port out request ticket not available.&quot;;_newline    }_newline   }_newline   else_newline   {_newline    strErrCode = &quot;INVALID_usOPERATION&quot;;_newline    strErrMesg = &quot;Invalid operation requested: &quot; + strOperationType;_newline   }_newline  }_newline }_newline Outputs.SetProperty(&quot;TTNumber&quot;, strSRNum);_newline Outputs.SetProperty(&quot;TTId&quot;,     strTTId);_newline Outputs.SetProperty(&quot;Error Code&quot;, strErrCode);_newline Outputs.SetProperty(&quot;Error Message&quot;, strErrMesg);_newline Outputs.SetProperty(&quot;SRStatus&quot;, strTicketStatus);//this is to be used to do further processing_newline bcActTemplAct = null;_newline bcActTempl = null;_newline bcOrder=null;_newline bcSR = null;_newline boSR = null;_newline psIp = null;_newline psOp = null;_newline}"
 Program_spcLanguage="JS"
 Name="func_usProcessTicket"
 Sequence="15"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-59RBF1"
 Parent_spcName="TM BS MNP Util"
 Parent_spcInactive="N"
 Inactive="N"
 Script="/*-------+------+--------+----------------------------------------------_newlineYYYYMMDD | Ver  | By     | Description of Change_newline---------+------+--------+----------------------------------------------_newline20131224 | 1.00 | PPB    | Function to process the ticket_newline20140217 | 1.1  | PPB    | Reporting ticket creation if execute fails_newline---------+------+--------+--------------------------------------------*/_newlinefunction func_usProcessTicket_usLASTGOOD_us20140227(Inputs, Outputs)_newline{_newline var boSR,bcSR,bcOrder,bcActTempl,bcActTemplAct;_newline var actCode=&quot;&quot;,actStatus=&quot;&quot;, strTicketSubStatus=&quot;&quot;, strTicketStatus=&quot;&quot;;_newline var strSRNum=&quot;&quot;, strTTId=&quot;&quot;, strNameOfTemplate=&quot;&quot;, strL1=&quot;&quot;, strL2=&quot;&quot;, strL3=&quot;&quot;, strAccntType=&quot;&quot;,strResCode=&quot;&quot;;_newline var strErrCode = &quot;&quot;, strErrMesg = &quot;&quot;, strActStatus = &quot;&quot;, strActComment = &quot;&quot;;_newline var strAccntId=&quot;&quot;, strRootAssetId=&quot;&quot;,strMSISDN=&quot;&quot;;_newline var strOperationType = Inputs.GetProperty(&quot;OperationType&quot;);_newline var psIp,psOp;_newline_newline boSR = TheApplication().GetBusObject(&quot;Service Request&quot;);_newline bcSR = boSR.GetBusComp(&quot;Service Request&quot;);_newline bcSR.SetViewMode(AllView);_newline bcSR.ActivateField(&quot;INS Product&quot;);_newline bcSR.ActivateField(&quot;INS Area&quot;);_newline bcSR.ActivateField(&quot;INS Sub-Area&quot;);_newline bcSR.ActivateField(&quot;Ticket Type&quot;);_newline bcSR.ActivateField(&quot;Account Id&quot;);_newline bcSR.ActivateField(&quot;Contact Id&quot;);_newline bcSR.ActivateField(&quot;Asset Id&quot;);_newline bcSR.ActivateField(&quot;Status&quot;);_newline bcSR.ActivateField(&quot;Sub-Status&quot;);_newline bcSR.ActivateField(&quot;Resolution Code&quot;);_newline bcSR.ActivateField(&quot;SR Number&quot;);_newline bcSR.ActivateField(&quot;Serial Number&quot;);_newline bcSR.ActivateField(&quot;Type&quot;);//account type B/R_newline_newline strSRNum = Inputs.GetProperty(&quot;TTNumber&quot;);_newline strTTId = Inputs.GetProperty(&quot;TTId&quot;);_newline strAccntType = Inputs.GetProperty(&quot;Account Type&quot;);_newline//Check existing non-closed ticket of same type for same asset._newline bcSR.InvokeMethod(&quot;SetAdminMode&quot;, &quot;TRUE&quot;);_newline bcSR.SetViewMode(AllView);_newline bcSR.ClearToQuery();_newline if(&quot;&quot;!=strSRNum)_newline  bcSR.SetSearchExpr(&quot;[SR Number]=&apos;&quot; + strSRNum + &quot;&apos;&quot;);_newline else_newline  bcSR.SetSearchExpr(&quot;[Id]=&apos;&quot; + strTTId + &quot;&apos;&quot;);_newline bcSR.ExecuteQuery(ForwardOnly);_newline if(!bcSR.FirstRecord())_newline {_newline  strSRNum   = &quot;&quot;;_newline  strErrCode = &quot;INVALID_usTTNum&quot;;_newline  strErrMesg = &quot;Ticket id / number provided is invalid.&quot;;_newline }_newline else_newline {_newline  strTTId = bcSR.GetFieldValue(&quot;Id&quot;);_newline  strSRNum = bcSR.GetFieldValue(&quot;SR Number&quot;);_newline  strMSISDN = bcSR.GetFieldValue(&quot;Serial Number&quot;);_newline  strTicketStatus = bcSR.GetFieldValue(&quot;Status&quot;);_newline  strTicketSubStatus = bcSR.GetFieldValue(&quot;Sub-Status&quot;);_newline  strL1 = bcSR.GetFieldValue(&quot;INS Product&quot;);_newline  strL2 = bcSR.GetFieldValue(&quot;INS Area&quot;);_newline  strL3 = bcSR.GetFieldValue(&quot;INS Sub-Area&quot;);_newline  strRootAssetId = bcSR.GetFieldValue(&quot;Asset Id&quot;);_newline  strAccntId   = bcSR.GetFieldValue(&quot;Account Id&quot;);_newline  strAccntType = bcSR.GetFieldValue(&quot;Type&quot;);_newline  strResCode =  bcSR.GetFieldValue(&quot;Resolution Code&quot;);_newline  if(&quot;&quot;==strAccntType) _newline   strAccntType=&quot;Residential&quot;;_newline  strNameOfTemplate = strL1 + strL2 + strL3 + &quot;_us&quot; + strAccntType;_newline//check if this really is a MNP ticket _newline  if(&quot;Request&quot; != strL1 || &quot;MNP&quot; != strL2 || &quot;Port Verification&quot; != strL3)_newline  {_newline   strErrCode =  &quot;INVALID_usTT&quot;;_newline   strErrMesg = &quot;Ticket is not a MNP ticket.&quot;;_newline  }_newline  else_newline  {_newline   bcOrder=boSR.GetBusComp(&quot;Order Entry - Orders&quot;);_newline   bcOrder.ActivateField(&quot;Order Number&quot;);_newline   bcOrder.SetViewMode(AllView);//no need to clearquery and set search spec_newline   if(&quot;cancel&quot;==strOperationType)_newline   {_newline    bcOrder.ClearToQuery();_newline    bcOrder.ExecuteQuery(ForwardOnly);_newline    if(bcOrder.FirstRecord())_newline    {_newline     strErrCode = &quot;ALREADY_usEXECUTED&quot;;_newline     strErrMesg = &quot;Order &quot; + bcOrder.GetFieldValue(&quot;Order Number&quot;) + &quot; already created for the port out request.&quot;;_newline    }_newline    else_newline    {_newline     bcSR.SetFieldValue(&quot;Status&quot;, &quot;Solved&quot;);_newline     bcSR.SetFieldValue(&quot;Sub-Status&quot;, &quot;Cancelled&quot;);_newline     bcSR.WriteRecord();_newline     strOperationType = bcSR.GetFieldValue(&quot;Status&quot;);_newline     strErrCode = &quot;OK&quot;;_newline     strErrMesg = &quot;Port Out request successfully cancelled.&quot;;_newline    }_newline   }_newline   else if(&quot;execute&quot;==strOperationType)_newline   {//donot care about ticket status/resolution code as per SA Team (Himanshu)_newline//check if an order is already associated with this SR_newline    bcOrder.ClearToQuery();_newline    bcOrder.ExecuteQuery(ForwardOnly);_newline    if(bcOrder.FirstRecord())_newline    {_newline     strErrCode = &quot;ALREADY_usEXECUTED&quot;;_newline     strErrMesg = &quot;Order &quot; + bcOrder.GetFieldValue(&quot;Order Number&quot;) + &quot; already created for the port out request.&quot;;_newline    }_newline    else _newline    {_newline     if(&quot;Cancelled&quot;==strTicketSubStatus)_newline     {_newline      strErrCode = &quot;CANNOT_usEXECUTE&quot;;_newline      strErrMesg = &quot;Port out request has been already cancelled.&quot;;_newline     }_newline     else_newline     { _newline      if(&quot;Donor Accept&quot;==strResCode)_newline      {_newline       Inputs.SetProperty(&quot;Account Id&quot;, strAccntId);_newline       Inputs.SetProperty(&quot;Root Asset Id&quot;, strRootAssetId);_newline       func_usExecutePortOut(Inputs, Outputs);_newline       strErrCode = Outputs.GetProperty(&quot;Error Code&quot;);_newline       strErrMesg = Outputs.GetProperty(&quot;Error Message&quot;);_newline       if(&quot;OK&quot;!=strErrCode)_newline       {//create a ticket_newline        psIp=TheApplication().NewPropertySet();_newline        psOp=TheApplication().NewPropertySet();_newline        psIp.SetProperty(&quot;Root Asset Id&quot;, strRootAssetId);_newline        psIp.SetProperty(&quot;Account Id&quot;,    strAccntId);_newline        psIp.SetProperty(&quot;TTNum&quot;,         strSRNum);_newline        psIp.SetProperty(&quot;Error Info&quot;,    &quot;Error Code:&quot; + strErrCode + &quot;; Error Message:&quot;+strErrMesg);_newline        psIp.SetProperty(&quot;PhoneNumber&quot;,   strMSISDN);_newline        func_usCreateReportingTicket(psIp,psOp);_newline       }_newline      }_newline      else_newline      {_newline       strErrCode = &quot;CANNOT_usEXECUTE&quot;;_newline       strErrMesg = &quot;Port out request is not in state of &apos;Donor Accept&apos; [current status: &quot; + strResCode + &quot;].&quot;;_newline      }_newline     }_newline    }_newline   }_newline   else if(&quot;getstatus&quot;==strOperationType)_newline   {_newline    var _newline    bcActTempl = boSR.GetBusComp(&quot;Activity Plan&quot;);_newline    bcActTempl.SetViewMode(AllView);_newline    bcActTempl.ClearToQuery();_newline    bcActTempl.SetSearchExpr(&quot;[Template]=&apos;&quot; + strNameOfTemplate + &quot;&apos;&quot;);_newline    bcActTempl.ExecuteQuery(ForwardOnly);_newline    var isActTemplRec = bcActTempl.FirstRecord();_newline    if(isActTemplRec)_newline    {_newline//now query child activities and update their status based on child propertysets of inputs_newline     var psStatusDtl;_newline     var psStatusDtlCont = TheApplication().NewPropertySet();_newline     bcActTemplAct = boSR.GetBusComp(&quot;Activity Plan Action&quot;);_newline     bcActTemplAct.SetSortSpec(&quot;Description&quot;);_newline     bcActTemplAct.ActivateField(&quot;Description&quot;);_newline     bcActTemplAct.ActivateField(&quot;Comment&quot;);_newline     bcActTemplAct.ActivateField(&quot;Status&quot;);_newline     bcActTemplAct.ClearToQuery();_newline     bcActTemplAct.ExecuteQuery(ForwardOnly);_newline     var isRec = bcActTemplAct.FirstRecord();_newline     while(isRec)_newline     {_newline      actCode = bcActTemplAct.GetFieldValue(&quot;Description&quot;);_newline      strActComment = bcActTemplAct.GetFieldValue(&quot;Comment&quot;);_newline      strActStatus = bcActTemplAct.GetFieldValue(&quot;Status&quot;);_newline      strErrMesg = strErrMesg + actCode + &quot;:&quot; + strActStatus + &quot;[&quot; + strActComment + &quot;];\r&quot;;_newline_newline      if(&quot;Failed&quot;==strActStatus)_newline      {_newline       psStatusDtl = TheApplication().NewPropertySet(); psStatusDtl.SetType(&quot;DonerRejectData&quot;);_newline       psStatusDtl.SetProperty(&quot;Reason&quot;, strActComment); psStatusDtl.SetProperty(&quot;code&quot;, actCode);_newline       psStatusDtlCont.AddChild(psStatusDtl);_newline      }_newline      isRec = bcActTemplAct.NextRecord();_newline     }_newline     strErrCode = bcSR.GetFieldValue(&quot;Resolution Code&quot;);_newline     Inputs.AddChild(psStatusDtlCont);_newline     Inputs.SetProperty(&quot;TTId&quot;,strTTId);        _newline     Inputs.SetProperty(&quot;TT_usNumber&quot;,strSRNum);        _newline     Inputs.SetProperty(&quot;PhoneNumber&quot;,strMSISDN);_newline     Inputs.SetProperty(&quot;PortOutAcceptance&quot;,strErrCode);_newline_newline     func_usCreateResponse(Inputs,Outputs);_newline    }_newline    else_newline    {_newline     strErrCode = &quot;NO_usDETAILS_usAVAIALBLE&quot;;_newline     strErrMesg = &quot;Verification details for the port out request ticket not available.&quot;;_newline    }_newline   }_newline   else_newline   {_newline    strErrCode = &quot;INVALID_usOPERATION&quot;;_newline    strErrMesg = &quot;Invalid operation requested: &quot; + strOperationType;_newline   }_newline  }_newline }_newline Outputs.SetProperty(&quot;TTNumber&quot;, strSRNum);_newline Outputs.SetProperty(&quot;TTId&quot;,     strTTId);_newline Outputs.SetProperty(&quot;Error Code&quot;, strErrCode);_newline Outputs.SetProperty(&quot;Error Message&quot;, strErrMesg);_newline Outputs.SetProperty(&quot;SRStatus&quot;, strTicketStatus);//this is to be used to do further processing_newline bcActTemplAct = null;_newline bcActTempl = null;_newline bcOrder=null;_newline bcSR = null;_newline boSR = null;_newline psIp = null;_newline psOp = null;_newline}"
 Program_spcLanguage="JS"
 Name="func_usProcessTicket_usLASTGOOD_us20140227"
 Sequence="2"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-59RBF1"
 Parent_spcName="TM BS MNP Util"
 Parent_spcInactive="N"
 Inactive="N"
 Script="/*-------+------+--------+----------------------------------------------_newlineYYYYMMDD | Ver  | By     | Description of Change_newline---------+------+--------+----------------------------------------------_newline20140201 | 1.00 | PPB    | First version_newline20140206 | 1.10 | PPB    | Processing for NP_usDEACTIVATED_newline20140213 | 1.20 | PPB    | Mark original order OLI to Open again :-)_newline20140217 | 1.3  | PPB    | Set processed flag = y on root OLI_newline20140427 | 1.4  | PPB    | set NRH=Y_newline---------+------+--------+--------------------------------------------*/_newlinefunction func_usProcess_usMNP(Inputs, Outputs)_newline{_newline var strErrCode = &quot;OK&quot;, strErrMesg = &quot;Record processed.&quot;;_newline var strROLIStatus=&quot;&quot;;_newline var strRecordType    = Inputs.GetProperty(&quot;RecordType&quot;);//main batch type_newline var strRecordSubType = Inputs.GetProperty(&quot;RecordSubType&quot;);//child record type_newline var strNPOLIId       = Inputs.GetProperty(&quot;RecordRef&quot;);//item id from the original order if subtype=NP_usACK_newline var strRecordRef     = &quot;NP_usPORTIN_us&quot; + strNPOLIId;_newline var strOrderId       = Inputs.GetProperty(&quot;OrderId&quot;);_newline var strNewOrderId    = &quot;&quot;, strNewOrderNum    = &quot;&quot;;_newline var strProdName      = &quot;&quot;;_newline var isPortInOLIComplete = false;_newline var strProdNamePortIn= &quot;Mobile Port-In&quot;;_newline var strAID_usProm, strAID_usROLI, strAID_usOLI;//Asset Integration Id for Promotion, Root OLI and the affected OLI_newline var strROLIId        = &quot;&quot;;//root OLI Id of the OLI for which update has been receieved_newline var strPromOLIId     = &quot;&quot;;//promotion OLI Id for the selected root_newline var strTempNum, strPortInNum;_newline var isRec,isAssetReady;_newline var strCIPId=&quot;&quot;,strContactId=&quot;&quot;,strAccntId=&quot;&quot;;_newline var boOrder, bcOrder, bcOLI, boAsset,bcAsset,bsUtil,psIp,psOp,bcXA;_newline try_newline {_newline  if(&quot;PortInAckn&quot;==strRecordType)_newline  {//if not created already then create assets for original order on NP_us*_newline   bsUtil = TheApplication().GetService(&quot;Workflow Process Manager&quot;);//this will be used multiple times hence up here_newline   boOrder = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);_newline   bcOrder = boOrder.GetBusComp(&quot;Order Entry - Orders&quot;);_newline   bcOrder.InvokeMethod(&quot;SetAdminMode&quot;, &quot;TRUE&quot;);_newline   bcOrder.ActivateField(&quot;Status&quot;);_newline   bcOrder.ActivateField(&quot;Order Number&quot;);_newline   bcOrder.ActivateField(&quot;Contact Id&quot;);_newline   bcOrder.ActivateField(&quot;Billing Profile Id&quot;);_newline   bcOrder.ActivateField(&quot;Back Office Order Number&quot;);_newline   bcOrder.ActivateField(&quot;Charged Flag&quot;);_newline   bcOrder.SetViewMode(AllView);_newline//check if already processed using reference link to num-change order_newline   bcOrder.ClearToQuery();_newline   bcOrder.SetSearchExpr(&quot;[Back Office Order Number]=&apos;&quot; + strRecordRef + &quot;&apos;&quot;);_newline   bcOrder.ExecuteQuery(ForwardOnly);_newline   if(bcOrder.FirstRecord())_newline   {_newline    strOrderId = bcOrder.GetFieldValue(&quot;Id&quot;);_newline    strErrCode = &quot;ALREADY_usPROCESSED&quot;;_newline    strErrMesg = &quot;Number change order already created.&quot;;_newline   }_newline   else_newline   {_newline//first get the Asset Integration Id and root OLI for the portin OLI_newline    bcOrder.ClearToQuery();_newline    bcOrder.SetSearchExpr(&quot;[Id]=&apos;&quot; + strOrderId + &quot;&apos;&quot;);_newline    bcOrder.ExecuteQuery(ForwardOnly);_newline    if(!bcOrder.FirstRecord())_newline    {_newline     strErrCode = &quot;ORDER_usNOT_usFOUND&quot;;_newline     strErrMesg = &quot;Order with Id = &quot; + strOrderId + &quot; not found.&quot;;_newline    }_newline    else_newline    {_newline     if(&quot;Complete&quot;==bcOrder.GetFieldValue(&quot;Status&quot;))_newline      isPortInOLIComplete = true;_newline     bcOLI   = boOrder.GetBusComp(&quot;Order Entry - Line Items&quot;);_newline     bcOLI.InvokeMethod(&quot;SetAdminMode&quot;, &quot;TRUE&quot;);_newline     bcOLI.SetViewMode(AllView);_newline     bcOLI.ActivateField(&quot;Change Reason&quot;);_newline     bcOLI.ActivateField(&quot;Order Number&quot;);_newline     bcOLI.ActivateField(&quot;Product&quot;);_newline     bcOLI.ActivateField(&quot;Root Order Item Id&quot;);_newline     bcOLI.ActivateField(&quot;Parent Order Item Id&quot;);_newline     bcOLI.ActivateField(&quot;Product Type Code&quot;);//stores Promotion or Product_newline     bcOLI.ActivateField(&quot;Action Code&quot;);_newline     bcOLI.ActivateField(&quot;Status&quot;);_newline     bcOLI.ActivateField(&quot;Account Id&quot;);_newline     bcOLI.ActivateField(&quot;Billing Profile Id&quot;);_newline     bcOLI.ActivateField(&quot;Contact Id&quot;);_newline     bcOLI.ActivateField(&quot;Service Id&quot;);_newline     bcOLI.ActivateField(&quot;Previous Service Id&quot;);_newline     bcOLI.ActivateField(&quot;Asset Integration Id&quot;);_newline     bcOLI.ActivateField(&quot;Product&quot;);_newline     bcOLI.ActivateField(&quot;Processed Flag&quot;);_newline     bcOLI.ClearToQuery();_newline     bcOLI.SetSearchExpr(&quot;[Id]=&apos;&quot; + strNPOLIId + &quot;&apos;&quot;);_newline     bcOLI.ExecuteQuery(ForwardOnly);_newline     if(!bcOLI.FirstRecord())_newline     {_newline      strErrCode = &quot;OLI_usNOT_usFOUND&quot;;_newline      strErrMesg = &quot;Order Item with Id = &quot; + strNPOLIId + &quot; not found.&quot;;_newline     }_newline     else_newline     {//got the OLI_newline      strProdName = bcOLI.GetFieldValue(&quot;Product&quot;);_newline      strROLIId   = bcOLI.GetFieldValue(&quot;Root Order Item Id&quot;);_newline      strAID_usOLI  = bcOLI.GetFieldValue(&quot;Asset Integration Id&quot;);_newline      if(strProdNamePortIn != strProdName)_newline      {_newline       strErrCode = &quot;PRODUCT_usNOT_usFOUND&quot;;_newline       strErrMesg = &quot;Order Item with Id = &quot; + strNPOLIId + &quot; is for product &quot; + strProdName + &quot;, but needs to be for &quot; + strProdNamePortIn;_newline      }_newline      else_newline      {//product ok, now get Asset Integration Id of promotion and root OLI_newline       strROLIId    = bcOLI.GetFieldValue(&quot;Root Order Item Id&quot;);_newline       strPortInNum = bcOLI.GetFieldValue(&quot;Service Id&quot;);_newline       if(&quot;Complete&quot;==bcOLI.GetFieldValue(&quot;Status&quot;))_newline        isPortInOLIComplete = true;_newline//query ROLI_newline       bcOLI.ClearToQuery();_newline       bcOLI.SetSearchExpr(&quot;[Id]=&apos;&quot; + strROLIId + &quot;&apos;&quot;);_newline       bcOLI.ExecuteQuery(ForwardOnly);_newline       if(bcOLI.FirstRecord())_newline       {_newline        strROLIStatus= bcOLI.GetFieldValue(&quot;Status&quot;);_newline        strAID_usROLI  = bcOLI.GetFieldValue(&quot;Asset Integration Id&quot;);_newline        strAID_usProm  = bcOLI.GetFieldValue(&quot;Prod Prom Instance Id&quot;);_newline        strAccntId   = bcOLI.GetFieldValue(&quot;Account Id&quot;);_newline        strTempNum   = bcOLI.GetFieldValue(&quot;Service Id&quot;);_newline        strContactId = bcOLI.GetFieldValue(&quot;Contact Id&quot;);_newline        strCIPId = bcOLI.GetFieldValue(&quot;Billing Profile Id&quot;);_newline//check assets created for the Root OLI or not_newline        boAsset = TheApplication().GetBusObject(&quot;Asset Management&quot;);_newline        bcAsset = boAsset.GetBusComp(&quot;Asset Mgmt - Asset&quot;);_newline        bcAsset.SetViewMode(AllView);_newline        bcAsset.SetSearchExpr(&quot;[Integration Id]=&apos;&quot; + strAID_usROLI + &quot;&apos;&quot;);_newline        bcAsset.ExecuteQuery(ForwardOnly);_newline        isAssetReady=bcAsset.FirstRecord();_newline        if(!isAssetReady)_newline        {_newline         if(&quot;Complete&quot;==strROLIStatus)_newline         {_newline//if ROLI is complete process assets right here :-) also for promotion of the original order_newline          psIp = TheApplication().NewPropertySet();_newline          psOp = TheApplication().NewPropertySet();_newline          psIp.SetProperty(&quot;ProcessName&quot;, &quot;SIS OM Apply Completed Service Order Line Item to Service Profile&quot;);_newline          psIp.SetProperty(&quot;Order Header Id&quot;,      strOrderId);_newline          psIp.SetProperty(&quot;Root Id&quot;,              strROLIId);_newline          psIp.SetProperty(&quot;Root Order Item Id&quot;,   strROLIId);_newline          psIp.SetProperty(&quot;Asset Integration Id&quot;, strAID_usROLI);_newline          bsUtil.InvokeMethod(&quot;RunProcess&quot;, psIp, psOp);_newline//promotion asset gets created automatically because OSM sends its completion independently_newline//check asset again_newline          bcAsset.SetSearchExpr(&quot;[Integration Id]=&apos;&quot; + strAID_usROLI + &quot;&apos;&quot;);_newline          bcAsset.ExecuteQuery(ForwardOnly);_newline          isAssetReady=bcAsset.FirstRecord();_newline          if(!isAssetReady)_newline          {_newline           strErrCode = &quot;FAILED&quot;;_newline           strErrMesg = &quot;Assets for Root Order Item could not be created.&quot;;_newline          }_newline          else_newline          {//1.2 below_newline           bcOLI.ClearToQuery();_newline           bcOLI.SetSearchExpr(&quot;[Root Order Item Id]=&apos;&quot; + strROLIId + &quot;&apos;&quot;);_newline           bcOLI.ExecuteQuery(ForwardOnly);_newline           isRec=bcOLI.FirstRecord();_newline           while(isRec)_newline           {_newline            if(&quot;Complete&quot;==bcOLI.GetFieldValue(&quot;Status&quot;))_newline            {_newline             if(strROLIId == bcOLI.GetFieldValue(&quot;Id&quot;) &amp;&amp; &quot;Y&quot;!= bcOLI.GetFieldValue(&quot;Processed Flag&quot;)) _newline             {_newline              bcOLI.SetFieldValue(&quot;Processed Flag&quot;,&quot;Y&quot;);//1.3_newline              bcOLI.WriteRecord();_newline             }_newline             if(!isPortInOLIComplete)_newline             {_newline              bcOLI.SetFieldValue(&quot;Status&quot;,&quot;Open&quot;);_newline              bcOLI.WriteRecord();_newline             }_newline            }_newline            isRec=bcOLI.NextRecord();_newline           }_newline          }_newline         }_newline         else_newline         {//if ROLI not complete set error as WAIT for later processing_newline          strErrCode = &quot;WAIT&quot;;_newline          strErrMesg = &quot;Assets for Root Order Item not yet created, since OLI is not complete:&quot; + strAID_usROLI;_newline         }_newline        }_newline        if(&quot;OK&quot;==strErrCode &amp;&amp; &quot;NP_usDEACTIVATED&quot;==strRecordSubType)_newline        {_newline//create note in BC: SHM Order Notes - External, to refer the original order in the change number order and vice versa_newline//modify order and then set the new number_newline         psIp = TheApplication().NewPropertySet();_newline         psOp = TheApplication().NewPropertySet();_newline         psIp.SetProperty(&quot;AssetIntegrationId&quot;, strAID_usROLI);_newline         psIp.SetProperty(&quot;AccountId&quot;,strAccntId);_newline         psIp.SetProperty(&quot;ProcessName&quot;, &quot;SISOMModifyWebService-Order&quot;);_newline         bsUtil.InvokeMethod(&quot;RunProcess&quot;, psIp, psOp);_newline         strNewOrderId=psOp.GetProperty(&quot;ActiveDocumentId&quot;);_newline//query order, set new service id_newline         bcOrder.ClearToQuery();_newline         bcOrder.SetSearchExpr(&quot;[Id]=&apos;&quot; + strNewOrderId + &quot;&apos;&quot;);_newline         bcOrder.ExecuteQuery(ForwardOnly);_newline         if(!bcOrder.FirstRecord())_newline         {_newline          strErrCode = &quot;CHG_usNUM_usORDER_usNOT_usCREATED&quot;;_newline          strErrMesg = &quot;Change number order could not be created.&quot;;_newline         }_newline         else_newline         {_newline          strNewOrderNum=bcOrder.GetFieldValue(&quot;Order Number&quot;);_newline          bcOrder.SetFieldValue(&quot;Back Office Order Number&quot;, strRecordRef);_newline          bcOrder.SetFieldValue(&quot;Billing Profile Id&quot;,strCIPId);_newline          bcOrder.SetFieldValue(&quot;Contact Id&quot;,strContactId);_newline          bcOrder.SetFieldValue(&quot;Charged Flag&quot;,&quot;Y&quot;);_newline          bcOrder.WriteRecord();_newline          bcOLI.ClearToQuery();_newline          bcOLI.SetSearchExpr(&quot;[Service Id]=&apos;&quot; + strTempNum + &quot;&apos;&quot;);_newline          bcOLI.ExecuteQuery(ForwardOnly);_newline          isRec=bcOLI.FirstRecord();_newline          if(isRec)//not any found_newline          {_newline           while(isRec)_newline           {_newline            bcOLI.SetFieldValue(&quot;Service Id&quot;,strPortInNum);_newline            bcOLI.SetFieldValue(&quot;Action Code&quot;,&quot;Update&quot;);_newline            if(&quot;&quot;==bcOLI.GetFieldValue(&quot;Parent Order Item Id&quot;))_newline            {_newline             bcOLI.SetFieldValue(&quot;Change Reason&quot;,&quot;Port In&quot;);_newline//1.4_newline             var NRHValue=&quot;&quot;;_newline             bcXA=boOrder.GetBusComp(&quot;Order Item XA&quot;);_newline             bcXA.SetViewMode(AllView);_newline             bcXA.ActivateField(&quot;Text Value&quot;);_newline             bcXA.ActivateField(&quot;Action Code&quot;);_newline             bcXA.ClearToQuery();_newline             bcXA.SetSearchExpr(&quot;[Name]=&apos;NRH&apos;&quot;);_newline             bcXA.ExecuteQuery(ForwardOnly);_newline             if(bcXA.FirstRecord())_newline             {_newline              NRHValue = bcXA.GetFieldValue(&quot;Text Value&quot;);_newline              bcXA.SetFieldValue(&quot;Action Code&quot;,&quot;Update&quot;);_newline              if(&quot;N&quot;==NRHValue)_newline               bcXA.SetFieldValue(&quot;Text Value&quot;,&quot;Y&quot;);_newline              else_newline               bcXA.SetFieldValue(&quot;Text Value&quot;,&quot;N&quot;);_newline              bcXA.WriteRecord();_newline             }_newline            }_newline            bcOLI.WriteRecord();_newline            isRec=bcOLI.NextRecord();_newline           }_newline//now create a note mentioning new order number under the orig order record_newline           func_usCreateOrderNote(strOrderId,&quot;&quot;,&quot;Change Number Order:&quot; + strNewOrderNum);_newline//submit_newline           bcOrder.WriteRecord();_newline           psIp = TheApplication().NewPropertySet();_newline           psOp = TheApplication().NewPropertySet();_newline           psIp.SetProperty(&quot;RowId&quot;, strNewOrderId);_newline           psIp.SetProperty(&quot;Fulfillment Mode&quot;,&quot;Deliver&quot;);_newline           psIp.SetProperty(&quot;RenewLock&quot;,&quot;N&quot;);           //[JUHIV][20032014][Defect8546:Extend reservation should not be called for MNP Change MSISDN]_newline           psIp.SetProperty(&quot;ProcessName&quot;, &quot;SISOMBillingSubmitOrderWebService&quot;);_newline           bsUtil.InvokeMethod(&quot;RunProcess&quot;, psIp, psOp);_newline           strErrCode = &quot;OK&quot;;_newline          }_newline          else_newline          {_newline           strErrCode = &quot;CHG_usNUM_usOLI_usNOT_usCREATED&quot;;_newline           strErrMesg = &quot;Change number order item could not be created.&quot;;_newline          }_newline         }_newline        }_newline       }_newline       else_newline       {_newline        strErrCode = &quot;ROOT_usOLI_usNOT_usFOUND&quot;;_newline        strErrMesg = &quot;Root Order Item for item with Id = &quot; + strNPOLIId + &quot; not found.&quot;;_newline       }_newline      }_newline     }_newline    }_newline   }_newline  }_newline  else_newline  {_newline   strErrCode = &quot;UNHANDLED_usTYPE&quot;;_newline   strErrMesg = &quot;This type of record is not supported:&quot; + strRecordType + &quot;:&quot; + strRecordSubType;_newline  }_newline }_newline catch(e)_newline {_newline  strErrCode = &quot;ERROR&quot;;_newline  strErrMesg = e.errCode + &quot;:&quot; + e.errText;_newline }_newline finally_newline {_newline  Outputs.SetProperty(&quot;Order Id&quot;,    strOrderId);_newline  Outputs.SetProperty(&quot;Error Code&quot;,    strErrCode);_newline  Outputs.SetProperty(&quot;Error Message&quot;, strErrMesg);_newline  boAsset=null;_newline  bcAsset=null;_newline  boOrder=null;_newline  bcOrder=null;_newline  bcXA=null;_newline  bcOLI=null;_newline  bsUtil=null;_newline  psIp=null;_newline  psOp=null;_newline  return CancelOperation;_newline }_newline}"
 Program_spcLanguage="JS"
 Name="func_usProcess_usMNP"
 Sequence="1"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-59RBF1"
 Parent_spcName="TM BS MNP Util"
 Parent_spcInactive="N"
 Inactive="N"
 Script="/*-------+------+--------+----------------------------------------------_newlineYYYYMMDD | Ver  | By     | Description of Change_newline---------+------+--------+----------------------------------------------_newline20140201 | 1.00 | PPB    | First version_newline20140206 | 1.10 | PPB    | Processing for NP_usDEACTIVATED_newline20140213 | 1.20 | PPB    | Mark original order OLI to Open again :-)_newline20140217 | 1.3  | PPB    | Set processed flag = y on root OLI_newline---------+------+--------+--------------------------------------------*/_newlinefunction func_usProcess_usMNP_usLASTGOOD_us20140227(Inputs, Outputs)_newline{_newline var strErrCode = &quot;OK&quot;, strErrMesg = &quot;Record processed.&quot;;_newline var strROLIStatus=&quot;&quot;;_newline var strRecordType    = Inputs.GetProperty(&quot;RecordType&quot;);//main batch type_newline var strRecordSubType = Inputs.GetProperty(&quot;RecordSubType&quot;);//child record type_newline var strNPOLIId       = Inputs.GetProperty(&quot;RecordRef&quot;);//item id from the original order if subtype=NP_usACK_newline var strRecordRef     = &quot;NP_usPORTIN_us&quot; + strNPOLIId;_newline var strOrderId       = Inputs.GetProperty(&quot;OrderId&quot;);_newline var strNewOrderId    = &quot;&quot;, strNewOrderNum    = &quot;&quot;;_newline var strProdName      = &quot;&quot;;_newline var strProdNamePortIn= &quot;Mobile Port-In&quot;;_newline var strAID_usProm, strAID_usROLI, strAID_usOLI;//Asset Integration Id for Promotion, Root OLI and the affected OLI_newline var strROLIId        = &quot;&quot;;//root OLI Id of the OLI for which update has been receieved_newline var strPromOLIId     = &quot;&quot;;//promotion OLI Id for the selected root_newline var strTempNum, strPortInNum;_newline var isRec,isAssetReady;_newline var strCIPId=&quot;&quot;,strContactId=&quot;&quot;,strAccntId=&quot;&quot;;_newline var boOrder, bcOrder, bcOLI, boAsset,bcAsset,bsUtil,psIp,psOp;_newline try_newline {_newline  if(&quot;PortInAckn&quot;==strRecordType)_newline  {//if not created already then create assets for original order on NP_us*_newline   bsUtil = TheApplication().GetService(&quot;Workflow Process Manager&quot;);//this will be used multiple times hence up here_newline   boOrder = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);_newline   bcOrder = boOrder.GetBusComp(&quot;Order Entry - Orders&quot;);_newline   bcOrder.ActivateField(&quot;Order Number&quot;);_newline   bcOrder.ActivateField(&quot;Contact Id&quot;);_newline   bcOrder.ActivateField(&quot;Billing Profile Id&quot;);_newline   bcOrder.ActivateField(&quot;Back Office Order Number&quot;);_newline   bcOrder.ActivateField(&quot;Charged Flag&quot;);_newline   bcOrder.SetViewMode(AllView);_newline//check if already processed using reference link to num-change order_newline   bcOrder.ClearToQuery();_newline   bcOrder.SetSearchExpr(&quot;[Back Office Order Number]=&apos;&quot; + strRecordRef + &quot;&apos;&quot;);_newline   bcOrder.ExecuteQuery(ForwardOnly);_newline   if(bcOrder.FirstRecord())_newline   {_newline    strOrderId = bcOrder.GetFieldValue(&quot;Id&quot;);_newline    strErrCode = &quot;ALREADY_usPROCESSED&quot;;_newline    strErrMesg = &quot;Number change order already created.&quot;;_newline   }_newline   else_newline   {_newline//first get the Asset Integration Id and root OLI for the portin OLI_newline    bcOrder.ClearToQuery();_newline    bcOrder.SetSearchExpr(&quot;[Id]=&apos;&quot; + strOrderId + &quot;&apos;&quot;);_newline    bcOrder.ExecuteQuery(ForwardOnly);_newline    if(!bcOrder.FirstRecord())_newline    {_newline     strErrCode = &quot;ORDER_usNOT_usFOUND&quot;;_newline     strErrMesg = &quot;Order with Id = &quot; + strOrderId + &quot; not found.&quot;;_newline    }_newline    else_newline    {_newline     bcOLI   = boOrder.GetBusComp(&quot;Order Entry - Line Items&quot;);_newline     bcOLI.SetViewMode(AllView);_newline     bcOLI.ActivateField(&quot;Change Reason&quot;);_newline     bcOLI.ActivateField(&quot;Order Number&quot;);_newline     bcOLI.ActivateField(&quot;Product&quot;);_newline     bcOLI.ActivateField(&quot;Root Order Item Id&quot;);_newline     bcOLI.ActivateField(&quot;Parent Order Item Id&quot;);_newline     bcOLI.ActivateField(&quot;Product Type Code&quot;);//stores Promotion or Product_newline     bcOLI.ActivateField(&quot;Action Code&quot;);_newline     bcOLI.ActivateField(&quot;Status&quot;);_newline     bcOLI.ActivateField(&quot;Account Id&quot;);_newline     bcOLI.ActivateField(&quot;Billing Profile Id&quot;);_newline     bcOLI.ActivateField(&quot;Contact Id&quot;);_newline     bcOLI.ActivateField(&quot;Service Id&quot;);_newline     bcOLI.ActivateField(&quot;Previous Service Id&quot;);_newline     bcOLI.ActivateField(&quot;Asset Integration Id&quot;);_newline     bcOLI.ActivateField(&quot;Product&quot;);_newline     bcOLI.ActivateField(&quot;Processed Flag&quot;);_newline     bcOLI.ClearToQuery();_newline     bcOLI.SetSearchExpr(&quot;[Id]=&apos;&quot; + strNPOLIId + &quot;&apos;&quot;);_newline     bcOLI.ExecuteQuery(ForwardOnly);_newline     if(!bcOLI.FirstRecord())_newline     {_newline      strErrCode = &quot;OLI_usNOT_usFOUND&quot;;_newline      strErrMesg = &quot;Order Item with Id = &quot; + strNPOLIId + &quot; not found.&quot;;_newline     }_newline     else_newline     {//got the OLI_newline      strProdName = bcOLI.GetFieldValue(&quot;Product&quot;);_newline      strROLIId   = bcOLI.GetFieldValue(&quot;Root Order Item Id&quot;);_newline      strAID_usOLI  = bcOLI.GetFieldValue(&quot;Asset Integration Id&quot;);_newline      if(strProdNamePortIn != strProdName)_newline      {_newline       strErrCode = &quot;PRODUCT_usNOT_usFOUND&quot;;_newline       strErrMesg = &quot;Order Item with Id = &quot; + strNPOLIId + &quot; is for product &quot; + strProdName + &quot;, but needs to be for &quot; + strProdNamePortIn;_newline      }_newline      else_newline      {//product ok, now get Asset Integration Id of promotion and root OLI_newline       strROLIId    = bcOLI.GetFieldValue(&quot;Root Order Item Id&quot;);_newline       strPortInNum = bcOLI.GetFieldValue(&quot;Service Id&quot;);_newline//query ROLI_newline       bcOLI.ClearToQuery();_newline       bcOLI.SetSearchExpr(&quot;[Id]=&apos;&quot; + strROLIId + &quot;&apos;&quot;);_newline       bcOLI.ExecuteQuery(ForwardOnly);_newline       if(bcOLI.FirstRecord())_newline       {_newline        strROLIStatus= bcOLI.GetFieldValue(&quot;Status&quot;);_newline        strAID_usROLI  = bcOLI.GetFieldValue(&quot;Asset Integration Id&quot;);_newline        strAID_usProm  = bcOLI.GetFieldValue(&quot;Prod Prom Instance Id&quot;);_newline        strAccntId   = bcOLI.GetFieldValue(&quot;Account Id&quot;);_newline        strTempNum   = bcOLI.GetFieldValue(&quot;Service Id&quot;);_newline        strContactId = bcOLI.GetFieldValue(&quot;Contact Id&quot;);_newline        strCIPId = bcOLI.GetFieldValue(&quot;Billing Profile Id&quot;);_newline//check assets created for the Root OLI or not_newline        boAsset = TheApplication().GetBusObject(&quot;Asset Management&quot;);_newline        bcAsset = boAsset.GetBusComp(&quot;Asset Mgmt - Asset&quot;);_newline        bcAsset.SetViewMode(AllView);_newline        bcAsset.SetSearchExpr(&quot;[Integration Id]=&apos;&quot; + strAID_usROLI + &quot;&apos;&quot;);_newline        bcAsset.ExecuteQuery(ForwardOnly);_newline        isAssetReady=bcAsset.FirstRecord();_newline        if(!isAssetReady)_newline        {_newline         if(&quot;Complete&quot;==strROLIStatus)_newline         {_newline//if ROLI is complete process assets right here :-) also for promotion of the original order_newline          psIp = TheApplication().NewPropertySet();_newline          psOp = TheApplication().NewPropertySet();_newline          psIp.SetProperty(&quot;ProcessName&quot;, &quot;SIS OM Apply Completed Service Order Line Item to Service Profile&quot;);_newline          psIp.SetProperty(&quot;Order Header Id&quot;,      strOrderId);_newline          psIp.SetProperty(&quot;Root Id&quot;,              strROLIId);_newline          psIp.SetProperty(&quot;Root Order Item Id&quot;,   strROLIId);_newline          psIp.SetProperty(&quot;Asset Integration Id&quot;, strAID_usROLI);_newline          bsUtil.InvokeMethod(&quot;RunProcess&quot;, psIp, psOp);_newline//promotion asset gets created automatically because OSM sends its completion independently_newline//check asset again_newline          bcAsset.SetSearchExpr(&quot;[Integration Id]=&apos;&quot; + strAID_usROLI + &quot;&apos;&quot;);_newline          bcAsset.ExecuteQuery(ForwardOnly);_newline          isAssetReady=bcAsset.FirstRecord();_newline          if(!isAssetReady)_newline          {_newline           strErrCode = &quot;FAILED&quot;;_newline           strErrMesg = &quot;Assets for Root Order Item could not be created.&quot;;_newline          }_newline          else_newline          {//1.2 below_newline           bcOLI.ClearToQuery();_newline           bcOLI.SetSearchExpr(&quot;[Root Order Item Id]=&apos;&quot; + strROLIId + &quot;&apos;&quot;);_newline           bcOLI.ExecuteQuery(ForwardOnly);_newline           isRec=bcOLI.FirstRecord();_newline           while(isRec)_newline           {_newline            if(&quot;Complete&quot;==bcOLI.GetFieldValue(&quot;Status&quot;))_newline            {_newline             if(strROLIId == bcOLI.GetFieldValue(&quot;Id&quot;)) bcOLI.SetFieldValue(&quot;Processed Flag&quot;,&quot;Y&quot;);//1.3_newline             bcOLI.SetFieldValue(&quot;Status&quot;,&quot;Open&quot;);_newline             bcOLI.WriteRecord();_newline            }_newline            isRec=bcOLI.NextRecord();_newline           }_newline          }_newline         }_newline         else_newline         {//if ROLI not complete set error as WAIT for later processing_newline          strErrCode = &quot;WAIT&quot;;_newline          strErrMesg = &quot;Assets for Root Order Item not yet created, since OLI is not complete:&quot; + strAID_usROLI;_newline         }_newline        }_newline        if(&quot;OK&quot;==strErrCode &amp;&amp; &quot;NP_usDEACTIVATED&quot;==strRecordSubType)_newline        {_newline//create note in BC: SHM Order Notes - External, to refer the original order in the change number order and vice versa_newline//modify order and then set the new number_newline         psIp = TheApplication().NewPropertySet();_newline         psOp = TheApplication().NewPropertySet();_newline         psIp.SetProperty(&quot;AssetIntegrationId&quot;, strAID_usROLI);_newline         psIp.SetProperty(&quot;AccountId&quot;,strAccntId);_newline         psIp.SetProperty(&quot;ProcessName&quot;, &quot;SISOMModifyWebService-Order&quot;);_newline         bsUtil.InvokeMethod(&quot;RunProcess&quot;, psIp, psOp);_newline         strNewOrderId=psOp.GetProperty(&quot;ActiveDocumentId&quot;);_newline//query order, set new service id_newline         bcOrder.ClearToQuery();_newline         bcOrder.SetSearchExpr(&quot;[Id]=&apos;&quot; + strNewOrderId + &quot;&apos;&quot;);_newline         bcOrder.ExecuteQuery(ForwardOnly);_newline         if(!bcOrder.FirstRecord())_newline         {_newline          strErrCode = &quot;CHG_usNUM_usORDER_usNOT_usCREATED&quot;;_newline          strErrMesg = &quot;Change number order could not be created.&quot;;_newline         }_newline         else_newline         {_newline          strNewOrderNum=bcOrder.GetFieldValue(&quot;Order Number&quot;);_newline          bcOrder.SetFieldValue(&quot;Back Office Order Number&quot;, strRecordRef);_newline          bcOrder.SetFieldValue(&quot;Billing Profile Id&quot;,strCIPId);_newline          bcOrder.SetFieldValue(&quot;Contact Id&quot;,strContactId);_newline          bcOrder.SetFieldValue(&quot;Charged Flag&quot;,&quot;Y&quot;);_newline          bcOrder.WriteRecord();_newline          bcOLI.ClearToQuery();_newline          bcOLI.SetSearchExpr(&quot;[Service Id]=&apos;&quot; + strTempNum + &quot;&apos;&quot;);_newline          bcOLI.ExecuteQuery(ForwardOnly);_newline          isRec=bcOLI.FirstRecord();_newline          if(isRec)//not any found_newline          {_newline           while(isRec)_newline           {_newline            bcOLI.SetFieldValue(&quot;Service Id&quot;,strPortInNum);_newline            bcOLI.SetFieldValue(&quot;Action Code&quot;,&quot;Update&quot;);_newline            if(&quot;&quot;==bcOLI.GetFieldValue(&quot;Parent Order Item Id&quot;))_newline             bcOLI.SetFieldValue(&quot;Change Reason&quot;,&quot;Port In&quot;);_newline            bcOLI.WriteRecord();_newline            isRec=bcOLI.NextRecord();_newline           }_newline//now create a note mentioning new order number under the orig order record_newline           func_usCreateOrderNote(strOrderId,&quot;&quot;,&quot;Change Number Order:&quot; + strNewOrderNum);_newline//submit_newline           bcOrder.WriteRecord();_newline           psIp = TheApplication().NewPropertySet();_newline           psOp = TheApplication().NewPropertySet();_newline           psIp.SetProperty(&quot;RowId&quot;, strNewOrderId);_newline           psIp.SetProperty(&quot;Fulfillment Mode&quot;,&quot;Deliver&quot;);_newline           psIp.SetProperty(&quot;ProcessName&quot;, &quot;SISOMBillingSubmitOrderWebService&quot;);_newline           bsUtil.InvokeMethod(&quot;RunProcess&quot;, psIp, psOp);_newline           strErrCode = &quot;OK&quot;;_newline          }_newline          else_newline          {_newline           strErrCode = &quot;CHG_usNUM_usOLI_usNOT_usCREATED&quot;;_newline           strErrMesg = &quot;Change number order item could not be created.&quot;;_newline          }_newline         }_newline        }_newline       }_newline       else_newline       {_newline        strErrCode = &quot;ROOT_usOLI_usNOT_usFOUND&quot;;_newline        strErrMesg = &quot;Root Order Item for item with Id = &quot; + strNPOLIId + &quot; not found.&quot;;_newline       }_newline      }_newline     }_newline    }_newline   }_newline  }_newline  else_newline  {_newline   strErrCode = &quot;UNHANDLED_usTYPE&quot;;_newline   strErrMesg = &quot;This type of record is not supported:&quot; + strRecordType + &quot;:&quot; + strRecordSubType;_newline  }_newline }_newline catch(e)_newline {_newline  strErrCode = &quot;ERROR&quot;;_newline  strErrMesg = e.errCode + &quot;:&quot; + e.errText;_newline }_newline finally_newline {_newline  Outputs.SetProperty(&quot;Order Id&quot;,    strOrderId);_newline  Outputs.SetProperty(&quot;Error Code&quot;,    strErrCode);_newline  Outputs.SetProperty(&quot;Error Message&quot;, strErrMesg);_newline  boAsset=null;_newline  bcAsset=null;_newline  boOrder=null;_newline  bcOrder=null;_newline  bcOLI=null;_newline  bsUtil=null;_newline  psIp=null;_newline  psOp=null;_newline  return CancelOperation;_newline }_newline}"
 Program_spcLanguage="JS"
 Name="func_usProcess_usMNP_usLASTGOOD_us20140227"
 Sequence="2"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-59RBF1"
 Parent_spcName="TM BS MNP Util"
 Parent_spcInactive="N"
 Inactive="N"
 Script="function func_usQueryBalanceSummary(Inputs, Outputs)_newline{_newline var strErrCode=&quot;OK&quot;,strErrMesg=&quot;&quot;;_newline var bsUtil,psOp,psIp,p1,p2,p3,p4,boAccount, bcCIP;_newline var strCIPId = Inputs.GetProperty(&quot;CIP Id&quot;);_newline//for given CIPId go to AIA and fetch the balance the classical VBC query approach does not work _newline//when fired as a part of inbound web service call on siebel_newline try_newline {_newline  boAccount = TheApplication().GetBusObject(&quot;Account&quot;);_newline  bcCIP = boAccount.GetBusComp(&quot;CMU Com Invoice Profile&quot;);_newline  bcCIP.SetViewMode(AllView);_newline  bcCIP.ActivateField(&quot;Account Id&quot;);_newline  bcCIP.ActivateField(&quot;Account Name&quot;);_newline  bcCIP.ActivateField(&quot;Currency Code&quot;);_newline  bcCIP.ActivateField(&quot;Name&quot;);_newline//this is a profile attr :-( as OOB, MUST use Account Id else fails in wfproc and eai_newline//  bcCIP.ActivateField(&quot;Service Account Id&quot;);_newline  bcCIP.ClearToQuery();_newline  bcCIP.SetSearchExpr(&quot;[Id]=&apos;&quot; + strCIPId + &quot;&apos;&quot;);_newline  bcCIP.ExecuteQuery(ForwardOnly);_newline  if(bcCIP.FirstRecord())_newline  {_newline   bsUtil=TheApplication().GetService(&quot;AccountBalanceSiebelCommsReqABCS&quot;);_newline   psIp=TheApplication().NewPropertySet();_newline   p1=TheApplication().NewPropertySet();_newline   p2=TheApplication().NewPropertySet();_newline   p3=TheApplication().NewPropertySet();_newline   p4=TheApplication().NewPropertySet();_newline   p1.SetType(&quot;QueryBalanceSummaryReqMsg:ListOfCmuRequestBillingProfileIo&quot;);_newline   p1.SetProperty(&quot;MessageId&quot;,      &quot;dummy&quot;);_newline   p1.SetProperty(&quot;IntObjectName&quot;,  &quot;CMU Request Billing Profile IO&quot;);_newline   p1.SetProperty(&quot;MessageType&quot;,    &quot;Integration Object&quot;);_newline   p1.SetProperty(&quot;IntObjectFormat&quot;,&quot;Siebel Hierarchical&quot;);_newline   p2.SetType(&quot;ListOfCMU Request Billing Profile IO&quot;);_newline   p3.SetType(&quot;Com Invoice Profile&quot;);_newline   p3.SetProperty(&quot;Id&quot;,            strCIPId);_newline   p3.SetProperty(&quot;Account Id&quot;,    bcCIP.GetFieldValue(&quot;Account Id&quot;));_newline   p3.SetProperty(&quot;Currency Code&quot;, bcCIP.GetFieldValue(&quot;Currency Code&quot;));_newline   p3.SetProperty(&quot;Account Name&quot;,  bcCIP.GetFieldValue(&quot;Account Name&quot;));_newline   p3.SetProperty(&quot;Name&quot;,          bcCIP.GetFieldValue(&quot;Name&quot;));_newline   p3.SetProperty(&quot;Maximum Number Of Records&quot;,&quot;20&quot;);_newline   p3.SetProperty(&quot;Service Account Id&quot;,  bcCIP.GetFieldValue(&quot;Account Id&quot;));_newline   p2.AddChild(p3);_newline   p1.AddChild(p2);_newline   psIp.AddChild(p1);_newline   psOp=TheApplication().NewPropertySet();_newline   bsUtil.InvokeMethod(&quot;QueryBalanceSummary&quot;,psIp,psOp);_newline//retrieve from output_newline   Outputs.SetProperty(&quot;Due Now&quot;,                      psOp.GetChild(0).GetChild(0).GetChild(0).GetProperty(&quot;Due Now&quot;));_newline   Outputs.SetProperty(&quot;Pending Payments/Adjustments&quot;, psOp.GetChild(0).GetChild(0).GetChild(0).GetProperty(&quot;Pending Payments/Adjustments&quot;));_newline   Outputs.SetProperty(&quot;Unbilled Usage&quot;,               psOp.GetChild(0).GetChild(0).GetChild(0).GetProperty(&quot;Unbilled Usage&quot;));_newline   Outputs.SetProperty(&quot;Unresolved Disputes&quot;,          psOp.GetChild(0).GetChild(0).GetChild(0).GetProperty(&quot;Unresolved Disputes&quot;));_newline   Outputs.SetProperty(&quot;Balance&quot;,                      psOp.GetChild(0).GetChild(0).GetChild(0).GetProperty(&quot;Balance&quot;));_newline   Outputs.SetProperty(&quot;Total&quot;,                        psOp.GetChild(0).GetChild(0).GetChild(0).GetProperty(&quot;Total&quot;));_newline  }_newline  else_newline  {_newline   strErrCode=&quot;NO_usCIP_usREC&quot;;_newline   strErrMesg=&quot;No record found.&quot;;_newline  }_newline }_newline catch(e)_newline {_newline  strErrCode = &quot;BAL_usCHECK_usERR&quot;;_newline  strErrMesg = e.errCode+&quot;:&quot;+e.errText;_newline  TheApplication().LogError(strErrCode, strErrMesg, strCIPId, &quot;CIP&quot;, &quot;BalanceVBCBS&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;)_newline }_newline Outputs.SetProperty(&quot;Error Code&quot;,strErrCode);_newline Outputs.SetProperty(&quot;Error Message&quot;,strErrMesg);_newline return CancelOperation;_newline}"
 Program_spcLanguage="JS"
 Name="func_usQueryBalanceSummary"
 Sequence="16"
></Business_spcService_spcScript
><Business_spcService_spcScript
 Comments=""
 Parent_spcId="1-59RBF1"
 Parent_spcName="TM BS MNP Util"
 Parent_spcInactive="N"
 Inactive="N"
 Script="/*-------+------+--------+----------------------------------------------_newlineYYYYMMDD | Ver  | By     | Description of Change_newline---------+------+--------+----------------------------------------------_newline20140220 | 1.00 | PPB    | First version_newline20140228 | 1.1  | PPB    | NP Order ID - removed from mandatory check_newline---------+------+--------+--------------------------------------------*/_newlinefunction func_usValidateNPOrder(Inputs, Outputs)_newline{_newline var strErrCode = &quot;OK&quot;;_newline var strErrMesg = &quot;&quot;;_newline var strOrderId = Inputs.GetProperty(&quot;OrderId&quot;);_newline var isRec,strAttrName,strAttrVal;_newline var strAttrListNonNullValues=&quot;&quot;;_newline var strAttrNameListWithError=&quot;&quot;;_newline var strAttrErrList=&quot;&quot;;_newline var strProdNamePortIn= &quot;Mobile Port-In&quot;;_newline var boOrder, bcOrder, bcOLI, bcAttr, bcAttach;_newline try_newline {_newline  if(&quot;&quot;==strOrderId)_newline  {_newline   strErrCode=&quot;MISSING_usORDERID&quot;;_newline   strErrMesg=&quot;OrderId must be provided as an input argument.&quot;;_newline  }_newline  else_newline  {_newline   boOrder=TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);_newline   bcOrder=boOrder.GetBusComp(&quot;Order Entry - Orders&quot;);_newline                                                bcOrder.ActivateField(&quot;VFQA Source&quot;);_newline   bcOrder.SetViewMode(AllView);_newline   bcOrder.ClearToQuery();_newline   bcOrder.SetSearchExpr(&quot;[Id]=&apos;&quot; + strOrderId + &quot;&apos;&quot;);_newline   bcOrder.ExecuteQuery(ForwardOnly);_newline   if(!bcOrder.FirstRecord())_newline   {_newline    strErrCode=&quot;ORDER_usNOT_usFOUND&quot;;_newline    strErrMesg=&quot;Order with id &quot; + strOrderId + &quot; not found.&quot;;_newline   }_newline                                               else_newline                                                if(  bcOrder.GetFieldValue(&quot;VFQA Source&quot;) ==&quot;Bulk MNP&quot; )_newline                                                {_newline                                                       strErrCode=&quot;OK&quot;; _newline                                                      strErrMesg=&quot;Nothing to validate since this is a Bulk MNP order.&quot;;_newline                                                }_newline   else_newline   {//check OLI To find portin product_newline    bcOLI=boOrder.GetBusComp(&quot;Order Entry - Line Items&quot;);_newline    bcOLI.SetViewMode(AllView);_newline    bcOLI.ClearToQuery();_newline    bcOLI.SetSearchExpr(&quot;[Action Code]=&apos;Add&apos; AND [Product]=&apos;&quot;+ strProdNamePortIn + &quot;&apos;&quot;);_newline    bcOLI.ExecuteQuery(ForwardOnly);_newline    if(!bcOLI.FirstRecord())_newline    {_newline     strErrCode=&quot;OK&quot;;_newline     strErrMesg=&quot;Nothing to validate since this is not a NP order.&quot;;_newline    }_newline    else_newline    {_newline//check portin attachment_newline     bcAttach_newline     bcAttach=boOrder.GetBusComp(&quot;Order Entry Attachment&quot;);_newline     bcAttach.SetViewMode(AllView);_newline     bcAttach.ClearToQuery();_newline     bcAttach.SetSearchExpr(&quot;[AttachmentType]=&apos;DNO Verification&apos;&quot;);_newline     bcAttach.ExecuteQuery(ForwardOnly);_newline     isRec=bcAttach.FirstRecord();_newline     if(!isRec)_newline     {_newline      strErrCode=&quot;MISSING_usATTACHMENT;&quot;;_newline      strErrMesg=&quot;An attachment must be associated with the NP order with type=&apos;DNO Verification&apos;.;&quot;;_newline     }_newline//check attributes_newline/*_newlineDonor Customer ID_newlineDonor Customer ID Type_newlineDonor Customer Type_newlineDonor Operator_newlineDonor Subscription Type_newlineNP Order ID - not mandatory 1.1_newlineScheduled Port In - this can be null all others must be non-null_newline*/_newline     strAttrListNonNullValues=&quot;Donor Customer ID;Donor Customer ID Type;Donor Customer Type;Donor Operator;Donor Subscription Type&quot;;//1.1_newline     bcAttr=boOrder.GetBusComp(&quot;Order Item XA&quot;);_newline     bcAttr.SetViewMode(AllView);_newline     bcAttr.ActivateField(&quot;Name&quot;);_newline     bcAttr.ActivateField(&quot;Value&quot;);_newline     bcAttr.ClearToQuery();_newline     bcAttr.ExecuteQuery(ForwardOnly);_newline     isRec=bcAttr.FirstRecord();_newline     while(isRec)_newline     {//check all attributes_newline      strAttrName=bcAttr.GetFieldValue(&quot;Name&quot;);_newline      strAttrVal=bcAttr.GetFieldValue(&quot;Value&quot;);_newline      if(0&lt;=strAttrListNonNullValues.indexOf(strAttrName) &amp;&amp; &quot;&quot;==strAttrVal)_newline       strAttrErrList=strAttrErrList + strAttrName + &quot;,&quot;;_newline      isRec=bcAttr.NextRecord();_newline     }_newline     if(&quot;&quot;!=strAttrErrList)_newline     {//chop off last ,_newline      strAttrErrList = strAttrErrList.substring(0,strAttrErrList.length-1);_newline      strErrCode=strErrCode + &quot;MISSING_usATTRIBUTE;&quot;;_newline      strErrMesg=strErrMesg + &quot;Attributes need to be specified [&quot; + strAttrErrList + &quot;];&quot;;_newline     }_newline    }_newline   }_newline  }_newline  _newline }_newline catch(e)_newline {_newline  strErrCode=&quot;NP_usORDER_usVAL_usERR&quot;;_newline  strErrMesg=&quot;Error while validating: &quot; + e.errCode + &quot;:&quot; + e.errText;_newline }_newline finally_newline {_newline  bcAttach=null;_newline  bcAttr=null;_newline  bcOLI=null;_newline  bcOrder=null;_newline  boOrder=null;_newline//if last char is ; cut it off_newline  if(&quot;;&quot;==strErrCode.charAt(strErrCode.length-1))_newline  {_newline   strErrCode=strErrCode.substring(0,strErrCode.length-1);_newline   strErrMesg=strErrMesg.substring(0,strErrMesg.length-1);_newline  }_newline  Outputs.SetProperty(&quot;Error Code&quot;,strErrCode);_newline  Outputs.SetProperty(&quot;Error Message&quot;,strErrMesg);_newline  return CancelOperation;_newline }_newline}"
 Program_spcLanguage="JS"
 Name="func_usValidateNPOrder"
 Sequence="17"
></Business_spcService_spcScript
></Business_spcService
>